{
	"callbacks": [
		{
			"description": "If a file called conf.lua is present in your game folder (or .love file), it is run before the LÖVE modules are loaded. You can use this file to overwrite the love.conf function, which is later called by the LÖVE 'boot' script. Using the love.conf function, you can set some configuration options, and change things like the default size of the window, which modules are loaded, and other stuff.",
			"name": "conf",
			"variants": [
				{
					"arguments": [
						{
							"description": "The love.conf function takes one argument: a table filled with all the default values which you can overwrite to your liking. If you want to change the default window size, for instance, do:\n\nfunction love.conf(t)\n    t.window.width = 1024\n    t.window.height = 768\nend\n\nIf you don't need the physics module or joystick module, do the following.\n\nfunction love.conf(t)\n    t.modules.joystick = false\n    t.modules.physics = false\nend\n\nSetting unused modules to false is encouraged when you release your game. It reduces startup time slightly (especially if the joystick module is disabled) and reduces memory usage (slightly).\n\nNote that you can't disable love.filesystem; it's mandatory. The same goes for the love module itself. love.graphics needs love.window to be enabled.",
							"name": "t",
							"table": [
								{
									"default": "nil",
									"description": "This flag determines the name of the save directory for your game. Note that you can only specify the name, not the location where it will be created:\nt.identity = \"gabe_HL3\" -- Correct\n\nt.identity = \"c:/Users/gabe/HL3\" -- Incorrect\nAlternatively love.filesystem.setIdentity can be used to set the save directory outside of the config file.",
									"name": "identity",
									"type": "string"
								},
								{
									"default": "false",
									"description": "This flag determines if game directory should be searched first then save directory (true) or otherwise (false)",
									"name": "appendidentity",
									"type": "boolean"
								},
								{
									"default": "\"11.5\"",
									"description": "t.version should be a string, representing the version of LÖVE for which your game was made. It should be formatted as \"X.Y.Z\" where X is the major release number, Y the minor, and Z the patch level. It allows LÖVE to display a warning if it isn't compatible. Its default is the version of LÖVE running.",
									"name": "version",
									"type": "string"
								},
								{
									"default": "false",
									"description": "Determines whether a console should be opened alongside the game window (Windows only) or not. Note: On OSX you can get console output by running LÖVE through the terminal.",
									"name": "console",
									"type": "boolean"
								},
								{
									"default": "true",
									"description": "Sets whether the device accelerometer on iOS and Android should be exposed as a 3-axis Joystick. Disabling the accelerometer when it's not used may reduce CPU usage.",
									"name": "accelerometerjoystick",
									"type": "boolean"
								},
								{
									"default": "false",
									"description": "Sets whether files are saved in external storage (true) or internal storage (false) on Android.",
									"name": "externalstorage",
									"type": "boolean"
								},
								{
									"default": "false",
									"description": "Determines whether gamma-correct rendering is enabled, when the system supports it.",
									"name": "gammacorrect",
									"type": "boolean"
								},
								{
									"description": "Audio options.",
									"name": "audio",
									"table": [
										{
											"default": "false",
											"description": "Request microphone permission from the user. When user allows it, love.audio.getRecordingDevices will lists recording devices available. Otherwise, love.audio.getRecordingDevices returns empty table and a message is shown to inform user when called.",
											"name": "mic",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Sets whether background audio / music from other apps should play while LÖVE is open. See love.system.hasBackgroundMusic for more details.",
											"name": "mixwithsystem",
											"type": "boolean"
										}
									],
									"type": "table"
								},
								{
									"description": "It is possible to defer window creation until love.window.setMode is first called in your code. To do so, set t.window = nil in love.conf (or t.screen = nil in older versions.) If this is done, LÖVE may crash if any function from love.graphics is called before the first love.window.setMode in your code.\n\nThe t.window table was named t.screen in versions prior to 0.9.0. The t.screen table doesn't exist in love.conf in 0.9.0, and the t.window table doesn't exist in love.conf in 0.8.0. This means love.conf will fail to execute (therefore it will fall back to default values) if care is not taken to use the correct table for the LÖVE version being used.",
									"name": "window",
									"table": [
										{
											"default": "\"Untitled\"",
											"description": "Sets the title of the window the game is in. Alternatively love.window.setTitle can be used to change the window title outside of the config file.",
											"name": "title",
											"type": "string"
										},
										{
											"default": "nil",
											"description": "A filepath to an image to use as the window's icon. Not all operating systems support very large icon images. The icon can also be changed with love.window.setIcon.",
											"name": "icon",
											"type": "string"
										},
										{
											"default": "800",
											"description": "Sets the window's dimensions. If these flags are set to 0 LÖVE automatically uses the user's desktop dimensions.",
											"name": "width",
											"type": "number"
										},
										{
											"default": "600",
											"description": "Sets the window's dimensions. If these flags are set to 0 LÖVE automatically uses the user's desktop dimensions.",
											"name": "height",
											"type": "number"
										},
										{
											"default": "false",
											"description": "Removes all border visuals from the window. Note that the effects may wary between operating systems.",
											"name": "borderless",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "If set to true this allows the user to resize the game's window.",
											"name": "resizable",
											"type": "boolean"
										},
										{
											"default": "1",
											"description": "Sets the minimum width and height for the game's window if it can be resized by the user. If you set lower values to window.width and window.height LÖVE will always favor the minimum dimensions set via window.minwidth and window.minheight.",
											"name": "minwidth",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Sets the minimum width and height for the game's window if it can be resized by the user. If you set lower values to window.width and window.height LÖVE will always favor the minimum dimensions set via window.minwidth and window.minheight.",
											"name": "minheight",
											"type": "number"
										},
										{
											"default": "false",
											"description": "Whether to run the game in fullscreen (true) or windowed (false) mode. The fullscreen can also be toggled via love.window.setFullscreen or love.window.setMode.",
											"name": "fullscreen",
											"type": "boolean"
										},
										{
											"default": "\"desktop\"",
											"description": "Specifies the type of fullscreen mode to use (normal or desktop). Generally the desktop is recommended, as it is less restrictive than normal mode on some operating systems.",
											"name": "fullscreentype",
											"type": "string"
										},
										{
											"default": "true",
											"description": "Sets whetever to enable or disable automatic DPI scaling.",
											"name": "usedpiscale",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enables or deactivates vertical synchronization. Vsync tries to keep the game at a steady framerate and can prevent issues like screen tearing. It is recommended to keep vsync activated if you don't know about the possible implications of turning it off. Before LÖVE 11.0, this value was boolean (true or false). Since LÖVE 11.0, this value is number (1 to enable vsync, 0 to disable vsync, -1 to use adaptive vsync when supported).\n\nNote that in iOS, vertical synchronization is always enabled and cannot be changed.",
											"name": "vsync",
											"type": "number"
										},
										{
											"default": "nil",
											"description": "The number of bits per sample in the depth buffer (16/24/32, default nil)",
											"name": "depth",
											"type": "number"
										},
										{
											"default": "nil",
											"description": "Then number of bits per sample in the depth buffer (generally 8, default nil)",
											"name": "stencil",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The number of samples to use with multi-sampled antialiasing.",
											"name": "msaa",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The index of the display to show the window in, if multiple monitors are available.",
											"name": "display",
											"type": "number"
										},
										{
											"default": "false",
											"description": "See love.window.getPixelScale, love.window.toPixels, and love.window.fromPixels. It is recommended to keep this option disabled if you can't test your game on a Mac or iOS system with a Retina display, because code will need tweaking to make sure things look correct.",
											"name": "highdpi",
											"type": "boolean"
										},
										{
											"default": "nil",
											"description": "Determines the position of the window on the user's screen. Alternatively love.window.setPosition can be used to change the position on the fly.",
											"name": "x",
											"type": "number"
										},
										{
											"default": "nil",
											"description": "Determines the position of the window on the user's screen. Alternatively love.window.setPosition can be used to change the position on the fly.",
											"name": "y",
											"type": "number"
										}
									],
									"type": "table"
								},
								{
									"description": "Module options.",
									"name": "modules",
									"table": [
										{
											"default": "true",
											"description": "Enable the audio module.",
											"name": "audio",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the event module.",
											"name": "event",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the graphics module.",
											"name": "graphics",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the image module.",
											"name": "image",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the joystick module.",
											"name": "joystick",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the keyboard module.",
											"name": "keyboard",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the math module.",
											"name": "math",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the mouse module.",
											"name": "mouse",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the physics module.",
											"name": "physics",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the sound module.",
											"name": "sound",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the system module.",
											"name": "system",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the timer module.",
											"name": "timer",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the touch module.",
											"name": "touch",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the video module.",
											"name": "video",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the window module.",
											"name": "window",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "Enable the thread module.",
											"name": "thread",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"type": "table"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when a directory is dragged and dropped onto the window.",
			"name": "directorydropped",
			"variants": [
				{
					"arguments": [
						{
							"description": "The full platform-dependent path to the directory. It can be used as an argument to love.filesystem.mount, in order to gain read access to the directory with love.filesystem.",
							"name": "path",
							"type": "string"
						}
					],
					"description": "Paths passed into this callback are able to be used with love.filesystem.mount, which is the only way to get read access via love.filesystem to the dropped directory. love.filesystem.mount does not generally accept other full platform-dependent directory paths that haven't been dragged and dropped onto the window."
				}
			]
		},
		{
			"description": "Called when the device display orientation changed, for example, user rotated their phone 180 degrees.",
			"name": "displayrotated",
			"variants": [
				{
					"arguments": [
						{
							"description": "The index of the display that changed orientation.",
							"name": "index",
							"type": "number"
						},
						{
							"description": "The new orientation.",
							"name": "orientation",
							"type": "DisplayOrientation"
						}
					]
				}
			]
		},
		{
			"description": "Callback function used to draw on the screen every frame.",
			"name": "draw",
			"variants": [
				[]
			]
		},
		{
			"description": "The error handler, used to display error messages.",
			"name": "errorhandler",
			"variants": [
				{
					"arguments": [
						{
							"description": "The error message.",
							"name": "msg",
							"type": "string"
						}
					],
					"returns": [
						{
							"description": "Function which handles one frame, including events and rendering, when called. If this is nil then LÖVE exits immediately.",
							"name": "mainLoop",
							"signature": {
								"returns": [
									{
										"description": "Exit code or error message or nil to continue.",
										"name": "retval",
										"type": "any"
									}
								]
							},
							"type": "function"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when a file is dragged and dropped onto the window.",
			"name": "filedropped",
			"variants": [
				{
					"arguments": [
						{
							"description": "The unopened File object representing the file that was dropped.",
							"name": "file",
							"type": "DroppedFile"
						}
					],
					"description": ""
				}
			]
		},
		{
			"description": "Callback function triggered when window receives or loses focus.",
			"name": "focus",
			"variants": [
				{
					"arguments": [
						{
							"description": "True if the window gains focus, false if it loses focus. ",
							"name": "focus",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"description": "Called when a Joystick's virtual gamepad axis is moved.",
			"name": "gamepadaxis",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The virtual gamepad axis.",
							"name": "axis",
							"type": "GamepadAxis"
						},
						{
							"description": "The new axis value.",
							"name": "value",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"description": "Called when a Joystick's virtual gamepad button is pressed.",
			"name": "gamepadpressed",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The virtual gamepad button.",
							"name": "button",
							"type": "GamepadButton"
						}
					]
				}
			]
		},
		{
			"description": "Called when a Joystick's virtual gamepad button is released.",
			"name": "gamepadreleased",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The virtual gamepad button.",
							"name": "button",
							"type": "GamepadButton"
						}
					]
				}
			]
		},
		{
			"description": "Called when a Joystick is connected.",
			"name": "joystickadded",
			"variants": [
				{
					"arguments": [
						{
							"description": "The newly connected Joystick object.",
							"name": "joystick",
							"type": "Joystick"
						}
					],
					"description": "This callback is also triggered after love.load for every Joystick which was already connected when the game started up."
				}
			]
		},
		{
			"description": "Called when a joystick axis moves.",
			"name": "joystickaxis",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The axis number.",
							"name": "axis",
							"type": "number"
						},
						{
							"description": "The new axis value.",
							"name": "value",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"description": "Called when a joystick hat direction changes.",
			"name": "joystickhat",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The hat number.",
							"name": "hat",
							"type": "number"
						},
						{
							"description": "The new hat direction.",
							"name": "direction",
							"type": "JoystickHat"
						}
					]
				}
			]
		},
		{
			"description": "Called when a joystick button is pressed.",
			"name": "joystickpressed",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The button number.",
							"name": "button",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"description": "Called when a joystick button is released.",
			"name": "joystickreleased",
			"variants": [
				{
					"arguments": [
						{
							"description": "The joystick object.",
							"name": "joystick",
							"type": "Joystick"
						},
						{
							"description": "The button number.",
							"name": "button",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"description": "Called when a Joystick is disconnected.",
			"name": "joystickremoved",
			"variants": [
				{
					"arguments": [
						{
							"description": "The now-disconnected Joystick object.",
							"name": "joystick",
							"type": "Joystick"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when a key is pressed.",
			"name": "keypressed",
			"variants": [
				{
					"arguments": [
						{
							"description": "Character of the pressed key.",
							"name": "key",
							"type": "KeyConstant"
						},
						{
							"description": "The scancode representing the pressed key.",
							"name": "scancode",
							"type": "Scancode"
						},
						{
							"description": "Whether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.",
							"name": "isrepeat",
							"type": "boolean"
						}
					],
					"description": "Scancodes are keyboard layout-independent, so the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nKey repeat needs to be enabled with love.keyboard.setKeyRepeat for repeat keypress events to be received. This does not affect love.textinput."
				},
				{
					"arguments": [
						{
							"description": "Character of the key pressed.",
							"name": "key",
							"type": "KeyConstant"
						},
						{
							"description": "Whether this keypress event is a repeat. The delay between key repeats depends on the user's system settings.",
							"name": "isrepeat",
							"type": "boolean"
						}
					],
					"description": "Key repeat needs to be enabled with love.keyboard.setKeyRepeat for repeat keypress events to be received."
				}
			]
		},
		{
			"description": "Callback function triggered when a keyboard key is released.",
			"name": "keyreleased",
			"variants": [
				{
					"arguments": [
						{
							"description": "Character of the released key.",
							"name": "key",
							"type": "KeyConstant"
						},
						{
							"description": "The scancode representing the released key.",
							"name": "scancode",
							"type": "Scancode"
						}
					],
					"description": "Scancodes are keyboard layout-independent, so the scancode 'w' will be used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are."
				}
			]
		},
		{
			"description": "This function is called exactly once at the beginning of the game.",
			"name": "load",
			"variants": [
				{
					"arguments": [
						{
							"description": "Command-line arguments given to the game.",
							"name": "arg",
							"type": "table"
						},
						{
							"description": "Unfiltered command-line arguments given to the executable (see #Notes).",
							"name": "unfilteredArg",
							"type": "table"
						}
					],
					"description": "In LÖVE 11.0, the passed arguments excludes the game name and the fused command-line flag (if exist) when runs from non-fused LÖVE executable. Previous version pass the argument as-is without any filtering."
				}
			]
		},
		{
			"description": "Callback function triggered when the system is running out of memory on mobile devices.\n\nMobile operating systems may forcefully kill the game if it uses too much memory, so any non-critical resource should be removed if possible (by setting all variables referencing the resources to '''nil'''), when this event is triggered. Sounds and images in particular tend to use the most memory.",
			"name": "lowmemory",
			"variants": [
				[]
			]
		},
		{
			"description": "Callback function triggered when window receives or loses mouse focus.",
			"name": "mousefocus",
			"variants": [
				{
					"arguments": [
						{
							"description": "Whether the window has mouse focus or not.",
							"name": "focus",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when the mouse is moved.",
			"name": "mousemoved",
			"variants": [
				{
					"arguments": [
						{
							"description": "The mouse position on the x-axis.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "The mouse position on the y-axis.",
							"name": "y",
							"type": "number"
						},
						{
							"description": "The amount moved along the x-axis since the last time love.mousemoved was called.",
							"name": "dx",
							"type": "number"
						},
						{
							"description": "The amount moved along the y-axis since the last time love.mousemoved was called.",
							"name": "dy",
							"type": "number"
						},
						{
							"description": "True if the mouse button press originated from a touchscreen touch-press.",
							"name": "istouch",
							"type": "boolean"
						}
					],
					"description": "If Relative Mode is enabled for the mouse, the '''dx''' and '''dy''' arguments of this callback will update but '''x''' and '''y''' are not guaranteed to."
				}
			]
		},
		{
			"description": "Callback function triggered when a mouse button is pressed.",
			"name": "mousepressed",
			"variants": [
				{
					"arguments": [
						{
							"description": "Mouse x position, in pixels.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "Mouse y position, in pixels.",
							"name": "y",
							"type": "number"
						},
						{
							"description": "The button index that was pressed. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.",
							"name": "button",
							"type": "number"
						},
						{
							"description": "True if the mouse button press originated from a touchscreen touch-press.",
							"name": "istouch",
							"type": "boolean"
						},
						{
							"description": "The number of presses in a short time frame and small area, used to simulate double, triple clicks",
							"name": "presses",
							"type": "number"
						}
					],
					"description": "Use love.wheelmoved to detect mouse wheel motion. It will not register as a button press in version 0.10.0 and newer."
				}
			]
		},
		{
			"description": "Callback function triggered when a mouse button is released.",
			"name": "mousereleased",
			"variants": [
				{
					"arguments": [
						{
							"description": "Mouse x position, in pixels.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "Mouse y position, in pixels.",
							"name": "y",
							"type": "number"
						},
						{
							"description": "The button index that was released. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependent.",
							"name": "button",
							"type": "number"
						},
						{
							"description": "True if the mouse button release originated from a touchscreen touch-release.",
							"name": "istouch",
							"type": "boolean"
						},
						{
							"description": "The number of presses in a short time frame and small area, used to simulate double, triple clicks",
							"name": "presses",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when the game is closed.",
			"name": "quit",
			"variants": [
				{
					"returns": [
						{
							"description": "Abort quitting. If true, do not close the game.",
							"name": "r",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"description": "Called when the window is resized, for example if the user resizes the window, or if love.window.setMode is called with an unsupported width or height in fullscreen and the window chooses the closest appropriate size.",
			"name": "resize",
			"variants": [
				{
					"arguments": [
						{
							"description": "The new width.",
							"name": "w",
							"type": "number"
						},
						{
							"description": "The new height.",
							"name": "h",
							"type": "number"
						}
					],
					"description": "Calls to love.window.setMode will '''only''' trigger this event if the width or height of the window after the call doesn't match the requested width and height. This can happen if a fullscreen mode is requested which doesn't match any supported mode, or if the fullscreen type is 'desktop' and the requested width or height don't match the desktop resolution.\n\nSince 11.0, this function returns width and height in DPI-scaled units rather than pixels."
				}
			]
		},
		{
			"description": "The main function, containing the main loop. A sensible default is used when left out.",
			"name": "run",
			"variants": [
				{
					"returns": [
						{
							"description": "Function which handlers one frame, including events and rendering when called.",
							"name": "mainLoop",
							"signature": {
								"returns": [
									{
										"description": "Exit code or error message or nil to continue.",
										"name": "retval",
										"type": "any"
									}
								]
							},
							"type": "function"
						}
					]
				}
			]
		},
		{
			"description": "Called when the candidate text for an IME (Input Method Editor) has changed.\n\nThe candidate text is not the final text that the user will eventually choose. Use love.textinput for that.",
			"name": "textedited",
			"variants": [
				{
					"arguments": [
						{
							"description": "The UTF-8 encoded unicode candidate text.",
							"name": "text",
							"type": "string"
						},
						{
							"description": "The start cursor of the selected candidate text.",
							"name": "start",
							"type": "number"
						},
						{
							"description": "The length of the selected candidate text. May be 0.",
							"name": "length",
							"type": "number"
						}
					],
					"description": ""
				}
			]
		},
		{
			"description": "Called when text has been entered by the user. For example if shift-2 is pressed on an American keyboard layout, the text '@' will be generated.",
			"name": "textinput",
			"variants": [
				{
					"arguments": [
						{
							"description": "The UTF-8 encoded unicode text.",
							"name": "text",
							"type": "string"
						}
					],
					"description": "Although Lua strings can store UTF-8 encoded unicode text just fine, many functions in Lua's string library will not treat the text as you might expect. For example, #text (and string.len(text)) will give the number of ''bytes'' in the string, rather than the number of unicode characters. The Lua wiki and a presentation by one of Lua's creators give more in-depth explanations, with some tips.\n\nThe utf8 library can be used to operate on UTF-8 encoded unicode text (such as the text argument given in this function.)\n\nOn Android and iOS, textinput is disabled by default; call love.keyboard.setTextInput to enable it."
				}
			]
		},
		{
			"description": "Callback function triggered when a Thread encounters an error.",
			"name": "threaderror",
			"variants": [
				{
					"arguments": [
						{
							"description": "The thread which produced the error.",
							"name": "thread",
							"type": "Thread"
						},
						{
							"description": "The error message.",
							"name": "errorstr",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when a touch press moves inside the touch screen.",
			"name": "touchmoved",
			"variants": [
				{
					"arguments": [
						{
							"description": "The identifier for the touch press.",
							"name": "id",
							"type": "light userdata"
						},
						{
							"description": "The x-axis position of the touch inside the window, in pixels.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "The y-axis position of the touch inside the window, in pixels.",
							"name": "y",
							"type": "number"
						},
						{
							"description": "The x-axis movement of the touch inside the window, in pixels.",
							"name": "dx",
							"type": "number"
						},
						{
							"description": "The y-axis movement of the touch inside the window, in pixels.",
							"name": "dy",
							"type": "number"
						},
						{
							"description": "The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.",
							"name": "pressure",
							"type": "number"
						}
					],
					"description": "The identifier is only guaranteed to be unique for the specific touch press until love.touchreleased is called with that identifier, at which point it may be reused for new touch presses.\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of 1, whereas this API reports positions in pixels."
				}
			]
		},
		{
			"description": "Callback function triggered when the touch screen is touched.",
			"name": "touchpressed",
			"variants": [
				{
					"arguments": [
						{
							"description": "The identifier for the touch press.",
							"name": "id",
							"type": "light userdata"
						},
						{
							"description": "The x-axis position of the touch press inside the window, in pixels.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "The y-axis position of the touch press inside the window, in pixels.",
							"name": "y",
							"type": "number"
						},
						{
							"description": "The x-axis movement of the touch press inside the window, in pixels. This should always be zero.",
							"name": "dx",
							"type": "number"
						},
						{
							"description": "The y-axis movement of the touch press inside the window, in pixels. This should always be zero.",
							"name": "dy",
							"type": "number"
						},
						{
							"description": "The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.",
							"name": "pressure",
							"type": "number"
						}
					],
					"description": "The identifier is only guaranteed to be unique for the specific touch press until love.touchreleased is called with that identifier, at which point it may be reused for new touch presses.\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of 1, whereas this API reports positions in pixels."
				}
			]
		},
		{
			"description": "Callback function triggered when the touch screen stops being touched.",
			"name": "touchreleased",
			"variants": [
				{
					"arguments": [
						{
							"description": "The identifier for the touch press.",
							"name": "id",
							"type": "light userdata"
						},
						{
							"description": "The x-axis position of the touch inside the window, in pixels.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "The y-axis position of the touch inside the window, in pixels.",
							"name": "y",
							"type": "number"
						},
						{
							"description": "The x-axis movement of the touch inside the window, in pixels.",
							"name": "dx",
							"type": "number"
						},
						{
							"description": "The y-axis movement of the touch inside the window, in pixels.",
							"name": "dy",
							"type": "number"
						},
						{
							"description": "The amount of pressure being applied. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.",
							"name": "pressure",
							"type": "number"
						}
					],
					"description": "The identifier is only guaranteed to be unique for the specific touch press until love.touchreleased is called with that identifier, at which point it may be reused for new touch presses.\n\nThe unofficial Android and iOS ports of LÖVE 0.9.2 reported touch positions as normalized values in the range of 1, whereas this API reports positions in pixels."
				}
			]
		},
		{
			"description": "Callback function used to update the state of the game every frame.",
			"name": "update",
			"variants": [
				{
					"arguments": [
						{
							"description": "Time since the last update in seconds.",
							"name": "dt",
							"type": "number"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when window is minimized/hidden or unminimized by the user.",
			"name": "visible",
			"variants": [
				{
					"arguments": [
						{
							"description": "True if the window is visible, false if it isn't.",
							"name": "visible",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"description": "Callback function triggered when the mouse wheel is moved.",
			"name": "wheelmoved",
			"variants": [
				{
					"arguments": [
						{
							"description": "Amount of horizontal mouse wheel movement. Positive values indicate movement to the right.",
							"name": "x",
							"type": "number"
						},
						{
							"description": "Amount of vertical mouse wheel movement. Positive values indicate upward movement.",
							"name": "y",
							"type": "number"
						}
					]
				}
			]
		}
	],
	"functions": [
		{
			"description": "Gets the current running version of LÖVE.",
			"name": "getVersion",
			"variants": [
				{
					"description": "For LÖVE versions below 0.9.1, the following variables can be used instead (and still work in 0.9.2 and newer):\n\nlove._version_major\n\nlove._version_minor\n\nlove._version_revision",
					"returns": [
						{
							"description": "The major version of LÖVE, i.e. 0 for version 0.9.1.",
							"name": "major",
							"type": "number"
						},
						{
							"description": "The minor version of LÖVE, i.e. 9 for version 0.9.1.",
							"name": "minor",
							"type": "number"
						},
						{
							"description": "The revision version of LÖVE, i.e. 1 for version 0.9.1.",
							"name": "revision",
							"type": "number"
						},
						{
							"description": "The codename of the current version, i.e. 'Baby Inspector' for version 0.9.1.",
							"name": "codename",
							"type": "string"
						}
					]
				}
			]
		},
		{
			"description": "Gets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.\n\nWhen deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.",
			"name": "hasDeprecationOutput",
			"variants": [
				{
					"returns": [
						{
							"description": "Whether deprecation output is enabled.",
							"name": "enabled",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"description": "Gets whether the given version is compatible with the current running version of LÖVE.",
			"name": "isVersionCompatible",
			"variants": [
				{
					"arguments": [
						{
							"description": "The version to check (for example '11.3' or '0.10.2').",
							"name": "version",
							"type": "string"
						}
					],
					"returns": [
						{
							"description": "Whether the given version is compatible with the current running version of LÖVE.",
							"name": "compatible",
							"type": "boolean"
						}
					]
				},
				{
					"arguments": [
						{
							"description": "The major version to check (for example 11 for 11.3 or 0 for 0.10.2).",
							"name": "major",
							"type": "number"
						},
						{
							"description": "The minor version to check (for example 3 for 11.3 or 10 for 0.10.2).",
							"name": "minor",
							"type": "number"
						},
						{
							"description": "The revision of version to check (for example 0 for 11.3 or 2 for 0.10.2).",
							"name": "revision",
							"type": "number"
						}
					],
					"returns": [
						{
							"description": "Whether the given version is compatible with the current running version of LÖVE.",
							"name": "compatible",
							"type": "boolean"
						}
					]
				}
			]
		},
		{
			"description": "Sets whether LÖVE displays warnings when using deprecated functionality. It is disabled by default in fused mode, and enabled by default otherwise.\n\nWhen deprecation output is enabled, the first use of a formally deprecated LÖVE API will show a message at the bottom of the screen for a short time, and print the message to the console.",
			"name": "setDeprecationOutput",
			"variants": [
				{
					"arguments": [
						{
							"description": "Whether to enable or disable deprecation output.",
							"name": "enable",
							"type": "boolean"
						}
					]
				}
			]
		}
	],
	"modules": [
		{
			"description": "Provides an interface to create noise with the user's speakers.",
			"enums": [
				{
					"constants": [
						{
							"description": "Sources do not get attenuated.",
							"name": "none"
						},
						{
							"description": "Inverse distance attenuation.",
							"name": "inverse"
						},
						{
							"description": "Inverse distance attenuation. Gain is clamped. In version 0.9.2 and older this is named '''inverse clamped'''.",
							"name": "inverseclamped"
						},
						{
							"description": "Linear attenuation.",
							"name": "linear"
						},
						{
							"description": "Linear attenuation. Gain is clamped. In version 0.9.2 and older this is named '''linear clamped'''.",
							"name": "linearclamped"
						},
						{
							"description": "Exponential attenuation.",
							"name": "exponent"
						},
						{
							"description": "Exponential attenuation. Gain is clamped. In version 0.9.2 and older this is named '''exponent clamped'''.",
							"name": "exponentclamped"
						}
					],
					"description": "The different distance models.\n\nExtended information can be found in the chapter \"3.4. Attenuation By Distance\" of the OpenAL 1.1 specification.",
					"name": "DistanceModel"
				},
				{
					"constants": [
						{
							"description": "Plays multiple copies of the sound with slight pitch and time variation. Used to make sounds sound \"fuller\" or \"thicker\".",
							"name": "chorus"
						},
						{
							"description": "Decreases the dynamic range of the sound, making the loud and quiet parts closer in volume, producing a more uniform amplitude throughout time.",
							"name": "compressor"
						},
						{
							"description": "Alters the sound by amplifying it until it clips, shearing off parts of the signal, leading to a compressed and distorted sound.",
							"name": "distortion"
						},
						{
							"description": "Decaying feedback based effect, on the order of seconds. Also known as delay; causes the sound to repeat at regular intervals at a decreasing volume.",
							"name": "echo"
						},
						{
							"description": "Adjust the frequency components of the sound using a 4-band (low-shelf, two band-pass and a high-shelf) equalizer.",
							"name": "equalizer"
						},
						{
							"description": "Plays two copies of the sound; while varying the phase, or equivalently delaying one of them, by amounts on the order of milliseconds, resulting in phasing sounds.",
							"name": "flanger"
						},
						{
							"description": "Decaying feedback based effect, on the order of milliseconds. Used to simulate the reflection off of the surroundings.",
							"name": "reverb"
						},
						{
							"description": "An implementation of amplitude modulation; multiplies the source signal with a simple waveform, to produce either volume changes, or inharmonic overtones.",
							"name": "ringmodulator"
						}
					],
					"description": "The different types of effects supported by love.audio.setEffect.",
					"name": "EffectType"
				},
				{
					"constants": [
						{
							"description": "A sawtooth wave, also known as a ramp wave. Named for its linear rise, and (near-)instantaneous fall along time.",
							"name": "sawtooth"
						},
						{
							"description": "A sine wave. Follows a trigonometric sine function.",
							"name": "sine"
						},
						{
							"description": "A square wave. Switches between high and low states (near-)instantaneously.",
							"name": "square"
						},
						{
							"description": "A triangle wave. Follows a linear rise and fall that repeats periodically.",
							"name": "triangle"
						}
					],
					"description": "The different types of waveforms that can be used with the '''ringmodulator''' EffectType.",
					"name": "EffectWaveform"
				},
				{
					"constants": [
						{
							"description": "Low-pass filter. High frequency sounds are attenuated.",
							"name": "lowpass"
						},
						{
							"description": "High-pass filter. Low frequency sounds are attenuated.",
							"name": "highpass"
						},
						{
							"description": "Band-pass filter. Both high and low frequency sounds are attenuated based on the given parameters.",
							"name": "bandpass"
						}
					],
					"description": "Types of filters for Sources.",
					"name": "FilterType"
				},
				{
					"constants": [
						{
							"description": "The whole audio is decoded.",
							"name": "static"
						},
						{
							"description": "The audio is decoded in chunks when needed.",
							"name": "stream"
						},
						{
							"description": "The audio must be manually queued by the user.",
							"name": "queue"
						}
					],
					"description": "Types of audio sources.\n\nA good rule of thumb is to use stream for music files and static for all short sound effects. Basically, you want to avoid loading large files into memory at once.",
					"name": "SourceType"
				},
				{
					"constants": [
						{
							"description": "Regular seconds.",
							"name": "seconds"
						},
						{
							"description": "Audio samples.",
							"name": "samples"
						}
					],
					"description": "Units that represent time.",
					"name": "TimeUnit"
				}
			],
			"functions": [
				{
					"description": "Gets a list of the names of the currently enabled effects.",
					"name": "getActiveEffects",
					"variants": [
						{
							"returns": [
								{
									"arraytype": "string",
									"description": "The list of the names of the currently enabled effects.",
									"name": "effects",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current number of simultaneously playing sources.",
					"name": "getActiveSourceCount",
					"variants": [
						{
							"returns": [
								{
									"description": "The current number of simultaneously playing sources.",
									"name": "count",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the distance attenuation model.",
					"name": "getDistanceModel",
					"variants": [
						{
							"returns": [
								{
									"description": "The current distance model. The default is 'inverseclamped'.",
									"name": "model",
									"type": "DistanceModel"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current global scale factor for velocity-based doppler effects.",
					"name": "getDopplerScale",
					"variants": [
						{
							"returns": [
								{
									"description": "The current doppler scale factor.",
									"name": "scale",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the settings associated with an effect.",
					"name": "getEffect",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the effect.",
									"name": "name",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The settings associated with the effect.",
									"name": "settings",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the maximum number of active effects supported by the system.",
					"name": "getMaxSceneEffects",
					"variants": [
						{
							"returns": [
								{
									"description": "The maximum number of active effects.",
									"name": "maximum",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the maximum number of active Effects in a single Source object, that the system can support.",
					"name": "getMaxSourceEffects",
					"variants": [
						{
							"description": "This function return 0 for system that doesn't support audio effects.",
							"returns": [
								{
									"description": "The maximum number of active Effects per Source.",
									"name": "maximum",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the orientation of the listener.",
					"name": "getOrientation",
					"variants": [
						{
							"returns": [
								{
									"description": "Forward vector of the listener orientation.",
									"name": "fx, fy, fz",
									"type": "number"
								},
								{
									"description": "Up vector of the listener orientation.",
									"name": "ux, uy, uz",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.",
					"name": "getPosition",
					"variants": [
						{
							"returns": [
								{
									"description": "The X position of the listener.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The Y position of the listener.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The Z position of the listener.",
									"name": "z",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets a list of RecordingDevices on the system.\n\nThe first device in the list is the user's default recording device. The list may be empty if there are no microphones connected to the system.\n\nAudio recording is currently not supported on iOS.",
					"name": "getRecordingDevices",
					"variants": [
						{
							"description": "Audio recording for Android is supported since 11.3. However, it's not supported when APK from Play Store is used.",
							"returns": [
								{
									"arraytype": "RecordingDevice",
									"description": "The list of connected recording devices.",
									"name": "devices",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Returns the velocity of the listener.",
					"name": "getVelocity",
					"variants": [
						{
							"returns": [
								{
									"description": "The X velocity of the listener.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The Y velocity of the listener.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The Z velocity of the listener.",
									"name": "z",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the master volume.",
					"name": "getVolume",
					"variants": [
						{
							"returns": [
								{
									"description": "The current master volume",
									"name": "volume",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether audio effects are supported in the system.",
					"name": "isEffectsSupported",
					"variants": [
						{
							"description": "Older Linux distributions that ship with older OpenAL library may not support audio effects. Furthermore, iOS doesn't\n\nsupport audio effects at all.",
							"returns": [
								{
									"description": "True if effects are supported, false otherwise.",
									"name": "supported",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Source usable for real-time generated sound playback with Source:queue.",
					"name": "newQueueableSource",
					"variants": [
						{
							"arguments": [
								{
									"description": "Number of samples per second when playing.",
									"name": "samplerate",
									"type": "number"
								},
								{
									"description": "Bits per sample (8 or 16).",
									"name": "bitdepth",
									"type": "number"
								},
								{
									"description": "1 for mono or 2 for stereo.",
									"name": "channels",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The number of buffers that can be queued up at any given time with Source:queue. Cannot be greater than 64. A sensible default (~8) is chosen if no value is specified.",
									"name": "buffercount",
									"type": "number"
								}
							],
							"description": "The sample rate, bit depth, and channel count of any SoundData used with Source:queue must match the parameters given to this constructor.",
							"returns": [
								{
									"description": "The new Source usable with Source:queue.",
									"name": "source",
									"type": "Source"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Source from a filepath, File, Decoder or SoundData.\n\nSources created from SoundData are always static.",
					"name": "newSource",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filepath to the audio file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "Streaming or static source.",
									"name": "type",
									"type": "SourceType"
								}
							],
							"returns": [
								{
									"description": "A new Source that can play the specified audio.",
									"name": "source",
									"type": "Source"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A File pointing to an audio file.",
									"name": "file",
									"type": "File"
								},
								{
									"description": "Streaming or static source.",
									"name": "type",
									"type": "SourceType"
								}
							],
							"returns": [
								{
									"description": "A new Source that can play the specified audio.",
									"name": "source",
									"type": "Source"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The Decoder to create a Source from.",
									"name": "decoder",
									"type": "Decoder"
								},
								{
									"description": "Streaming or static source.",
									"name": "type",
									"type": "SourceType"
								}
							],
							"returns": [
								{
									"description": "A new Source that can play the specified audio.",
									"name": "source",
									"type": "Source"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The FileData to create a Source from.",
									"name": "data",
									"type": "FileData"
								},
								{
									"description": "Streaming or static source.",
									"name": "type",
									"type": "SourceType"
								}
							],
							"returns": [
								{
									"description": "A new Source that can play the specified audio.",
									"name": "source",
									"type": "Source"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The SoundData to create a Source from.",
									"name": "data",
									"type": "SoundData"
								}
							],
							"returns": [
								{
									"description": "A new Source that can play the specified audio. The SourceType of the returned audio is 'static'.",
									"name": "source",
									"type": "Source"
								}
							]
						}
					]
				},
				{
					"description": "Pauses specific or all currently played Sources.",
					"name": "pause",
					"variants": [
						{
							"description": "Pauses all currently active Sources and returns them.",
							"returns": [
								{
									"arraytype": "Source",
									"description": "A table containing a list of Sources that were paused by this call.",
									"name": "Sources",
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first Source to pause.",
									"name": "source",
									"type": "Source"
								},
								{
									"description": "Additional Sources to pause.",
									"name": "...",
									"type": "Source"
								}
							],
							"description": "Pauses the given Sources."
						},
						{
							"arguments": [
								{
									"arraytype": "Source",
									"description": "A table containing a list of Sources to pause.",
									"name": "sources",
									"type": "table"
								}
							],
							"description": "Pauses the given Sources."
						}
					]
				},
				{
					"description": "Plays the specified Source.",
					"name": "play",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Source to play.",
									"name": "source",
									"type": "Source"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "Source",
									"description": "Table containing a list of Sources to play.",
									"name": "sources",
									"type": "table"
								}
							],
							"description": "Starts playing multiple Sources simultaneously."
						},
						{
							"arguments": [
								{
									"description": "The first Source to play.",
									"name": "source1",
									"type": "Source"
								},
								{
									"description": "The second Source to play.",
									"name": "source2",
									"type": "Source"
								},
								{
									"description": "Additional Sources to play.",
									"name": "...",
									"type": "Source"
								}
							],
							"description": "Starts playing multiple Sources simultaneously."
						}
					]
				},
				{
					"description": "Sets the distance attenuation model.",
					"name": "setDistanceModel",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new distance model.",
									"name": "model",
									"type": "DistanceModel"
								}
							]
						}
					]
				},
				{
					"description": "Sets a global scale factor for velocity-based doppler effects. The default scale value is 1.",
					"name": "setDopplerScale",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new doppler scale factor. The scale must be greater than 0.",
									"name": "scale",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Defines an effect that can be applied to a Source.\n\nNot all system supports audio effects. Use love.audio.isEffectsSupported to check.",
					"name": "setEffect",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the effect.",
									"name": "name",
									"type": "string"
								},
								{
									"description": "The settings to use for this effect, with the following fields:",
									"name": "settings",
									"table": [
										{
											"description": "The type of effect to use.",
											"name": "type",
											"type": "EffectType"
										},
										{
											"description": "The volume of the effect.",
											"name": "volume",
											"type": "number"
										},
										{
											"description": "Effect-specific settings. See EffectType for available effects and their corresponding settings.",
											"name": "...",
											"type": "number"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "Whether the effect was successfully created.",
									"name": "success",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The name of the effect.",
									"name": "name",
									"type": "string"
								},
								{
									"default": "true",
									"description": "If false and the given effect name was previously set, disables the effect.",
									"name": "enabled",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "Whether the effect was successfully disabled.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets whether the system should mix the audio with the system's audio.",
					"name": "setMixWithSystem",
					"variants": [
						{
							"arguments": [
								{
									"description": "True to enable mixing, false to disable it.",
									"name": "mix",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "True if the change succeeded, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the orientation of the listener.",
					"name": "setOrientation",
					"variants": [
						{
							"arguments": [
								{
									"description": "Forward vector of the listener orientation.",
									"name": "fx, fy, fz",
									"type": "number"
								},
								{
									"description": "Up vector of the listener orientation.",
									"name": "ux, uy, uz",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the position of the listener, which determines how sounds play.",
					"name": "setPosition",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x position of the listener.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the listener.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The z position of the listener.",
									"name": "z",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the velocity of the listener.",
					"name": "setVelocity",
					"variants": [
						{
							"arguments": [
								{
									"description": "The X velocity of the listener.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The Y velocity of the listener.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The Z velocity of the listener.",
									"name": "z",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the master volume.",
					"name": "setVolume",
					"variants": [
						{
							"arguments": [
								{
									"description": "1.0 is max and 0.0 is off.",
									"name": "volume",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Stops currently played sources.",
					"name": "stop",
					"variants": [
						{
							"description": "This function will stop all currently active sources."
						},
						{
							"arguments": [
								{
									"description": "The source on which to stop the playback.",
									"name": "source",
									"type": "Source"
								}
							],
							"description": "This function will only stop the specified source."
						},
						{
							"arguments": [
								{
									"description": "The first Source to stop.",
									"name": "source1",
									"type": "Source"
								},
								{
									"description": "The second Source to stop.",
									"name": "source2",
									"type": "Source"
								},
								{
									"description": "Additional Sources to stop.",
									"name": "...",
									"type": "Source"
								}
							],
							"description": "Simultaneously stops all given Sources."
						},
						{
							"arguments": [
								{
									"arraytype": "Source",
									"description": "A table containing a list of Sources to stop.",
									"name": "sources",
									"type": "table"
								}
							],
							"description": "Simultaneously stops all given Sources."
						}
					]
				}
			],
			"name": "audio",
			"types": [
				{
					"description": "Represents an audio input device capable of recording sounds.",
					"functions": [
						{
							"description": "Gets the number of bits per sample in the data currently being recorded.",
							"name": "getBitDepth",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of bits per sample in the data that's currently being recorded.",
											"name": "bits",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of channels currently being recorded (mono or stereo).",
							"name": "getChannelCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of channels being recorded (1 for mono, 2 for stereo).",
											"name": "channels",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets all recorded audio SoundData stored in the device's internal ring buffer.\n\nThe internal ring buffer is cleared when this function is called, so calling it again will only get audio recorded after the previous call. If the device's internal ring buffer completely fills up before getData is called, the oldest data that doesn't fit into the buffer will be lost.",
							"name": "getData",
							"variants": [
								{
									"returns": [
										{
											"description": "The recorded audio data, or nil if the device isn't recording.",
											"name": "data",
											"type": "SoundData"
										}
									]
								}
							]
						},
						{
							"description": "Gets the name of the recording device.",
							"name": "getName",
							"variants": [
								{
									"returns": [
										{
											"description": "The name of the device.",
											"name": "name",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of currently recorded samples.",
							"name": "getSampleCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of samples that have been recorded so far.",
											"name": "samples",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of samples per second currently being recorded.",
							"name": "getSampleRate",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of samples being recorded per second (sample rate).",
											"name": "rate",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the device is currently recording.",
							"name": "isRecording",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the recording, false otherwise.",
											"name": "recording",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Begins recording audio using this device.",
							"name": "start",
							"variants": [
								{
									"arguments": [
										{
											"description": "The maximum number of samples to store in an internal ring buffer when recording. RecordingDevice:getData clears the internal buffer when called.",
											"name": "samplecount",
											"type": "number"
										},
										{
											"default": "8000",
											"description": "The number of samples per second to store when recording.",
											"name": "samplerate",
											"type": "number"
										},
										{
											"default": "16",
											"description": "The number of bits per sample.",
											"name": "bitdepth",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Whether to record in mono or stereo. Most microphones don't support more than 1 channel.",
											"name": "channels",
											"type": "number"
										}
									],
									"description": "A ring buffer is used internally to store recorded data before RecordingDevice:getData or RecordingDevice:stop are called – the former clears the buffer. If the buffer completely fills up before getData or stop are called, the oldest data that doesn't fit into the buffer will be lost.",
									"returns": [
										{
											"description": "True if the device successfully began recording using the specified parameters, false if not.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Stops recording audio from this device. Any sound data currently in the device's buffer will be returned.",
							"name": "stop",
							"variants": [
								{
									"returns": [
										{
											"description": "The sound data currently in the device's buffer, or nil if the device wasn't recording.",
											"name": "data",
											"type": "SoundData"
										}
									]
								}
							]
						}
					],
					"name": "RecordingDevice",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newQueueableSource",
						"newSource"
					],
					"description": "A Source represents audio you can play back.\n\nYou can do interesting things with Sources, like set the volume, pitch, and its position relative to the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources.\n\nThe Source controls (play/pause/stop) act according to the following state table.",
					"functions": [
						{
							"description": "Creates an identical copy of the Source in the stopped state.\n\nStatic Sources will use significantly less memory and take much less time to be created if Source:clone is used to create them instead of love.audio.newSource, so this method should be preferred when making multiple Sources which play the same sound.",
							"name": "clone",
							"variants": [
								{
									"description": "Cloned Sources inherit all the set-able state of the original Source, but they are initialized stopped.",
									"returns": [
										{
											"description": "The new identical copy of this Source.",
											"name": "source",
											"type": "Source"
										}
									]
								}
							]
						},
						{
							"description": "Gets a list of the Source's active effect names.",
							"name": "getActiveEffects",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "string",
											"description": "A list of the source's active effect names.",
											"name": "effects",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the amount of air absorption applied to the Source.\n\nBy default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.",
							"name": "getAirAbsorption",
							"variants": [
								{
									"description": "Audio air absorption functionality is not supported on iOS.",
									"returns": [
										{
											"description": "The amount of air absorption applied to the Source.",
											"name": "amount",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the reference and maximum attenuation distances of the Source. The values, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance from the listener.",
							"name": "getAttenuationDistances",
							"variants": [
								{
									"returns": [
										{
											"description": "The current reference attenuation distance. If the current DistanceModel is clamped, this is the minimum distance before the Source is no longer attenuated.",
											"name": "ref",
											"type": "number"
										},
										{
											"description": "The current maximum attenuation distance.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of channels in the Source. Only 1-channel (mono) Sources can use directional and positional effects.",
							"name": "getChannelCount",
							"variants": [
								{
									"returns": [
										{
											"description": "1 for mono, 2 for stereo.",
											"name": "channels",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.",
							"name": "getCone",
							"variants": [
								{
									"returns": [
										{
											"description": "The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.",
											"name": "innerAngle",
											"type": "number"
										},
										{
											"description": "The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.",
											"name": "outerAngle",
											"type": "number"
										},
										{
											"description": "The Source's volume when the listener is outside both the inner and outer cone angles.",
											"name": "outerVolume",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the direction of the Source.",
							"name": "getDirection",
							"variants": [
								{
									"returns": [
										{
											"description": "The X part of the direction vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The Y part of the direction vector.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The Z part of the direction vector.",
											"name": "z",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the duration of the Source. For streaming Sources it may not always be sample-accurate, and may return -1 if the duration cannot be determined at all.",
							"name": "getDuration",
							"variants": [
								{
									"arguments": [
										{
											"default": "'seconds'",
											"description": "The time unit for the return value.",
											"name": "unit",
											"type": "TimeUnit"
										}
									],
									"returns": [
										{
											"description": "The duration of the Source, or -1 if it cannot be determined.",
											"name": "duration",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the filter settings associated to a specific effect.\n\nThis function returns nil if the effect was applied with no filter settings associated to it.",
							"name": "getEffect",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the effect.",
											"name": "name",
											"type": "string"
										},
										{
											"default": "{}",
											"description": "An optional empty table that will be filled with the filter settings.",
											"name": "filtersettings",
											"type": "table"
										}
									],
									"returns": [
										{
											"description": "The settings for the filter associated to this effect, or nil if the effect is not present in this Source or has no filter associated. The table has the following fields:",
											"name": "filtersettings",
											"table": [
												{
													"description": "The overall volume of the audio.",
													"name": "volume",
													"type": "number"
												},
												{
													"description": "Volume of high-frequency audio. Only applies to low-pass and band-pass filters.",
													"name": "highgain",
													"type": "number"
												},
												{
													"description": "Volume of low-frequency audio. Only applies to high-pass and band-pass filters.",
													"name": "lowgain",
													"type": "number"
												}
											],
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the filter settings currently applied to the Source.",
							"name": "getFilter",
							"variants": [
								{
									"returns": [
										{
											"description": "The filter settings to use for this Source, or nil if the Source has no active filter. The table has the following fields:",
											"name": "settings",
											"table": [
												{
													"description": "The type of filter to use.",
													"name": "type",
													"type": "FilterType"
												},
												{
													"description": "The overall volume of the audio.",
													"name": "volume",
													"type": "number"
												},
												{
													"description": "Volume of high-frequency audio. Only applies to low-pass and band-pass filters.",
													"name": "highgain",
													"type": "number"
												},
												{
													"description": "Volume of low-frequency audio. Only applies to high-pass and band-pass filters.",
													"name": "lowgain",
													"type": "number"
												}
											],
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of free buffer slots in a queueable Source. If the queueable Source is playing, this value will increase up to the amount the Source was created with. If the queueable Source is stopped, it will process all of its internal buffers first, in which case this function will always return the amount it was created with.",
							"name": "getFreeBufferCount",
							"variants": [
								{
									"returns": [
										{
											"description": "How many more SoundData objects can be queued up.",
											"name": "buffers",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current pitch of the Source.",
							"name": "getPitch",
							"variants": [
								{
									"returns": [
										{
											"description": "The pitch, where 1.0 is normal.",
											"name": "pitch",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the position of the Source.",
							"name": "getPosition",
							"variants": [
								{
									"returns": [
										{
											"description": "The X position of the Source.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The Y position of the Source.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The Z position of the Source.",
											"name": "z",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the rolloff factor of the source.",
							"name": "getRolloff",
							"variants": [
								{
									"returns": [
										{
											"description": "The rolloff factor.",
											"name": "rolloff",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the type of the Source.",
							"name": "getType",
							"variants": [
								{
									"returns": [
										{
											"description": "The type of the source.",
											"name": "sourcetype",
											"type": "SourceType"
										}
									]
								}
							]
						},
						{
							"description": "Gets the velocity of the Source.",
							"name": "getVelocity",
							"variants": [
								{
									"returns": [
										{
											"description": "The X part of the velocity vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The Y part of the velocity vector.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The Z part of the velocity vector.",
											"name": "z",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current volume of the Source.",
							"name": "getVolume",
							"variants": [
								{
									"returns": [
										{
											"description": "The volume of the Source, where 1.0 is normal volume.",
											"name": "volume",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the volume limits of the source.",
							"name": "getVolumeLimits",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum volume.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum volume.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the Source will loop.",
							"name": "isLooping",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the Source will loop, false otherwise.",
											"name": "loop",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the Source is playing.",
							"name": "isPlaying",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the Source is playing, false otherwise.",
											"name": "playing",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Source's position, velocity, direction, and cone angles are relative to the listener.",
							"name": "isRelative",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the position, velocity, direction and cone angles are relative to the listener, false if they're absolute.",
											"name": "relative",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Pauses the Source.",
							"name": "pause",
							"variants": [
								[]
							]
						},
						{
							"description": "Starts playing the Source.",
							"name": "play",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Source was able to successfully start playing.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Queues SoundData for playback in a queueable Source.\n\nThis method requires the Source to be created via love.audio.newQueueableSource.",
							"name": "queue",
							"variants": [
								{
									"arguments": [
										{
											"description": "The data to queue. The SoundData's sample rate, bit depth, and channel count must match the Source's.",
											"name": "sounddata",
											"type": "SoundData"
										}
									],
									"returns": [
										{
											"description": "True if the data was successfully queued for playback, false if there were no available buffers to use for queueing.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the currently playing position of the Source.",
							"name": "seek",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position to seek to.",
											"name": "offset",
											"type": "number"
										},
										{
											"default": "'seconds'",
											"description": "The unit of the position value.",
											"name": "unit",
											"type": "TimeUnit"
										}
									]
								}
							]
						},
						{
							"description": "Sets the amount of air absorption applied to the Source.\n\nBy default the value is set to 0 which means that air absorption effects are disabled. A value of 1 will apply high frequency attenuation to the Source at a rate of 0.05 dB per meter.\n\nAir absorption can simulate sound transmission through foggy air, dry air, smoky atmosphere, etc. It can be used to simulate different atmospheric conditions within different locations in an area.",
							"name": "setAirAbsorption",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of air absorption applied to the Source. Must be between 0 and 10.",
											"name": "amount",
											"type": "number"
										}
									],
									"description": "Audio air absorption functionality is not supported on iOS."
								}
							]
						},
						{
							"description": "Sets the reference and maximum attenuation distances of the Source. The parameters, combined with the current DistanceModel, affect how the Source's volume attenuates based on distance.\n\nDistance attenuation is only applicable to Sources based on mono (rather than stereo) audio.",
							"name": "setAttenuationDistances",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new reference attenuation distance. If the current DistanceModel is clamped, this is the minimum attenuation distance.",
											"name": "ref",
											"type": "number"
										},
										{
											"description": "The new maximum attenuation distance.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the Source's directional volume cones. Together with Source:setDirection, the cone angles allow for the Source's volume to vary depending on its direction.",
							"name": "setCone",
							"variants": [
								{
									"arguments": [
										{
											"description": "The inner angle from the Source's direction, in radians. The Source will play at normal volume if the listener is inside the cone defined by this angle.",
											"name": "innerAngle",
											"type": "number"
										},
										{
											"description": "The outer angle from the Source's direction, in radians. The Source will play at a volume between the normal and outer volumes, if the listener is in between the cones defined by the inner and outer angles.",
											"name": "outerAngle",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The Source's volume when the listener is outside both the inner and outer cone angles.",
											"name": "outerVolume",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the direction vector of the Source. A zero vector makes the source non-directional.",
							"name": "setDirection",
							"variants": [
								{
									"arguments": [
										{
											"description": "The X part of the direction vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The Y part of the direction vector.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The Z part of the direction vector.",
											"name": "z",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Applies an audio effect to the Source.\n\nThe effect must have been previously defined using love.audio.setEffect.",
							"name": "setEffect",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the effect previously set up with love.audio.setEffect.",
											"name": "name",
											"type": "string"
										},
										{
											"default": "true",
											"description": "If false and the given effect name was previously enabled on this Source, disables the effect.",
											"name": "enable",
											"type": "boolean"
										}
									],
									"description": "Applies the given previously defined effect to this Source.",
									"returns": [
										{
											"description": "Whether the effect was successfully applied to this Source.",
											"name": "success",
											"type": "boolean"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The name of the effect previously set up with love.audio.setEffect.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "The filter settings to apply prior to the effect, with the following fields:",
											"name": "filtersettings",
											"table": [
												{
													"description": "The type of filter to use.",
													"name": "type",
													"type": "FilterType"
												},
												{
													"description": "The overall volume of the audio. Must be between 0 and 1.",
													"name": "volume",
													"type": "number"
												},
												{
													"description": "Volume of high-frequency audio. Only applies to low-pass and band-pass filters. Must be between 0 and 1.",
													"name": "highgain",
													"type": "number"
												},
												{
													"description": "Volume of low-frequency audio. Only applies to high-pass and band-pass filters. Must be between 0 and 1.",
													"name": "lowgain",
													"type": "number"
												}
											],
											"type": "table"
										}
									],
									"description": "Applies the given previously defined effect to this Source, and applies a filter to the Source which affects the sound fed into the effect.\n\nAudio effect functionality is not supported on iOS.",
									"returns": [
										{
											"description": "Whether the effect and filter were successfully applied to this Source.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets a low-pass, high-pass, or band-pass filter to apply when playing the Source.",
							"name": "setFilter",
							"variants": [
								{
									"arguments": [
										{
											"description": "The filter settings to use for this Source, with the following fields:",
											"name": "settings",
											"table": [
												{
													"description": "The type of filter to use.",
													"name": "type",
													"type": "FilterType"
												},
												{
													"description": "The overall volume of the audio. Must be between 0 and 1.",
													"name": "volume",
													"type": "number"
												},
												{
													"description": "Volume of high-frequency audio. Only applies to low-pass and band-pass filters. Must be between 0 and 1.",
													"name": "highgain",
													"type": "number"
												},
												{
													"description": "Volume of low-frequency audio. Only applies to high-pass and band-pass filters. Must be between 0 and 1.",
													"name": "lowgain",
													"type": "number"
												}
											],
											"type": "table"
										}
									],
									"returns": [
										{
											"description": "Whether the filter was successfully applied to the Source.",
											"name": "success",
											"type": "boolean"
										}
									]
								},
								{
									"description": "Disables filtering on this Source.\n\n"
								}
							]
						},
						{
							"description": "Sets whether the Source should loop.",
							"name": "setLooping",
							"variants": [
								{
									"arguments": [
										{
											"description": "True if the source should loop, false otherwise.",
											"name": "loop",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the pitch of the Source.",
							"name": "setPitch",
							"variants": [
								{
									"arguments": [
										{
											"description": "Calculated with regard to 1 being the base pitch. Each reduction by 50 percent equals a pitch shift of -12 semitones (one octave reduction). Each doubling equals a pitch shift of 12 semitones (one octave increase). Zero is not a legal value.",
											"name": "pitch",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the position of the Source. Please note that this only works for mono (i.e. non-stereo) sound files!",
							"name": "setPosition",
							"variants": [
								{
									"arguments": [
										{
											"description": "The X position of the Source.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The Y position of the Source.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The Z position of the Source.",
											"name": "z",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets whether the Source's position, velocity, direction, and cone angles are relative to the listener, or absolute.\n\nBy default, all sources are absolute and therefore relative to the origin of love's coordinate system 0, 0. Only absolute sources are affected by the position of the listener. Please note that positional audio only works for mono (i.e. non-stereo) sources. ",
							"name": "setRelative",
							"variants": [
								{
									"arguments": [
										{
											"default": "false",
											"description": "True to make the position, velocity, direction and cone angles relative to the listener, false to make them absolute.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the rolloff factor which affects the strength of the used distance attenuation.\n\nExtended information and detailed formulas can be found in the chapter '3.4. Attenuation By Distance' of OpenAL 1.1 specification.",
							"name": "setRolloff",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new rolloff factor.",
											"name": "rolloff",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the velocity of the Source.\n\nThis does '''not''' change the position of the Source, but lets the application know how it has to calculate the doppler effect.",
							"name": "setVelocity",
							"variants": [
								{
									"arguments": [
										{
											"description": "The X part of the velocity vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The Y part of the velocity vector.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The Z part of the velocity vector.",
											"name": "z",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the current volume of the Source.",
							"name": "setVolume",
							"variants": [
								{
									"arguments": [
										{
											"description": "The volume for a Source, where 1.0 is normal volume. Volume cannot be raised above 1.0.",
											"name": "volume",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the volume limits of the source. The limits have to be numbers from 0 to 1.",
							"name": "setVolumeLimits",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum volume.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum volume.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Stops a Source.",
							"name": "stop",
							"variants": [
								[]
							]
						},
						{
							"description": "Gets the currently playing position of the Source.",
							"name": "tell",
							"variants": [
								{
									"arguments": [
										{
											"default": "'seconds'",
											"description": "The type of unit for the return value.",
											"name": "unit",
											"type": "TimeUnit"
										}
									],
									"returns": [
										{
											"description": "The currently playing position of the Source.",
											"name": "position",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Source",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides functionality for creating and transforming data.",
			"enums": [
				{
					"constants": [
						{
							"description": "The LZ4 compression format. Compresses and decompresses very quickly, but the compression ratio is not the best. LZ4-HC is used when compression level 9 is specified. Some benchmarks are available here.",
							"name": "lz4"
						},
						{
							"description": "The zlib format is DEFLATE-compressed data with a small bit of header data. Compresses relatively slowly and decompresses moderately quickly, and has a decent compression ratio.",
							"name": "zlib"
						},
						{
							"description": "The gzip format is DEFLATE-compressed data with a slightly larger header than zlib. Since it uses DEFLATE it has the same compression characteristics as the zlib format.",
							"name": "gzip"
						},
						{
							"description": "Raw DEFLATE-compressed data (no header).",
							"name": "deflate"
						}
					],
					"description": "Compressed data formats.",
					"name": "CompressedDataFormat"
				},
				{
					"constants": [
						{
							"description": "Return type is ByteData.",
							"name": "data"
						},
						{
							"description": "Return type is string.",
							"name": "string"
						}
					],
					"description": "Return type of various data-returning functions.",
					"name": "ContainerType"
				},
				{
					"constants": [
						{
							"description": "Encode/decode data as base64 binary-to-text encoding.",
							"name": "base64"
						},
						{
							"description": "Encode/decode data as hexadecimal string.",
							"name": "hex"
						}
					],
					"description": "Encoding format used to encode or decode data.",
					"name": "EncodeFormat"
				},
				{
					"constants": [
						{
							"description": "MD5 hash algorithm (16 bytes).",
							"name": "md5"
						},
						{
							"description": "SHA1 hash algorithm (20 bytes).",
							"name": "sha1"
						},
						{
							"description": "SHA2 hash algorithm with message digest size of 224 bits (28 bytes).",
							"name": "sha224"
						},
						{
							"description": "SHA2 hash algorithm with message digest size of 256 bits (32 bytes).",
							"name": "sha256"
						},
						{
							"description": "SHA2 hash algorithm with message digest size of 384 bits (48 bytes).",
							"name": "sha384"
						},
						{
							"description": "SHA2 hash algorithm with message digest size of 512 bits (64 bytes).",
							"name": "sha512"
						}
					],
					"description": "Hash algorithm of love.data.hash.",
					"name": "HashFunction"
				}
			],
			"functions": [
				{
					"description": "Compresses a string or data using a specific compression algorithm.",
					"name": "compress",
					"variants": [
						{
							"arguments": [
								{
									"description": "What type to return the compressed data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format to use when compressing the string.",
									"name": "format",
									"type": "CompressedDataFormat"
								},
								{
									"description": "The raw (un-compressed) string to compress.",
									"name": "rawstring",
									"type": "string"
								},
								{
									"default": "-1",
									"description": "The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.",
									"name": "level",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "CompressedData/string which contains the compressed version of rawstring.",
									"name": "compressedData",
									"type": "CompressedData or string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "What type to return the compressed data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format to use when compressing the data.",
									"name": "format",
									"type": "CompressedDataFormat"
								},
								{
									"description": "A Data object containing the raw (un-compressed) data to compress.",
									"name": "data",
									"type": "Data"
								},
								{
									"default": "-1",
									"description": "The level of compression to use, between 0 and 9. -1 indicates the default level. The meaning of this argument depends on the compression format being used.",
									"name": "level",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "CompressedData/string which contains the compressed version of data.",
									"name": "compressedData",
									"type": "CompressedData or string"
								}
							]
						}
					]
				},
				{
					"description": "Decode Data or a string from any of the EncodeFormats to Data or string.",
					"name": "decode",
					"variants": [
						{
							"arguments": [
								{
									"description": "What type to return the decoded data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format of the input data.",
									"name": "format",
									"type": "EncodeFormat"
								},
								{
									"description": "The raw (encoded) data to decode.",
									"name": "sourceString",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "ByteData/string which contains the decoded version of source.",
									"name": "decoded",
									"type": "ByteData or string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "What type to return the decoded data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format of the input data.",
									"name": "format",
									"type": "EncodeFormat"
								},
								{
									"description": "The raw (encoded) data to decode.",
									"name": "sourceData",
									"type": "Data"
								}
							],
							"returns": [
								{
									"description": "ByteData/string which contains the decoded version of source.",
									"name": "decoded",
									"type": "ByteData or string"
								}
							]
						}
					]
				},
				{
					"description": "Decompresses a CompressedData or previously compressed string or Data object.",
					"name": "decompress",
					"variants": [
						{
							"arguments": [
								{
									"description": "What type to return the decompressed data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The compressed data to decompress.",
									"name": "compressedData",
									"type": "CompressedData"
								}
							],
							"returns": [
								{
									"description": "Data/string containing the raw decompressed data.",
									"name": "decompressedData",
									"type": "Data or string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "What type to return the decompressed data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format that was used to compress the given string.",
									"name": "format",
									"type": "CompressedDataFormat"
								},
								{
									"description": "A string containing data previously compressed with love.data.compress.",
									"name": "compressedString",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "Data/string containing the raw decompressed data.",
									"name": "decompressedData",
									"type": "Data or string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "What type to return the decompressed data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format that was used to compress the given data.",
									"name": "format",
									"type": "CompressedDataFormat"
								},
								{
									"description": "A Data object containing data previously compressed with love.data.compress.",
									"name": "data",
									"type": "Data"
								}
							],
							"returns": [
								{
									"description": "Data/string containing the raw decompressed data.",
									"name": "decompressedData",
									"type": "Data or string"
								}
							]
						}
					]
				},
				{
					"description": "Encode Data or a string to a Data or string in one of the EncodeFormats.",
					"name": "encode",
					"variants": [
						{
							"arguments": [
								{
									"description": "What type to return the encoded data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format of the output data.",
									"name": "format",
									"type": "EncodeFormat"
								},
								{
									"description": "The raw data to encode.",
									"name": "sourceString",
									"type": "string"
								},
								{
									"default": "0",
									"description": "The maximum line length of the output. Only supported for base64, ignored if 0.",
									"name": "linelength",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "ByteData/string which contains the encoded version of source.",
									"name": "encoded",
									"type": "ByteData or string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "What type to return the encoded data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The format of the output data.",
									"name": "format",
									"type": "EncodeFormat"
								},
								{
									"description": "The raw data to encode.",
									"name": "sourceData",
									"type": "Data"
								},
								{
									"default": "0",
									"description": "The maximum line length of the output. Only supported for base64, ignored if 0.",
									"name": "linelength",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "ByteData/string which contains the encoded version of source.",
									"name": "encoded",
									"type": "ByteData or string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the size in bytes that a given format used with love.data.pack will use.\n\nThis function behaves the same as Lua 5.3's string.packsize.",
					"name": "getPackedSize",
					"variants": [
						{
							"arguments": [
								{
									"description": "A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.",
									"name": "format",
									"type": "string"
								}
							],
							"description": "The format string cannot have the variable-length options 's' or 'z'.",
							"returns": [
								{
									"description": "The size in bytes that the packed data will use.",
									"name": "size",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Compute the message digest of a string using a specified hash algorithm.",
					"name": "hash",
					"variants": [
						{
							"arguments": [
								{
									"description": "Hash algorithm to use.",
									"name": "hashFunction",
									"type": "HashFunction"
								},
								{
									"description": "String to hash.",
									"name": "string",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "Raw message digest string.",
									"name": "rawdigest",
									"type": "string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Hash algorithm to use.",
									"name": "hashFunction",
									"type": "HashFunction"
								},
								{
									"description": "Data to hash.",
									"name": "data",
									"type": "Data"
								}
							],
							"description": "To return the hex string representation of the hash, use love.data.encode\n\nhexDigestString = love.data.encode('string', 'hex', love.data.hash(algo, data))",
							"returns": [
								{
									"description": "Raw message digest string.",
									"name": "rawdigest",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Data object containing arbitrary bytes.\n\nData:getPointer along with LuaJIT's FFI can be used to manipulate the contents of the ByteData object after it has been created.",
					"name": "newByteData",
					"variants": [
						{
							"arguments": [
								{
									"description": "The byte string to copy.",
									"name": "datastring",
									"type": "string"
								}
							],
							"description": "Creates a new ByteData by copying the contents of the specified string.",
							"returns": [
								{
									"description": "The new Data object.",
									"name": "bytedata",
									"type": "ByteData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The existing Data object to copy.",
									"name": "Data",
									"type": "Data"
								},
								{
									"default": "0",
									"description": "The offset of the subsection to copy, in bytes.",
									"name": "offset",
									"type": "number"
								},
								{
									"default": "data:getSize()",
									"description": "The size in bytes of the new Data object.",
									"name": "size",
									"type": "number"
								}
							],
							"description": "Creates a new ByteData by copying from an existing Data object.",
							"returns": [
								{
									"description": "The new Data object.",
									"name": "bytedata",
									"type": "ByteData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The size in bytes of the new Data object.",
									"name": "size",
									"type": "number"
								}
							],
							"description": "Creates a new empty ByteData with the specific size.",
							"returns": [
								{
									"description": "The new Data object.",
									"name": "bytedata",
									"type": "ByteData"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Data referencing a subsection of an existing Data object.",
					"name": "newDataView",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Data object to reference.",
									"name": "data",
									"type": "Data"
								},
								{
									"description": "The offset of the subsection to reference, in bytes.",
									"name": "offset",
									"type": "number"
								},
								{
									"description": "The size in bytes of the subsection to reference.",
									"name": "size",
									"type": "number"
								}
							],
							"description": "Data:getString and Data:getPointer will return the original Data object's contents, with the view's offset and size applied.",
							"returns": [
								{
									"description": "The new Data view.",
									"name": "view",
									"type": "Data"
								}
							]
						}
					]
				},
				{
					"description": "Packs (serializes) simple Lua values.\n\nThis function behaves the same as Lua 5.3's string.pack.",
					"name": "pack",
					"variants": [
						{
							"arguments": [
								{
									"description": "What type to return the encoded data as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "A string determining how the values are packed. Follows the rules of Lua 5.3's string.pack format strings.",
									"name": "format",
									"type": "string"
								},
								{
									"description": "The first value (number, boolean, or string) to serialize.",
									"name": "v1",
									"type": "number or boolean or string"
								},
								{
									"description": "Additional values to serialize.",
									"name": "...",
									"type": "number or boolean or string"
								}
							],
							"description": "Packing integers with values greater than 2^52 is not supported, as Lua 5.1 cannot represent those values in its number type. ",
							"returns": [
								{
									"description": "Data/string which contains the serialized data.",
									"name": "data",
									"type": "Data or string"
								}
							]
						}
					]
				},
				{
					"description": "Unpacks (deserializes) a byte-string or Data into simple Lua values.\n\nThis function behaves the same as Lua 5.3's string.unpack.",
					"name": "unpack",
					"variants": [
						{
							"arguments": [
								{
									"description": "A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.",
									"name": "format",
									"type": "string"
								},
								{
									"description": "A string containing the packed (serialized) data.",
									"name": "datastring",
									"type": "string"
								},
								{
									"default": "1",
									"description": "Where to start reading in the string. Negative values can be used to read relative from the end of the string.",
									"name": "pos",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The first value (number, boolean, or string) that was unpacked.",
									"name": "v1",
									"type": "number or boolean or string"
								},
								{
									"description": "Additional unpacked values.",
									"name": "...",
									"type": "number or boolean or string"
								},
								{
									"description": "The index of the first unread byte in the data string.",
									"name": "index",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A string determining how the values were packed. Follows the rules of Lua 5.3's string.pack format strings.",
									"name": "format",
									"type": "string"
								},
								{
									"description": "A Data object containing the packed (serialized) data.",
									"name": "data",
									"type": "Data"
								},
								{
									"default": "1",
									"description": "1-based index indicating where to start reading in the Data. Negative values can be used to read relative from the end of the Data object.",
									"name": "pos",
									"type": "number"
								}
							],
							"description": "Unpacking integers with values greater than 2^52 is not supported, as Lua 5.1 cannot represent those values in its number type. ",
							"returns": [
								{
									"description": "The first value (number, boolean, or string) that was unpacked.",
									"name": "v1",
									"type": "number or boolean or string"
								},
								{
									"description": "Additional unpacked values.",
									"name": "...",
									"type": "number or boolean or string"
								},
								{
									"description": "The 1-based index of the first unread byte in the Data.",
									"name": "index",
									"type": "number"
								}
							]
						}
					]
				}
			],
			"name": "data",
			"types": [
				{
					"constructors": [
						"newByteData"
					],
					"description": "Data object containing arbitrary bytes in an contiguous memory.\n\nThere are currently no LÖVE functions provided for manipulating the contents of a ByteData, but Data:getPointer can be used with LuaJIT's FFI to access and write to the contents directly.",
					"functions": [],
					"name": "ByteData",
					"supertypes": [
						"Object",
						"Data"
					]
				},
				{
					"constructors": [
						"compress"
					],
					"description": "Represents byte data compressed using a specific algorithm.\n\nlove.data.decompress can be used to de-compress the data (or love.math.decompress in 0.10.2 or earlier).",
					"functions": [
						{
							"description": "Gets the compression format of the CompressedData.",
							"name": "getFormat",
							"variants": [
								{
									"returns": [
										{
											"description": "The format of the CompressedData.",
											"name": "format",
											"type": "CompressedDataFormat"
										}
									]
								}
							]
						}
					],
					"name": "CompressedData",
					"supertypes": [
						"Data",
						"Object"
					]
				}
			]
		},
		{
			"description": "Manages events, like keypresses.",
			"enums": [
				{
					"constants": [
						{
							"description": "Window focus gained or lost",
							"name": "focus"
						},
						{
							"description": "Joystick pressed",
							"name": "joystickpressed"
						},
						{
							"description": "Joystick released",
							"name": "joystickreleased"
						},
						{
							"description": "Key pressed",
							"name": "keypressed"
						},
						{
							"description": "Key released",
							"name": "keyreleased"
						},
						{
							"description": "Mouse pressed",
							"name": "mousepressed"
						},
						{
							"description": "Mouse released",
							"name": "mousereleased"
						},
						{
							"description": "Quit",
							"name": "quit"
						},
						{
							"description": "Window size changed by the user",
							"name": "resize"
						},
						{
							"description": "Window is minimized or un-minimized by the user",
							"name": "visible"
						},
						{
							"description": "Window mouse focus gained or lost",
							"name": "mousefocus"
						},
						{
							"description": "A Lua error has occurred in a thread",
							"name": "threaderror"
						},
						{
							"description": "Joystick connected",
							"name": "joystickadded"
						},
						{
							"description": "Joystick disconnected",
							"name": "joystickremoved"
						},
						{
							"description": "Joystick axis motion",
							"name": "joystickaxis"
						},
						{
							"description": "Joystick hat pressed",
							"name": "joystickhat"
						},
						{
							"description": "Joystick's virtual gamepad button pressed",
							"name": "gamepadpressed"
						},
						{
							"description": "Joystick's virtual gamepad button released",
							"name": "gamepadreleased"
						},
						{
							"description": "Joystick's virtual gamepad axis moved",
							"name": "gamepadaxis"
						},
						{
							"description": "User entered text",
							"name": "textinput"
						},
						{
							"description": "Mouse position changed",
							"name": "mousemoved"
						},
						{
							"description": "Running out of memory on mobile devices system",
							"name": "lowmemory"
						},
						{
							"description": "Candidate text for an IME changed",
							"name": "textedited"
						},
						{
							"description": "Mouse wheel moved",
							"name": "wheelmoved"
						},
						{
							"description": "Touch screen touched",
							"name": "touchpressed"
						},
						{
							"description": "Touch screen stop touching",
							"name": "touchreleased"
						},
						{
							"description": "Touch press moved inside touch screen",
							"name": "touchmoved"
						},
						{
							"description": "Directory is dragged and dropped onto the window",
							"name": "directorydropped"
						},
						{
							"description": "File is dragged and dropped onto the window.",
							"name": "filedropped"
						},
						{
							"description": "Joystick pressed",
							"name": "jp"
						},
						{
							"description": "Joystick released",
							"name": "jr"
						},
						{
							"description": "Key pressed",
							"name": "kp"
						},
						{
							"description": "Key released",
							"name": "kr"
						},
						{
							"description": "Mouse pressed",
							"name": "mp"
						},
						{
							"description": "Mouse released",
							"name": "mr"
						},
						{
							"description": "Quit",
							"name": "q"
						},
						{
							"description": "Window focus gained or lost",
							"name": "f"
						}
					],
					"description": "Arguments to love.event.push() and the like.\n\nSince 0.8.0, event names are no longer abbreviated.",
					"name": "Event"
				}
			],
			"functions": [
				{
					"description": "Clears the event queue.",
					"name": "clear",
					"variants": [
						[]
					]
				},
				{
					"description": "Returns an iterator for messages in the event queue.",
					"name": "poll",
					"variants": [
						{
							"returns": [
								{
									"description": "Iterator function usable in a for loop.",
									"name": "i",
									"signature": {
										"returns": [
											{
												"description": "Event name.",
												"name": "name",
												"type": "string"
											},
											{
												"description": "Event values.",
												"name": "...",
												"type": "any"
											}
										]
									},
									"type": "function"
								}
							]
						}
					]
				},
				{
					"description": "Pump events into the event queue.\n\nThis is a low-level function, and is usually not called by the user, but by love.run.\n\nNote that this does need to be called for any OS to think you're still running,\n\nand if you want to handle OS-generated events at all (think callbacks).",
					"name": "pump",
					"variants": [
						[]
					]
				},
				{
					"description": "Adds an event to the event queue.\n\nFrom 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.",
					"name": "push",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the event.",
									"name": "n",
									"type": "Event"
								},
								{
									"default": "nil",
									"description": "First event argument.",
									"name": "a",
									"type": "Variant"
								},
								{
									"default": "nil",
									"description": "Second event argument.",
									"name": "b",
									"type": "Variant"
								},
								{
									"default": "nil",
									"description": "Third event argument.",
									"name": "c",
									"type": "Variant"
								},
								{
									"default": "nil",
									"description": "Fourth event argument.",
									"name": "d",
									"type": "Variant"
								},
								{
									"default": "nil",
									"description": "Fifth event argument.",
									"name": "e",
									"type": "Variant"
								},
								{
									"default": "nil",
									"description": "Sixth event argument.",
									"name": "f",
									"type": "Variant"
								},
								{
									"default": "nil",
									"description": "Further event arguments may follow.",
									"name": "...",
									"type": "Variant"
								}
							]
						}
					]
				},
				{
					"description": "Adds the quit event to the queue.\n\nThe quit event is a signal for the event handler to close LÖVE. It's possible to abort the exit process with the love.quit callback.",
					"name": "quit",
					"variants": [
						{
							"arguments": [
								{
									"default": "0",
									"description": "The program exit status to use when closing the application.",
									"name": "exitstatus",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Tells the default love.run to exit and restart the game without relaunching the executable.",
									"name": "'restart'",
									"type": "string"
								}
							],
							"description": "Restarts the game without relaunching the executable. This cleanly shuts down the main Lua state instance and creates a brand new one."
						}
					]
				},
				{
					"description": "Like love.event.poll(), but blocks until there is an event in the queue.",
					"name": "wait",
					"variants": [
						{
							"returns": [
								{
									"description": "The name of event.",
									"name": "n",
									"type": "Event"
								},
								{
									"description": "First event argument.",
									"name": "a",
									"type": "Variant"
								},
								{
									"description": "Second event argument.",
									"name": "b",
									"type": "Variant"
								},
								{
									"description": "Third event argument.",
									"name": "c",
									"type": "Variant"
								},
								{
									"description": "Fourth event argument.",
									"name": "d",
									"type": "Variant"
								},
								{
									"description": "Fifth event argument.",
									"name": "e",
									"type": "Variant"
								},
								{
									"description": "Sixth event argument.",
									"name": "f",
									"type": "Variant"
								},
								{
									"description": "Further event arguments may follow.",
									"name": "...",
									"type": "Variant"
								}
							]
						}
					]
				}
			],
			"name": "event",
			"types": []
		},
		{
			"description": "Provides an interface to the user's filesystem.",
			"enums": [
				{
					"constants": [
						{
							"description": "No buffering. The result of write and append operations appears immediately.",
							"name": "none"
						},
						{
							"description": "Line buffering. Write and append operations are buffered until a newline is output or the buffer size limit is reached.",
							"name": "line"
						},
						{
							"description": "Full buffering. Write and append operations are always buffered until the buffer size limit is reached.",
							"name": "full"
						}
					],
					"description": "Buffer modes for File objects.",
					"name": "BufferMode"
				},
				{
					"constants": [
						{
							"description": "The data is unencoded.",
							"name": "file"
						},
						{
							"description": "The data is base64-encoded.",
							"name": "base64"
						}
					],
					"description": "How to decode a given FileData.",
					"name": "FileDecoder"
				},
				{
					"constants": [
						{
							"description": "Open a file for read.",
							"name": "r"
						},
						{
							"description": "Open a file for write.",
							"name": "w"
						},
						{
							"description": "Open a file for append.",
							"name": "a"
						},
						{
							"description": "Do not open a file (represents a closed file.)",
							"name": "c"
						}
					],
					"description": "The different modes you can open a File in.",
					"name": "FileMode"
				},
				{
					"constants": [
						{
							"description": "Regular file.",
							"name": "file"
						},
						{
							"description": "Directory.",
							"name": "directory"
						},
						{
							"description": "Symbolic link.",
							"name": "symlink"
						},
						{
							"description": "Something completely different like a device.",
							"name": "other"
						}
					],
					"description": "The type of a file.",
					"name": "FileType"
				}
			],
			"functions": [
				{
					"description": "Append data to an existing file.",
					"name": "append",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name (and path) of the file.",
									"name": "name",
									"type": "string"
								},
								{
									"description": "The string data to append to the file.",
									"name": "data",
									"type": "string"
								},
								{
									"default": "all",
									"description": "How many bytes to write.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "True if the operation was successful, or nil if there was an error.",
									"name": "success",
									"type": "boolean"
								},
								{
									"description": "The error message on failure.",
									"name": "errormsg",
									"type": "string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The name (and path) of the file.",
									"name": "name",
									"type": "string"
								},
								{
									"description": "The Data object to append to the file.",
									"name": "data",
									"type": "Data"
								},
								{
									"default": "all",
									"description": "How many bytes to write.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "True if the operation was successful, or nil if there was an error.",
									"name": "success",
									"type": "boolean"
								},
								{
									"description": "The error message on failure.",
									"name": "errormsg",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether love.filesystem follows symbolic links.",
					"name": "areSymlinksEnabled",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether love.filesystem follows symbolic links.",
									"name": "enable",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Recursively creates a directory.\n\nWhen called with 'a/b' it creates both 'a' and 'a/b', if they don't exist already.",
					"name": "createDirectory",
					"variants": [
						{
							"arguments": [
								{
									"description": "The directory to create.",
									"name": "name",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "True if the directory was created, false if not.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Returns the application data directory (could be the same as getUserDirectory)",
					"name": "getAppdataDirectory",
					"variants": [
						{
							"returns": [
								{
									"description": "The path of the application data directory",
									"name": "path",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the filesystem paths that will be searched for c libraries when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
					"name": "getCRequirePath",
					"variants": [
						{
							"description": "The default paths string is '??', which makes require('cool') try to load cool.dll, or cool.so depending on the platform.",
							"returns": [
								{
									"description": "The paths that the ''require'' function will check for c libraries in love's filesystem.",
									"name": "paths",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Returns a table with the names of files and subdirectories in the specified path. The table is not sorted in any way; the order is undefined.\n\nIf the path passed to the function exists in the game and the save directory, it will list the files and directories from both places.",
					"name": "getDirectoryItems",
					"variants": [
						{
							"arguments": [
								{
									"description": "The directory.",
									"name": "dir",
									"type": "string"
								}
							],
							"returns": [
								{
									"arraytype": "string",
									"description": "A sequence with the names of all files and subdirectories as strings.",
									"name": "files",
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The directory.",
									"name": "dir",
									"type": "string"
								},
								{
									"description": "A function which is called for each file and folder in the directory. The filename is passed to the function as an argument.",
									"name": "callback",
									"type": "function"
								}
							],
							"returns": [
								{
									"description": "A sequence with the names of all files and subdirectories as strings.",
									"name": "files",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the write directory name for your game. \n\nNote that this only returns the name of the folder to store your files in, not the full path.",
					"name": "getIdentity",
					"variants": [
						{
							"returns": [
								{
									"description": "The identity that is used as write directory.",
									"name": "name",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets information about the specified file or directory.",
					"name": "getInfo",
					"variants": [
						{
							"arguments": [
								{
									"description": "The file or directory path to check.",
									"name": "path",
									"type": "string"
								},
								{
									"default": "nil",
									"description": "If supplied, this parameter causes getInfo to only return the info table if the item at the given path matches the specified file type.",
									"name": "filtertype",
									"type": "FileType"
								}
							],
							"returns": [
								{
									"description": "A table containing information about the specified path, or nil if nothing exists at the path. The table contains the following fields:",
									"name": "info",
									"table": [
										{
											"description": "The type of the object at the path (file, directory, symlink, etc.)",
											"name": "type",
											"type": "FileType"
										},
										{
											"description": "The size in bytes of the file, or nil if it can't be determined.",
											"name": "size",
											"type": "number"
										},
										{
											"description": "The file's last modification time in seconds since the unix epoch, or nil if it can't be determined.",
											"name": "modtime",
											"type": "number"
										}
									],
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The file or directory path to check.",
									"name": "path",
									"type": "string"
								},
								{
									"description": "A table which will be filled in with info about the specified path.",
									"name": "info",
									"type": "table"
								}
							],
							"description": "This variant accepts an existing table to fill in, instead of creating a new one.",
							"returns": [
								{
									"description": "The table given as an argument, or nil if nothing exists at the path. The table will be filled in with the following fields:",
									"name": "info",
									"table": [
										{
											"description": "The type of the object at the path (file, directory, symlink, etc.)",
											"name": "type",
											"type": "FileType"
										},
										{
											"description": "The size in bytes of the file, or nil if it can't be determined.",
											"name": "size",
											"type": "number"
										},
										{
											"description": "The file's last modification time in seconds since the unix epoch, or nil if it can't be determined.",
											"name": "modtime",
											"type": "number"
										}
									],
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The file or directory path to check.",
									"name": "path",
									"type": "string"
								},
								{
									"description": "Causes getInfo to only return the info table if the item at the given path matches the specified file type.",
									"name": "filtertype",
									"type": "FileType"
								},
								{
									"description": "A table which will be filled in with info about the specified path.",
									"name": "info",
									"type": "table"
								}
							],
							"description": "This variant only returns info if the item at the given path is the same file type as specified in the filtertype argument, and accepts an existing table to fill in, instead of creating a new one.",
							"returns": [
								{
									"description": "The table given as an argument, or nil if nothing exists at the path. The table will be filled in with the following fields:",
									"name": "info",
									"table": [
										{
											"description": "The type of the object at the path (file, directory, symlink, etc.)",
											"name": "type",
											"type": "FileType"
										},
										{
											"description": "The size in bytes of the file, or nil if it can't be determined.",
											"name": "size",
											"type": "number"
										},
										{
											"description": "The file's last modification time in seconds since the unix epoch, or nil if it can't be determined.",
											"name": "modtime",
											"type": "number"
										}
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the platform-specific absolute path of the directory containing a filepath.\n\nThis can be used to determine whether a file is inside the save directory or the game's source .love.",
					"name": "getRealDirectory",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filepath to get the directory of.",
									"name": "filepath",
									"type": "string"
								}
							],
							"description": "This function returns the directory containing the given ''file path'', rather than file. For example, if the file screenshot1.png exists in a directory called screenshots in the game's save directory, love.filesystem.getRealDirectory('screenshots/screenshot1.png') will return the same value as love.filesystem.getSaveDirectory.",
							"returns": [
								{
									"description": "The platform-specific full path of the directory containing the filepath.",
									"name": "realdir",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the filesystem paths that will be searched when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
					"name": "getRequirePath",
					"variants": [
						{
							"description": "The default paths string is '?.lua;?/init.lua', which makes require('cool') try to load cool.lua and then try cool/init.lua if cool.lua doesn't exist.",
							"returns": [
								{
									"description": "The paths that the ''require'' function will check in love's filesystem.",
									"name": "paths",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the full path to the designated save directory.\n\nThis can be useful if you want to use the standard io library (or something else) to\n\nread or write in the save directory.",
					"name": "getSaveDirectory",
					"variants": [
						{
							"returns": [
								{
									"description": "The absolute path to the save directory.",
									"name": "dir",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Returns the full path to the the .love file or directory. If the game is fused to the LÖVE executable, then the executable is returned.",
					"name": "getSource",
					"variants": [
						{
							"returns": [
								{
									"description": "The full platform-dependent path of the .love file or directory.",
									"name": "path",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Returns the full path to the directory containing the .love file. If the game is fused to the LÖVE executable, then the directory containing the executable is returned.\n\nIf love.filesystem.isFused is true, the path returned by this function can be passed to love.filesystem.mount, which will make the directory containing the main game (e.g. C:\\Program Files\\coolgame\\) readable by love.filesystem.",
					"name": "getSourceBaseDirectory",
					"variants": [
						{
							"returns": [
								{
									"description": "The full platform-dependent path of the directory containing the .love file.",
									"name": "path",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Returns the path of the user's directory",
					"name": "getUserDirectory",
					"variants": [
						{
							"returns": [
								{
									"description": "The path of the user's directory",
									"name": "path",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current working directory.",
					"name": "getWorkingDirectory",
					"variants": [
						{
							"returns": [
								{
									"description": "The current working directory.",
									"name": "cwd",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Initializes love.filesystem, will be called internally, so should not be used explicitly.",
					"name": "init",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the application binary, typically love.",
									"name": "appname",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether the game is in fused mode or not.\n\nIf a game is in fused mode, its save directory will be directly in the Appdata directory instead of Appdata/LOVE/. The game will also be able to load C Lua dynamic libraries which are located in the save directory.\n\nA game is in fused mode if the source .love has been fused to the executable (see Game Distribution), or if '--fused' has been given as a command-line argument when starting the game.",
					"name": "isFused",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the game is in fused mode, false otherwise.",
									"name": "fused",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Iterate over the lines in a file.",
					"name": "lines",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name (and path) of the file",
									"name": "name",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A function that iterates over all the lines in the file",
									"name": "iterator",
									"signature": {
										"returns": [
											{
												"description": "Single line in the file.",
												"name": "line",
												"type": "string"
											}
										]
									},
									"type": "function"
								}
							]
						}
					]
				},
				{
					"description": "Loads a Lua file (but does not run it).",
					"name": "load",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name (and path) of the file.",
									"name": "name",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The loaded chunk.",
									"name": "chunk",
									"type": "function"
								},
								{
									"description": "The error message if file could not be opened.",
									"name": "errormsg",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Mounts a zip file or folder in the game's save directory for reading.\n\nIt is also possible to mount love.filesystem.getSourceBaseDirectory if the game is in fused mode.",
					"name": "mount",
					"variants": [
						{
							"arguments": [
								{
									"description": "The folder or zip file in the game's save directory to mount.",
									"name": "archive",
									"type": "string"
								},
								{
									"description": "The new path the archive will be mounted to.",
									"name": "mountpoint",
									"type": "string"
								},
								{
									"default": "false",
									"description": "Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.",
									"name": "appendToPath",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "True if the archive was successfully mounted, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The FileData object in memory to mount.",
									"name": "filedata",
									"type": "FileData"
								},
								{
									"description": "The new path the archive will be mounted to.",
									"name": "mountpoint",
									"type": "string"
								},
								{
									"default": "false",
									"description": "Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.",
									"name": "appendToPath",
									"type": "boolean"
								}
							],
							"description": "Mounts the contents of the given FileData in memory. The FileData's data must contain a zipped directory structure.",
							"returns": [
								{
									"description": "True if the archive was successfully mounted, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The Data object in memory to mount.",
									"name": "data",
									"type": "Data"
								},
								{
									"description": "The name to associate the mounted data with, for use with love.filesystem.unmount. Must be unique compared to other mounted data.",
									"name": "archivename",
									"type": "string"
								},
								{
									"description": "The new path the archive will be mounted to.",
									"name": "mountpoint",
									"type": "string"
								},
								{
									"default": "false",
									"description": "Whether the archive will be searched when reading a filepath before or after already-mounted archives. This includes the game's source and save directories.",
									"name": "appendToPath",
									"type": "boolean"
								}
							],
							"description": "Mounts the contents of the given Data object in memory. The data must contain a zipped directory structure.",
							"returns": [
								{
									"description": "True if the archive was successfully mounted, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new File object. \n\nIt needs to be opened before it can be accessed.",
					"name": "newFile",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filename of the file.",
									"name": "filename",
									"type": "string"
								}
							],
							"description": "Please note that this function will not return any error message (e.g. if you use an invalid filename) because it just creates the File Object. You can still check if the file is valid by using File:open which returns a boolean and an error message if something goes wrong while opening the file.",
							"returns": [
								{
									"description": "The new File object.",
									"name": "file",
									"type": "File"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The filename of the file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "The mode to open the file in.",
									"name": "mode",
									"type": "FileMode"
								}
							],
							"description": "Creates a File object and opens it for reading, writing, or appending.",
							"returns": [
								{
									"description": "The new File object, or nil if an error occurred.",
									"name": "file",
									"type": "File"
								},
								{
									"description": "The error string if an error occurred.",
									"name": "errorstr",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new FileData object from a file on disk, or from a string in memory.",
					"name": "newFileData",
					"variants": [
						{
							"arguments": [
								{
									"description": "The contents of the file in memory represented as a string.",
									"name": "contents",
									"type": "string"
								},
								{
									"description": "The name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into love.audio.newSource.",
									"name": "name",
									"type": "string"
								}
							],
							"description": "Creates a new FileData object from a string in memory.",
							"returns": [
								{
									"description": "The new FileData.",
									"name": "data",
									"type": "FileData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The Data object to copy into the new FileData object.",
									"name": "originaldata",
									"type": "Data"
								},
								{
									"description": "The name of the file. The extension may be parsed and used by LÖVE when passing the FileData object into love.audio.newSource.",
									"name": "name",
									"type": "string"
								}
							],
							"description": "Creates a new FileData object from a Data object in memory.",
							"returns": [
								{
									"description": "The new FileData.",
									"name": "data",
									"type": "FileData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Path to the file.",
									"name": "filepath",
									"type": "string"
								}
							],
							"description": "Creates a new FileData from a file on the storage device.",
							"returns": [
								{
									"description": "The new FileData, or nil if an error occurred.",
									"name": "data",
									"type": "FileData"
								},
								{
									"description": "The error string, if an error occurred.",
									"name": "err",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Read the contents of a file.",
					"name": "read",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name (and path) of the file.",
									"name": "name",
									"type": "string"
								},
								{
									"default": "all",
									"description": "How many bytes to read.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The file contents.",
									"name": "contents",
									"type": "string"
								},
								{
									"description": "How many bytes have been read.",
									"name": "size",
									"type": "number"
								},
								{
									"description": "returns nil as content.",
									"name": "contents",
									"type": "nil"
								},
								{
									"description": "returns an error message.",
									"name": "error",
									"type": "string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "What type to return the file's contents as.",
									"name": "container",
									"type": "ContainerType"
								},
								{
									"description": "The name (and path) of the file",
									"name": "name",
									"type": "string"
								},
								{
									"default": "all",
									"description": "How many bytes to read",
									"name": "size",
									"type": "number"
								}
							],
							"description": "Reads the contents of a file into either a string or a FileData object.",
							"returns": [
								{
									"description": "FileData or string containing the file contents.",
									"name": "contents",
									"type": "FileData or string"
								},
								{
									"description": "How many bytes have been read.",
									"name": "size",
									"type": "number"
								},
								{
									"description": "returns nil as content.",
									"name": "contents",
									"type": "nil"
								},
								{
									"description": "returns an error message.",
									"name": "error",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Removes a file or empty directory.",
					"name": "remove",
					"variants": [
						{
							"arguments": [
								{
									"description": "The file or directory to remove.",
									"name": "name",
									"type": "string"
								}
							],
							"description": "The directory must be empty before removal or else it will fail. Simply remove all files and folders in the directory beforehand.\n\nIf the file exists in the .love but not in the save directory, it returns false as well.\n\nAn opened File prevents removal of the underlying file. Simply close the File to remove it.",
							"returns": [
								{
									"description": "True if the file/directory was removed, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the filesystem paths that will be searched for c libraries when require is called.\n\nThe paths string returned by this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.) Additionally, any occurrence of a double question mark ('??') will be replaced by the name passed to require and the default library extension for the platform.\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
					"name": "setCRequirePath",
					"variants": [
						{
							"arguments": [
								{
									"description": "The paths that the ''require'' function will check in love's filesystem.",
									"name": "paths",
									"type": "string"
								}
							],
							"description": "The default paths string is '??', which makes require('cool') try to load cool.dll, or cool.so depending on the platform."
						}
					]
				},
				{
					"description": "Sets the write directory for your game. \n\nNote that you can only set the name of the folder to store your files in, not the location.",
					"name": "setIdentity",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new identity that will be used as write directory.",
									"name": "name",
									"type": "string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The new identity that will be used as write directory.",
									"name": "name",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Sets the filesystem paths that will be searched when require is called.\n\nThe paths string given to this function is a sequence of path templates separated by semicolons. The argument passed to ''require'' will be inserted in place of any question mark ('?') character in each template (after the dot characters in the argument passed to ''require'' are replaced by directory separators.)\n\nThe paths are relative to the game's source and save directories, as well as any paths mounted with love.filesystem.mount.",
					"name": "setRequirePath",
					"variants": [
						{
							"arguments": [
								{
									"description": "The paths that the ''require'' function will check in love's filesystem.",
									"name": "paths",
									"type": "string"
								}
							],
							"description": "The default paths string is '?.lua;?/init.lua', which makes require('cool') try to load cool.lua and then try cool/init.lua if cool.lua doesn't exist."
						}
					]
				},
				{
					"description": "Sets the source of the game, where the code is present. This function can only be called once, and is normally automatically done by LÖVE.",
					"name": "setSource",
					"variants": [
						{
							"arguments": [
								{
									"description": "Absolute path to the game's source folder.",
									"name": "path",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Sets whether love.filesystem follows symbolic links. It is enabled by default in version 0.10.0 and newer, and disabled by default in 0.9.2.",
					"name": "setSymlinksEnabled",
					"variants": [
						{
							"arguments": [
								{
									"description": "Whether love.filesystem should follow symbolic links.",
									"name": "enable",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Unmounts a zip file or folder previously mounted for reading with love.filesystem.mount.",
					"name": "unmount",
					"variants": [
						{
							"arguments": [
								{
									"description": "The folder or zip file in the game's save directory which is currently mounted.",
									"name": "archive",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "True if the archive was successfully unmounted, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Write data to a file in the save directory. If the file existed already, it will be completely replaced by the new contents.",
					"name": "write",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name (and path) of the file.",
									"name": "name",
									"type": "string"
								},
								{
									"description": "The string data to write to the file.",
									"name": "data",
									"type": "string"
								},
								{
									"default": "all",
									"description": "How many bytes to write.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "If the operation was successful.",
									"name": "success",
									"type": "boolean"
								},
								{
									"description": "Error message if operation was unsuccessful.",
									"name": "message",
									"type": "string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The name (and path) of the file.",
									"name": "name",
									"type": "string"
								},
								{
									"description": "The Data object to write to the file.",
									"name": "data",
									"type": "Data"
								},
								{
									"default": "all",
									"description": "How many bytes to write.",
									"name": "size",
									"type": "number"
								}
							],
							"description": "If you are getting the error message 'Could not set write directory', try setting the save directory. This is done either with love.filesystem.setIdentity or by setting the identity field in love.conf.\n\n'''Writing to multiple lines''': In Windows, some text editors (e.g. Notepad) only treat CRLF ('\\r\\n') as a new line.",
							"returns": [
								{
									"description": "If the operation was successful.",
									"name": "success",
									"type": "boolean"
								},
								{
									"description": "Error message if operation was unsuccessful.",
									"name": "message",
									"type": "string"
								}
							]
						}
					]
				}
			],
			"name": "filesystem",
			"types": [
				{
					"description": "Represents a file dropped onto the window.\n\nNote that the DroppedFile type can only be obtained from love.filedropped callback, and can't be constructed manually by the user.",
					"functions": [],
					"name": "DroppedFile",
					"supertypes": [
						"File",
						"Object"
					]
				},
				{
					"constructors": [
						"newFile"
					],
					"description": "Represents a file on the filesystem. A function that takes a file path can also take a File.",
					"functions": [
						{
							"description": "Closes a File.",
							"name": "close",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether closing was successful.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Flushes any buffered written data in the file to the disk.",
							"name": "flush",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the file successfully flushed any buffered data to the disk.",
											"name": "success",
											"type": "boolean"
										},
										{
											"description": "The error string, if an error occurred and the file could not be flushed.",
											"name": "err",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the buffer mode of a file.",
							"name": "getBuffer",
							"variants": [
								{
									"returns": [
										{
											"description": "The current buffer mode of the file.",
											"name": "mode",
											"type": "BufferMode"
										},
										{
											"description": "The maximum size in bytes of the file's buffer.",
											"name": "size",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the filename that the File object was created with. If the file object originated from the love.filedropped callback, the filename will be the full platform-dependent file path.",
							"name": "getFilename",
							"variants": [
								{
									"returns": [
										{
											"description": "The filename of the File.",
											"name": "filename",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the FileMode the file has been opened with.",
							"name": "getMode",
							"variants": [
								{
									"returns": [
										{
											"description": "The mode this file has been opened with.",
											"name": "mode",
											"type": "FileMode"
										}
									]
								}
							]
						},
						{
							"description": "Returns the file size.",
							"name": "getSize",
							"variants": [
								{
									"returns": [
										{
											"description": "The file size in bytes.",
											"name": "size",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether end-of-file has been reached.",
							"name": "isEOF",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether EOF has been reached.",
											"name": "eof",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the file is open.",
							"name": "isOpen",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the file is currently open, false otherwise.",
											"name": "open",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Iterate over all the lines in a file.",
							"name": "lines",
							"variants": [
								{
									"returns": [
										{
											"description": "The iterator (can be used in for loops).",
											"name": "iterator",
											"signature": {
												"returns": [
													{
														"description": "Single line in the file.",
														"name": "line",
														"type": "string"
													}
												]
											},
											"type": "function"
										}
									]
								}
							]
						},
						{
							"description": "Open the file for write, read or append.",
							"name": "open",
							"variants": [
								{
									"arguments": [
										{
											"description": "The mode to open the file in.",
											"name": "mode",
											"type": "FileMode"
										}
									],
									"description": "If you are getting the error message 'Could not set write directory', try setting the save directory. This is done either with love.filesystem.setIdentity or by setting the identity field in love.conf (only available with love 0.7 or higher).",
									"returns": [
										{
											"description": "True on success, false otherwise.",
											"name": "ok",
											"type": "boolean"
										},
										{
											"description": "The error string if an error occurred.",
											"name": "err",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Read a number of bytes from a file.",
							"name": "read",
							"variants": [
								{
									"arguments": [
										{
											"default": "all",
											"description": "The number of bytes to read.",
											"name": "bytes",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The contents of the read bytes.",
											"name": "contents",
											"type": "string"
										},
										{
											"description": "How many bytes have been read.",
											"name": "size",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "What type to return the file's contents as.",
											"name": "container",
											"type": "ContainerType"
										},
										{
											"default": "all",
											"description": "The number of bytes to read.",
											"name": "bytes",
											"type": "number"
										}
									],
									"description": "Reads the contents of a file into either a string or a FileData object.",
									"returns": [
										{
											"description": "FileData or string containing the read bytes.",
											"name": "contents",
											"type": "FileData or string"
										},
										{
											"description": "How many bytes have been read.",
											"name": "size",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Seek to a position in a file",
							"name": "seek",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position to seek to",
											"name": "pos",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Whether the operation was successful",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the buffer mode for a file opened for writing or appending. Files with buffering enabled will not write data to the disk until the buffer size limit is reached, depending on the buffer mode.\n\nFile:flush will force any buffered data to be written to the disk.",
							"name": "setBuffer",
							"variants": [
								{
									"arguments": [
										{
											"description": "The buffer mode to use.",
											"name": "mode",
											"type": "BufferMode"
										},
										{
											"default": "0",
											"description": "The maximum size in bytes of the file's buffer.",
											"name": "size",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Whether the buffer mode was successfully set.",
											"name": "success",
											"type": "boolean"
										},
										{
											"description": "The error string, if the buffer mode could not be set and an error occurred.",
											"name": "errorstr",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Returns the position in the file.",
							"name": "tell",
							"variants": [
								{
									"returns": [
										{
											"description": "The current position.",
											"name": "pos",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Write data to a file.",
							"name": "write",
							"variants": [
								{
									"arguments": [
										{
											"description": "The string data to write.",
											"name": "data",
											"type": "string"
										},
										{
											"default": "all",
											"description": "How many bytes to write.",
											"name": "size",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Whether the operation was successful.",
											"name": "success",
											"type": "boolean"
										},
										{
											"description": "The error string if an error occurred.",
											"name": "err",
											"type": "string"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The Data object to write.",
											"name": "data",
											"type": "Data"
										},
										{
											"default": "all",
											"description": "How many bytes to write.",
											"name": "size",
											"type": "number"
										}
									],
									"description": "'''Writing to multiple lines''': In Windows, some text editors (e.g. Notepad before Windows 10 1809) only treat CRLF ('\\r\\n') as a new line.\n\n--example\n\nf = love.filesystem.newFile('note.txt')\n\nf:open('w')\n\nfor i = 1, 10 do\n\n    f:write('This is line '..i..'!\\r\\n')\n\nend\n\nf:close()",
									"returns": [
										{
											"description": "Whether the operation was successful.",
											"name": "success",
											"type": "boolean"
										},
										{
											"description": "The error string if an error occurred.",
											"name": "errorstr",
											"type": "string"
										}
									]
								}
							]
						}
					],
					"name": "File",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newFileData"
					],
					"description": "Data representing the contents of a file.",
					"functions": [
						{
							"description": "Gets the extension of the FileData.",
							"name": "getExtension",
							"variants": [
								{
									"returns": [
										{
											"description": "The extension of the file the FileData represents.",
											"name": "ext",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the filename of the FileData.",
							"name": "getFilename",
							"variants": [
								{
									"returns": [
										{
											"description": "The name of the file the FileData represents.",
											"name": "name",
											"type": "string"
										}
									]
								}
							]
						}
					],
					"name": "FileData",
					"supertypes": [
						"Data",
						"Object"
					]
				}
			]
		},
		{
			"description": "Allows you to work with fonts.",
			"enums": [
				{
					"constants": [
						{
							"description": "Default hinting. Should be preferred for typical antialiased fonts.",
							"name": "normal"
						},
						{
							"description": "Results in fuzzier text but can sometimes preserve the original glyph shapes of the text better than normal hinting.",
							"name": "light"
						},
						{
							"description": "Results in aliased / unsmoothed text with either full opacity or completely transparent pixels. Should be used when antialiasing is not desired for the font.",
							"name": "mono"
						},
						{
							"description": "Disables hinting for the font. Results in fuzzier text.",
							"name": "none"
						}
					],
					"description": "True Type hinting mode.",
					"name": "HintingMode"
				}
			],
			"functions": [
				{
					"description": "Creates a new BMFont Rasterizer.",
					"name": "newBMFontRasterizer",
					"variants": [
						{
							"arguments": [
								{
									"description": "The image data containing the drawable pictures of font glyphs.",
									"name": "imageData",
									"type": "ImageData"
								},
								{
									"description": "The sequence of glyphs in the ImageData.",
									"name": "glyphs",
									"type": "string"
								},
								{
									"default": "1",
									"description": "DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The path to file containing the drawable pictures of font glyphs.",
									"name": "fileName",
									"type": "string"
								},
								{
									"description": "The sequence of glyphs in the ImageData.",
									"name": "glyphs",
									"type": "string"
								},
								{
									"default": "1",
									"description": "DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new GlyphData.",
					"name": "newGlyphData",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Rasterizer containing the font.",
									"name": "rasterizer",
									"type": "Rasterizer"
								},
								{
									"description": "The character code of the glyph.",
									"name": "glyph",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Image Rasterizer.",
					"name": "newImageRasterizer",
					"variants": [
						{
							"arguments": [
								{
									"description": "Font image data.",
									"name": "imageData",
									"type": "ImageData"
								},
								{
									"description": "String containing font glyphs.",
									"name": "glyphs",
									"type": "string"
								},
								{
									"default": "0",
									"description": "Font extra spacing.",
									"name": "extraSpacing",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create an ImageRasterizer from the image data.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Rasterizer.",
					"name": "newRasterizer",
					"variants": [
						{
							"arguments": [
								{
									"description": "The font file.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The FileData of the font file.",
									"name": "data",
									"type": "FileData"
								}
							],
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"default": "12",
									"description": "The font size.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.window.getDPIScale()",
									"description": "The font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a TrueTypeRasterizer with the default font.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Path to font file.",
									"name": "fileName",
									"type": "string"
								},
								{
									"default": "12",
									"description": "The font size.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.window.getDPIScale()",
									"description": "The font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a TrueTypeRasterizer with custom font.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "File data containing font.",
									"name": "fileData",
									"type": "FileData"
								},
								{
									"default": "12",
									"description": "The font size.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.window.getDPIScale()",
									"description": "The font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a TrueTypeRasterizer with custom font.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The image data containing the drawable pictures of font glyphs.",
									"name": "imageData",
									"type": "ImageData"
								},
								{
									"description": "The sequence of glyphs in the ImageData.",
									"name": "glyphs",
									"type": "string"
								},
								{
									"default": "1",
									"description": "DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Creates a new BMFont Rasterizer.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The path to file containing the drawable pictures of font glyphs.",
									"name": "fileName",
									"type": "string"
								},
								{
									"description": "The sequence of glyphs in the ImageData.",
									"name": "glyphs",
									"type": "string"
								},
								{
									"default": "1",
									"description": "DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Creates a new BMFont Rasterizer.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new TrueType Rasterizer.",
					"name": "newTrueTypeRasterizer",
					"variants": [
						{
							"arguments": [
								{
									"default": "12",
									"description": "The font size.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.window.getDPIScale()",
									"description": "The font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a TrueTypeRasterizer with the default font.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Path to font file.",
									"name": "fileName",
									"type": "string"
								},
								{
									"default": "12",
									"description": "The font size.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.window.getDPIScale()",
									"description": "The font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a TrueTypeRasterizer with custom font.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "File data containing font.",
									"name": "fileData",
									"type": "FileData"
								},
								{
									"default": "12",
									"description": "The font size.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.window.getDPIScale()",
									"description": "The font DPI scale.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a TrueTypeRasterizer with custom font.",
							"returns": [
								{
									"description": "The rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							]
						}
					]
				}
			],
			"name": "font",
			"types": [
				{
					"description": "A GlyphData represents a drawable symbol of a font Rasterizer.",
					"functions": [
						{
							"description": "Gets glyph advance.",
							"name": "getAdvance",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph advance.",
											"name": "advance",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph bearing.",
							"name": "getBearing",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph bearing X.",
											"name": "bx",
											"type": "number"
										},
										{
											"description": "Glyph bearing Y.",
											"name": "by",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph bounding box.",
							"name": "getBoundingBox",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph position x.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Glyph position y.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "Glyph width.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "Glyph height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph dimensions.",
							"name": "getDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph width.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "Glyph height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph pixel format.",
							"name": "getFormat",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph pixel format.",
											"name": "format",
											"type": "PixelFormat"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph number.",
							"name": "getGlyph",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph number.",
											"name": "glyph",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph string.",
							"name": "getGlyphString",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph string.",
											"name": "glyph",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph height.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph width.",
							"name": "getWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyph width.",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "GlyphData",
					"supertypes": [
						"Data",
						"Object"
					]
				},
				{
					"constructors": [
						"newTrueTypeRasterizer",
						"newRasterizer",
						"newImageRasterizer",
						"newBMFontRasterizer"
					],
					"description": "A Rasterizer handles font rendering, containing the font data (image or TrueType font) and drawable glyphs.",
					"functions": [
						{
							"description": "Gets font advance.",
							"name": "getAdvance",
							"variants": [
								{
									"returns": [
										{
											"description": "Font advance.",
											"name": "advance",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets ascent height.",
							"name": "getAscent",
							"variants": [
								{
									"returns": [
										{
											"description": "Ascent height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets descent height.",
							"name": "getDescent",
							"variants": [
								{
									"returns": [
										{
											"description": "Descent height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets number of glyphs in font.",
							"name": "getGlyphCount",
							"variants": [
								{
									"returns": [
										{
											"description": "Glyphs count.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets glyph data of a specified glyph.",
							"name": "getGlyphData",
							"variants": [
								{
									"arguments": [
										{
											"description": "Glyph",
											"name": "glyph",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "Glyph data",
											"name": "glyphData",
											"type": "GlyphData"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Glyph number",
											"name": "glyphNumber",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Glyph data",
											"name": "glyphData",
											"type": "GlyphData"
										}
									]
								}
							]
						},
						{
							"description": "Gets font height.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "Font height",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets line height of a font.",
							"name": "getLineHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "Line height of a font.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Checks if font contains specified glyphs.",
							"name": "hasGlyphs",
							"variants": [
								{
									"arguments": [
										{
											"description": "Glyph",
											"name": "glyph1",
											"type": "string or number"
										},
										{
											"description": "Glyph",
											"name": "glyph2",
											"type": "string or number"
										},
										{
											"description": "Additional glyphs",
											"name": "...",
											"type": "string or number"
										}
									],
									"returns": [
										{
											"description": "Whatever font contains specified glyphs.",
											"name": "hasGlyphs",
											"type": "boolean"
										}
									]
								}
							]
						}
					],
					"name": "Rasterizer",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "The primary responsibility for the love.graphics module is the drawing of lines, shapes, text, Images and other Drawable objects onto the screen. Its secondary responsibilities include loading external files (including Images and Fonts) into memory, creating specialized objects (such as ParticleSystems or Canvases) and managing screen geometry.\n\nLÖVE's coordinate system is rooted in the upper-left corner of the screen, which is at location (0, 0). The x axis is horizontal: larger values are further to the right. The y axis is vertical: larger values are further towards the bottom.\n\nIn many cases, you draw images or shapes in terms of their upper-left corner.\n\nMany of the functions are used to manipulate the graphics coordinate system, which is essentially the way coordinates are mapped to the display. You can change the position, scale, and even rotation in this way.",
			"enums": [
				{
					"constants": [
						{
							"description": "Align text center.",
							"name": "center"
						},
						{
							"description": "Align text left.",
							"name": "left"
						},
						{
							"description": "Align text right.",
							"name": "right"
						},
						{
							"description": "Align text both left and right.",
							"name": "justify"
						}
					],
					"description": "Text alignment.",
					"name": "AlignMode"
				},
				{
					"constants": [
						{
							"description": "The arc is drawn like a slice of pie, with the arc circle connected to the center at its end-points.",
							"name": "pie"
						},
						{
							"description": "The arc circle's two end-points are unconnected when the arc is drawn as a line. Behaves like the \"closed\" arc type when the arc is drawn in filled mode.",
							"name": "open"
						},
						{
							"description": "The arc circle's two end-points are connected to each other.",
							"name": "closed"
						}
					],
					"description": "Different types of arcs that can be drawn.",
					"name": "ArcType"
				},
				{
					"constants": [
						{
							"description": "Uniform distribution.",
							"name": "uniform"
						},
						{
							"description": "Normal (gaussian) distribution.",
							"name": "normal"
						},
						{
							"description": "Uniform distribution in an ellipse.",
							"name": "ellipse"
						},
						{
							"description": "Distribution in an ellipse with particles spawning at the edges of the ellipse.",
							"name": "borderellipse"
						},
						{
							"description": "Distribution in a rectangle with particles spawning at the edges of the rectangle.",
							"name": "borderrectangle"
						},
						{
							"description": "No distribution - area spread is disabled.",
							"name": "none"
						}
					],
					"description": "Types of particle area spread distribution.",
					"name": "AreaSpreadDistribution"
				},
				{
					"constants": [
						{
							"description": "The RGB values of what's drawn are multiplied by the alpha values of those colors during blending. This is the default alpha mode.",
							"name": "alphamultiply"
						},
						{
							"description": "The RGB values of what's drawn are '''not''' multiplied by the alpha values of those colors during blending. For most blend modes to work correctly with this alpha mode, the colors of a drawn object need to have had their RGB values multiplied by their alpha values at some point previously (\"premultiplied alpha\").",
							"name": "premultiplied"
						}
					],
					"description": "Different ways alpha affects color blending. See BlendMode and the BlendMode Formulas for additional notes.",
					"name": "BlendAlphaMode"
				},
				{
					"constants": [
						{
							"description": "Alpha blending (normal). The alpha of what's drawn determines its opacity.",
							"name": "alpha"
						},
						{
							"description": "The colors of what's drawn completely replace what was on the screen, with no additional blending. The BlendAlphaMode specified in love.graphics.setBlendMode still affects what happens.",
							"name": "replace"
						},
						{
							"description": "'Screen' blending.",
							"name": "screen"
						},
						{
							"description": "The pixel colors of what's drawn are added to the pixel colors already on the screen. The alpha of the screen is not modified.",
							"name": "add"
						},
						{
							"description": "The pixel colors of what's drawn are subtracted from the pixel colors already on the screen. The alpha of the screen is not modified.",
							"name": "subtract"
						},
						{
							"description": "The pixel colors of what's drawn are multiplied with the pixel colors already on the screen (darkening them). The alpha of drawn objects is multiplied with the alpha of the screen rather than determining how much the colors on the screen are affected, even when the \"alphamultiply\" BlendAlphaMode is used.",
							"name": "multiply"
						},
						{
							"description": "The pixel colors of what's drawn are compared to the existing pixel colors, and the larger of the two values for each color component is used. Only works when the \"premultiplied\" BlendAlphaMode is used in love.graphics.setBlendMode.",
							"name": "lighten"
						},
						{
							"description": "The pixel colors of what's drawn are compared to the existing pixel colors, and the smaller of the two values for each color component is used. Only works when the \"premultiplied\" BlendAlphaMode is used in love.graphics.setBlendMode.",
							"name": "darken"
						},
						{
							"description": "Additive blend mode.",
							"name": "additive"
						},
						{
							"description": "Subtractive blend mode.",
							"name": "subtractive"
						},
						{
							"description": "Multiply blend mode.",
							"name": "multiplicative"
						},
						{
							"description": "Premultiplied alpha blend mode.",
							"name": "premultiplied"
						}
					],
					"description": "Different ways to do color blending. See BlendAlphaMode and the BlendMode Formulas for additional notes.",
					"name": "BlendMode"
				},
				{
					"constants": [
						{
							"description": "* stencil tests: the stencil value of the pixel must be equal to the supplied value.\n* depth tests: the depth value of the drawn object at that pixel must be equal to the existing depth value of that pixel.",
							"name": "equal"
						},
						{
							"description": "* stencil tests: the stencil value of the pixel must not be equal to the supplied value.\n* depth tests: the depth value of the drawn object at that pixel must not be equal to the existing depth value of that pixel.",
							"name": "notequal"
						},
						{
							"description": "* stencil tests: the stencil value of the pixel must be less than the supplied value.\n* depth tests: the depth value of the drawn object at that pixel must be less than the existing depth value of that pixel.",
							"name": "less"
						},
						{
							"description": "* stencil tests: the stencil value of the pixel must be less than or equal to the supplied value.\n* depth tests: the depth value of the drawn object at that pixel must be less than or equal to the existing depth value of that pixel.",
							"name": "lequal"
						},
						{
							"description": "* stencil tests: the stencil value of the pixel must be greater than or equal to the supplied value.\n* depth tests: the depth value of the drawn object at that pixel must be greater than or equal to the existing depth value of that pixel.",
							"name": "gequal"
						},
						{
							"description": "* stencil tests: the stencil value of the pixel must be greater than the supplied value.\n* depth tests: the depth value of the drawn object at that pixel must be greater than the existing depth value of that pixel.",
							"name": "greater"
						},
						{
							"description": "Objects will never be drawn.",
							"name": "never"
						},
						{
							"description": "Objects will always be drawn. Effectively disables the depth or stencil test.",
							"name": "always"
						}
					],
					"description": "Different types of per-pixel stencil test and depth test comparisons. The pixels of an object will be drawn if the comparison succeeds, for each pixel that the object touches.",
					"name": "CompareMode"
				},
				{
					"constants": [
						{
							"description": "Back-facing triangles in Meshes are culled (not rendered). The vertex order of a triangle determines whether it is back- or front-facing.",
							"name": "back"
						},
						{
							"description": "Front-facing triangles in Meshes are culled.",
							"name": "front"
						},
						{
							"description": "Both back- and front-facing triangles in Meshes are rendered.",
							"name": "none"
						}
					],
					"description": "How Mesh geometry is culled when rendering.",
					"name": "CullMode"
				},
				{
					"constants": [
						{
							"description": "Draw filled shape.",
							"name": "fill"
						},
						{
							"description": "Draw outlined shape.",
							"name": "line"
						}
					],
					"description": "Controls whether shapes are drawn as an outline, or filled.",
					"name": "DrawMode"
				},
				{
					"constants": [
						{
							"description": "Scale image with linear interpolation.",
							"name": "linear"
						},
						{
							"description": "Scale image with nearest neighbor interpolation.",
							"name": "nearest"
						}
					],
					"description": "How the image is filtered when scaling.",
					"name": "FilterMode"
				},
				{
					"constants": [
						{
							"description": "Whether the \"clampzero\" WrapMode is supported.",
							"name": "clampzero"
						},
						{
							"description": "Whether the \"lighten\" and \"darken\" BlendModes are supported.",
							"name": "lighten"
						},
						{
							"description": "Whether multiple formats can be used in the same love.graphics.setCanvas call.",
							"name": "multicanvasformats"
						},
						{
							"description": "Whether GLSL 3 Shaders can be used.",
							"name": "glsl3"
						},
						{
							"description": "Whether mesh instancing is supported.",
							"name": "instancing"
						},
						{
							"description": "Whether textures with non-power-of-two dimensions can use mipmapping and the 'repeat' WrapMode.",
							"name": "fullnpot"
						},
						{
							"description": "Whether pixel shaders can use \"highp\" 32 bit floating point numbers (as opposed to just 16 bit or lower precision).",
							"name": "pixelshaderhighp"
						},
						{
							"description": "Whether shaders can use the dFdx, dFdy, and fwidth functions for computing derivatives.",
							"name": "shaderderivatives"
						}
					],
					"description": "Graphics features that can be checked for with love.graphics.getSupported.",
					"name": "GraphicsFeature"
				},
				{
					"constants": [
						{
							"description": "The maximum size of points.",
							"name": "pointsize"
						},
						{
							"description": "The maximum width or height of Images and Canvases.",
							"name": "texturesize"
						},
						{
							"description": "The maximum number of simultaneously active canvases (via love.graphics.setCanvas.)",
							"name": "multicanvas"
						},
						{
							"description": "The maximum number of antialiasing samples for a Canvas.",
							"name": "canvasmsaa"
						},
						{
							"description": "The maximum number of layers in an Array texture.",
							"name": "texturelayers"
						},
						{
							"description": "The maximum width, height, or depth of a Volume texture.",
							"name": "volumetexturesize"
						},
						{
							"description": "The maximum width or height of a Cubemap texture.",
							"name": "cubetexturesize"
						},
						{
							"description": "The maximum amount of anisotropic filtering. Texture:setMipmapFilter internally clamps the given anisotropy value to the system's limit.",
							"name": "anisotropy"
						}
					],
					"description": "Types of system-dependent graphics limits checked for using love.graphics.getSystemLimits.",
					"name": "GraphicsLimit"
				},
				{
					"constants": [
						{
							"description": "The vertex map is array of unsigned word (16-bit).",
							"name": "uint16"
						},
						{
							"description": "The vertex map is array of unsigned dword (32-bit).",
							"name": "uint32"
						}
					],
					"description": "Vertex map datatype for Data variant of Mesh:setVertexMap.",
					"name": "IndexDataType"
				},
				{
					"constants": [
						{
							"description": "The ends of the line segments beveled in an angle so that they join seamlessly.",
							"name": "miter"
						},
						{
							"description": "No cap applied to the ends of the line segments.",
							"name": "none"
						},
						{
							"description": "Flattens the point where line segments join together.",
							"name": "bevel"
						}
					],
					"description": "Line join style.",
					"name": "LineJoin"
				},
				{
					"constants": [
						{
							"description": "Draw rough lines.",
							"name": "rough"
						},
						{
							"description": "Draw smooth lines.",
							"name": "smooth"
						}
					],
					"description": "The styles in which lines are drawn.",
					"name": "LineStyle"
				},
				{
					"constants": [
						{
							"description": "The vertices create a \"fan\" shape with the first vertex acting as the hub point. Can be easily used to draw simple convex polygons.",
							"name": "fan"
						},
						{
							"description": "The vertices create a series of connected triangles using vertices 1, 2, 3, then 3, 2, 4 (note the order), then 3, 4, 5, and so on.",
							"name": "strip"
						},
						{
							"description": "The vertices create unconnected triangles.",
							"name": "triangles"
						},
						{
							"description": "The vertices are drawn as unconnected points (see love.graphics.setPointSize.)",
							"name": "points"
						}
					],
					"description": "How a Mesh's vertices are used when drawing.",
					"name": "MeshDrawMode"
				},
				{
					"constants": [
						{
							"description": "The Canvas has no mipmaps.",
							"name": "none"
						},
						{
							"description": "The Canvas has mipmaps. love.graphics.setCanvas can be used to render to a specific mipmap level, or Canvas:generateMipmaps can (re-)compute all mipmap levels based on the base level.",
							"name": "auto"
						},
						{
							"description": "The Canvas has mipmaps, and all mipmap levels will automatically be recomputed when switching away from the Canvas with love.graphics.setCanvas.",
							"name": "manual"
						}
					],
					"description": "Controls whether a Canvas has mipmaps, and its behaviour when it does.",
					"name": "MipmapMode"
				},
				{
					"constants": [
						{
							"description": "Particles are inserted at the top of the ParticleSystem's list of particles.",
							"name": "top"
						},
						{
							"description": "Particles are inserted at the bottom of the ParticleSystem's list of particles.",
							"name": "bottom"
						},
						{
							"description": "Particles are inserted at random positions in the ParticleSystem's list of particles.",
							"name": "random"
						}
					],
					"description": "How newly created particles are added to the ParticleSystem.",
					"name": "ParticleInsertMode"
				},
				{
					"constants": [
						{
							"description": "The object's data will change occasionally during its lifetime. ",
							"name": "dynamic"
						},
						{
							"description": "The object will not be modified after initial sprites or vertices are added.",
							"name": "static"
						},
						{
							"description": "The object data will always change between draws.",
							"name": "stream"
						}
					],
					"description": "Usage hints for SpriteBatches and Meshes to optimize data storage and access.",
					"name": "SpriteBatchUsage"
				},
				{
					"constants": [
						{
							"description": "The transformation stack (love.graphics.translate, love.graphics.rotate, etc.)",
							"name": "transform"
						},
						{
							"description": "All love.graphics state, including transform state.",
							"name": "all"
						}
					],
					"description": "Graphics state stack types used with love.graphics.push.",
					"name": "StackType"
				},
				{
					"constants": [
						{
							"description": "The stencil value of a pixel will be replaced by the value specified in love.graphics.stencil, if any object touches the pixel.",
							"name": "replace"
						},
						{
							"description": "The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If the stencil value reaches 255 it will stay at 255.",
							"name": "increment"
						},
						{
							"description": "The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value reaches 0 it will stay at 0.",
							"name": "decrement"
						},
						{
							"description": "The stencil value of a pixel will be incremented by 1 for each object that touches the pixel. If a stencil value of 255 is incremented it will be set to 0.",
							"name": "incrementwrap"
						},
						{
							"description": "The stencil value of a pixel will be decremented by 1 for each object that touches the pixel. If the stencil value of 0 is decremented it will be set to 255.",
							"name": "decrementwrap"
						},
						{
							"description": "The stencil value of a pixel will be bitwise-inverted for each object that touches the pixel. If a stencil value of 0 is inverted it will become 255.",
							"name": "invert"
						}
					],
					"description": "How a stencil function modifies the stencil values of pixels it touches.",
					"name": "StencilAction"
				},
				{
					"constants": [
						{
							"description": "Regular 2D texture with width and height.",
							"name": "2d"
						},
						{
							"description": "Several same-size 2D textures organized into a single object. Similar to a texture atlas / sprite sheet, but avoids sprite bleeding and other issues.",
							"name": "array"
						},
						{
							"description": "Cubemap texture with 6 faces. Requires a custom shader (and Shader:send) to use. Sampling from a cube texture in a shader takes a 3D direction vector instead of a texture coordinate.",
							"name": "cube"
						},
						{
							"description": "3D texture with width, height, and depth. Requires a custom shader to use. Volume textures can have texture filtering applied along the 3rd axis.",
							"name": "volume"
						}
					],
					"description": "Types of textures (2D, cubemap, etc.)",
					"name": "TextureType"
				},
				{
					"constants": [
						{
							"description": "The vertex attribute will have a unique value for each vertex in the Mesh.",
							"name": "pervertex"
						},
						{
							"description": "The vertex attribute will have a unique value for each instance of the Mesh.",
							"name": "perinstance"
						}
					],
					"description": "The frequency at which a vertex shader fetches the vertex attribute's data from the Mesh when it's drawn.\n\nPer-instance attributes can be used to render a Mesh many times with different positions, colors, or other attributes via a single love.graphics.drawInstanced call, without using the love_InstanceID vertex shader variable.",
					"name": "VertexAttributeStep"
				},
				{
					"constants": [
						{
							"description": "Clockwise.",
							"name": "cw"
						},
						{
							"description": "Counter-clockwise.",
							"name": "ccw"
						}
					],
					"description": "How Mesh geometry vertices are ordered.",
					"name": "VertexWinding"
				},
				{
					"constants": [
						{
							"description": "Clamp the texture. Appears only once. The area outside the texture's normal range is colored based on the edge pixels of the texture.",
							"name": "clamp"
						},
						{
							"description": "Repeat the texture. Fills the whole available extent.",
							"name": "repeat"
						},
						{
							"description": "Repeat the texture, flipping it each time it repeats. May produce better visual results than the repeat mode when the texture doesn't seamlessly tile.",
							"name": "mirroredrepeat"
						},
						{
							"description": "Clamp the texture. Fills the area outside the texture's normal range with transparent black (or opaque black for textures with no alpha channel.)",
							"name": "clampzero"
						}
					],
					"description": "How the image wraps inside a Quad with a larger quad size than image size. This also affects how Meshes with texture coordinates which are outside the range of 1 are drawn, and the color returned by the Texel Shader function when using it to sample from texture coordinates outside of the range of 1.",
					"name": "WrapMode"
				}
			],
			"functions": [
				{
					"description": "Applies the given Transform object to the current coordinate transformation.\n\nThis effectively multiplies the existing coordinate transformation's matrix with the Transform object's internal matrix to produce the new coordinate transformation.",
					"name": "applyTransform",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Transform object to apply to the current graphics coordinate transform.",
									"name": "transform",
									"type": "Transform"
								}
							]
						}
					]
				},
				{
					"description": "Draws a filled or unfilled arc at position (x, y). The arc is drawn from angle1 to angle2 in radians. The segments parameter determines how many segments are used to draw the arc. The more segments, the smoother the edge.",
					"name": "arc",
					"variants": [
						{
							"arguments": [
								{
									"description": "How to draw the arc.",
									"name": "drawmode",
									"type": "DrawMode"
								},
								{
									"description": "The position of the center along x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the center along y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Radius of the arc.",
									"name": "radius",
									"type": "number"
								},
								{
									"description": "The angle at which the arc begins.",
									"name": "angle1",
									"type": "number"
								},
								{
									"description": "The angle at which the arc terminates.",
									"name": "angle2",
									"type": "number"
								},
								{
									"default": "10",
									"description": "The number of segments used for drawing the arc.",
									"name": "segments",
									"type": "number"
								}
							],
							"description": "Draws an arc using the 'pie' ArcType."
						},
						{
							"arguments": [
								{
									"description": "How to draw the arc.",
									"name": "drawmode",
									"type": "DrawMode"
								},
								{
									"description": "The type of arc to draw.",
									"name": "arctype",
									"type": "ArcType"
								},
								{
									"description": "The position of the center along x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the center along y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Radius of the arc.",
									"name": "radius",
									"type": "number"
								},
								{
									"description": "The angle at which the arc begins.",
									"name": "angle1",
									"type": "number"
								},
								{
									"description": "The angle at which the arc terminates.",
									"name": "angle2",
									"type": "number"
								},
								{
									"default": "10",
									"description": "The number of segments used for drawing the arc.",
									"name": "segments",
									"type": "number"
								}
							],
							"description": ""
						}
					]
				},
				{
					"description": "Creates a screenshot once the current frame is done (after love.draw has finished).\n\nSince this function enqueues a screenshot capture rather than executing it immediately, it can be called from an input callback or love.update and it will still capture all of what's drawn to the screen in that frame.",
					"name": "captureScreenshot",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filename to save the screenshot to. The encoded image type is determined based on the extension of the filename, and must be one of the ImageFormats.",
									"name": "filename",
									"type": "string"
								}
							],
							"description": "Capture a screenshot and save it to a file at the end of the current frame."
						},
						{
							"arguments": [
								{
									"description": "Function which gets called once the screenshot has been captured. An ImageData is passed into the function as its only argument.",
									"name": "callback",
									"signature": {
										"arguments": [
											{
												"description": "The resulting screenshot.",
												"name": "imageData",
												"type": "ImageData"
											}
										]
									},
									"type": "function"
								}
							],
							"description": "Capture a screenshot and call a callback with the generated ImageData at the end of the current frame."
						},
						{
							"arguments": [
								{
									"description": "The Channel to push the generated ImageData to.",
									"name": "channel",
									"type": "Channel"
								}
							],
							"description": "Capture a screenshot and push the generated ImageData to a Channel at the end of the current frame."
						}
					]
				},
				{
					"description": "Draws a circle.",
					"name": "circle",
					"variants": [
						{
							"arguments": [
								{
									"description": "How to draw the circle.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The position of the center along x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the center along y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The radius of the circle.",
									"name": "radius",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "How to draw the circle.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The position of the center along x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the center along y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The radius of the circle.",
									"name": "radius",
									"type": "number"
								},
								{
									"description": "The number of segments used for drawing the circle. Note: The default variable for the segments parameter varies between different versions of LÖVE.",
									"name": "segments",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Clears the screen or active Canvas to the specified color.\n\nThis function is called automatically before love.draw in the default love.run function. See the example in love.run for a typical use of this function.\n\nNote that the scissor area bounds the cleared region.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.\n\nIn versions prior to background color instead.",
					"name": "clear",
					"variants": [
						{
							"description": "Clears the screen to the background color in 0.9.2 and earlier, or to transparent black (0, 0, 0, 0) in LÖVE 0.10.0 and newer."
						},
						{
							"arguments": [
								{
									"description": "The red channel of the color to clear the screen to.",
									"name": "r",
									"type": "number"
								},
								{
									"description": "The green channel of the color to clear the screen to.",
									"name": "g",
									"type": "number"
								},
								{
									"description": "The blue channel of the color to clear the screen to.",
									"name": "b",
									"type": "number"
								},
								{
									"default": "1",
									"description": "The alpha channel of the color to clear the screen to.",
									"name": "a",
									"type": "number"
								},
								{
									"default": "true",
									"description": "Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.",
									"name": "clearstencil",
									"type": "boolean"
								},
								{
									"default": "true",
									"description": "Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.",
									"name": "cleardepth",
									"type": "boolean"
								}
							],
							"description": "Clears the screen or active Canvas to the specified color."
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "A table in the form of {r, g, b, a} containing the color to clear the first active Canvas to.",
									"name": "color",
									"type": "table"
								},
								{
									"arraytype": "number",
									"description": "Additional tables for each active Canvas.",
									"name": "...",
									"type": "table"
								},
								{
									"default": "true",
									"description": "Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.",
									"name": "clearstencil",
									"type": "boolean"
								},
								{
									"default": "true",
									"description": "Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.",
									"name": "cleardepth",
									"type": "boolean"
								}
							],
							"description": "Clears multiple active Canvases to different colors, if multiple Canvases are active at once via love.graphics.setCanvas.\n\nA color must be specified for each active Canvas, when this function variant is used."
						},
						{
							"arguments": [
								{
									"description": "Whether to clear the active color canvas to transparent black (0, 0, 0, 0). Typically this should be set to false with this variant of the function.",
									"name": "clearcolor",
									"type": "boolean"
								},
								{
									"description": "Whether to clear the active stencil buffer, if present. It can also be an integer between 0 and 255 to clear the stencil buffer to a specific value.",
									"name": "clearstencil",
									"type": "boolean"
								},
								{
									"description": "Whether to clear the active depth buffer, if present. It can also be a number between 0 and 1 to clear the depth buffer to a specific value.",
									"name": "cleardepth",
									"type": "boolean"
								}
							],
							"description": "Clears the stencil or depth buffers without having to clear the color canvas as well."
						}
					]
				},
				{
					"description": "Discards (trashes) the contents of the screen or active Canvas. This is a performance optimization function with niche use cases.\n\nIf the active Canvas has just been changed and the 'replace' BlendMode is about to be used to draw something which covers the entire screen, calling love.graphics.discard rather than calling love.graphics.clear or doing nothing may improve performance on mobile devices.\n\nOn some desktop systems this function may do nothing.",
					"name": "discard",
					"variants": [
						{
							"arguments": [
								{
									"default": "true",
									"description": "Whether to discard the texture(s) of the active Canvas(es) (the contents of the screen if no Canvas is active.)",
									"name": "discardcolor",
									"type": "boolean"
								},
								{
									"default": "true",
									"description": "Whether to discard the contents of the stencil buffer of the screen / active Canvas.",
									"name": "discardstencil",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "boolean",
									"description": "An array containing boolean values indicating whether to discard the texture of each active Canvas, when multiple simultaneous Canvases are active.",
									"name": "discardcolors",
									"type": "table"
								},
								{
									"default": "true",
									"description": "Whether to discard the contents of the stencil buffer of the screen / active Canvas.",
									"name": "discardstencil",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Draws a Drawable object (an Image, Canvas, SpriteBatch, ParticleSystem, Mesh, Text object, or Video) on the screen with optional rotation, scaling and shearing.\n\nObjects are drawn relative to their local coordinate system. The origin is by default located at the top left corner of Image and Canvas. All scaling, shearing, and rotation arguments transform the object relative to that point. Also, the position of the origin can be specified on the screen coordinate system.\n\nIt's possible to rotate an object about its center by offsetting the origin to the center. Angles must be given in radians for rotation. One can also use a negative scaling factor to flip about its centerline. \n\nNote that the offsets are applied before rotation, scaling, or shearing; scaling and shearing are applied before rotation.\n\nThe right and bottom edges of the object are shifted at an angle defined by the shearing factors.\n\nWhen using the default shader anything drawn with this function will be tinted according to the currently selected color.  Set it to pure white to preserve the object's original colors.",
					"name": "draw",
					"variants": [
						{
							"arguments": [
								{
									"description": "A drawable object.",
									"name": "drawable",
									"type": "Drawable"
								},
								{
									"default": "0",
									"description": "The position to draw the object (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the object (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A Texture (Image or Canvas) to texture the Quad with.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"description": "The Quad to draw on screen.",
									"name": "quad",
									"type": "Quad"
								},
								{
									"description": "The position to draw the object (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position to draw the object (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A drawable object.",
									"name": "drawable",
									"type": "Drawable"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A Texture (Image or Canvas) to texture the Quad with.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"description": "The Quad to draw on screen.",
									"name": "quad",
									"type": "Quad"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						}
					]
				},
				{
					"description": "Draws many instances of a Mesh with a single draw call, using hardware geometry instancing.\n\nEach instance can have unique properties (positions, colors, etc.) but will not by default unless a custom per-instance vertex attributes or the love_InstanceID GLSL 3 vertex shader variable is used, otherwise they will all render at the same position on top of each other.\n\nInstancing is not supported by some older GPUs that are only capable of using OpenGL ES 2 or OpenGL 2. Use love.graphics.getSupported to check.",
					"name": "drawInstanced",
					"variants": [
						{
							"arguments": [
								{
									"description": "The mesh to render.",
									"name": "mesh",
									"type": "Mesh"
								},
								{
									"description": "The number of instances to render.",
									"name": "instancecount",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the instances (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the instances (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The mesh to render.",
									"name": "mesh",
									"type": "Mesh"
								},
								{
									"description": "The number of instances to render.",
									"name": "instancecount",
									"type": "number"
								},
								{
									"description": "A transform object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						}
					]
				},
				{
					"description": "Draws a layer of an Array Texture.",
					"name": "drawLayer",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Array Texture to draw.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"description": "The index of the layer to use when drawing.",
									"name": "layerindex",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the texture (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the texture (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							],
							"description": "Draws a layer of an Array Texture."
						},
						{
							"arguments": [
								{
									"description": "The Array Texture to draw.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"description": "The index of the layer to use when drawing.",
									"name": "layerindex",
									"type": "number"
								},
								{
									"description": "The subsection of the texture's layer to use when drawing.",
									"name": "quad",
									"type": "Quad"
								},
								{
									"default": "0",
									"description": "The position to draw the texture (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the texture (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							],
							"description": "Draws a layer of an Array Texture using the specified Quad.\n\nThe specified layer index overrides any layer index set on the Quad via Quad:setLayer."
						},
						{
							"arguments": [
								{
									"description": "The Array Texture to draw.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"description": "The index of the layer to use when drawing.",
									"name": "layerindex",
									"type": "number"
								},
								{
									"description": "A transform object.",
									"name": "transform",
									"type": "Transform"
								}
							],
							"description": "Draws a layer of an Array Texture using the specified Transform."
						},
						{
							"arguments": [
								{
									"description": "The Array Texture to draw.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"description": "The index of the layer to use when drawing.",
									"name": "layerindex",
									"type": "number"
								},
								{
									"description": "The subsection of the texture's layer to use when drawing.",
									"name": "quad",
									"type": "Quad"
								},
								{
									"description": "A transform object.",
									"name": "transform",
									"type": "Transform"
								}
							],
							"description": "Draws a layer of an Array Texture using the specified Quad and Transform.\n\nIn order to use an Array Texture or other non-2D texture types as the main texture in a custom void effect() variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: uniform ArrayImage MainTex;."
						}
					]
				},
				{
					"description": "Draws an ellipse.",
					"name": "ellipse",
					"variants": [
						{
							"arguments": [
								{
									"description": "How to draw the ellipse.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The position of the center along x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the center along y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The radius of the ellipse along the x-axis (half the ellipse's width).",
									"name": "radiusx",
									"type": "number"
								},
								{
									"description": "The radius of the ellipse along the y-axis (half the ellipse's height).",
									"name": "radiusy",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "How to draw the ellipse.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The position of the center along x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the center along y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The radius of the ellipse along the x-axis (half the ellipse's width).",
									"name": "radiusx",
									"type": "number"
								},
								{
									"description": "The radius of the ellipse along the y-axis (half the ellipse's height).",
									"name": "radiusy",
									"type": "number"
								},
								{
									"description": "The number of segments used for drawing the ellipse.",
									"name": "segments",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Immediately renders any pending automatically batched draws.\n\nLÖVE will call this function internally as needed when most state is changed, so it is not necessary to manually call it.\n\nThe current batch will be automatically flushed by love.graphics state changes (except for the transform stack and the current color), as well as Shader:send and methods on Textures which change their state. Using a different Image in consecutive love.graphics.draw calls will also flush the current batch.\n\nSpriteBatches, ParticleSystems, Meshes, and Text objects do their own batching and do not affect automatic batching of other draws, aside from flushing the current batch when they're drawn.",
					"name": "flushBatch",
					"variants": [
						[]
					]
				},
				{
					"description": "Gets the current background color.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "getBackgroundColor",
					"variants": [
						{
							"returns": [
								{
									"description": "The red component (0-1).",
									"name": "r",
									"type": "number"
								},
								{
									"description": "The green component (0-1).",
									"name": "g",
									"type": "number"
								},
								{
									"description": "The blue component (0-1).",
									"name": "b",
									"type": "number"
								},
								{
									"description": "The alpha component (0-1).",
									"name": "a",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the blending mode.",
					"name": "getBlendMode",
					"variants": [
						{
							"returns": [
								{
									"description": "The current blend mode.",
									"name": "mode",
									"type": "BlendMode"
								},
								{
									"description": "The current blend alpha mode – it determines how the alpha of drawn objects affects blending.",
									"name": "alphamode",
									"type": "BlendAlphaMode"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current target Canvas.",
					"name": "getCanvas",
					"variants": [
						{
							"returns": [
								{
									"description": "The Canvas set by setCanvas. Returns nil if drawing to the real screen.",
									"name": "canvas",
									"type": "Canvas"
								}
							]
						}
					]
				},
				{
					"description": "Gets the available Canvas formats, and whether each is supported.",
					"name": "getCanvasFormats",
					"variants": [
						{
							"returns": [
								{
									"description": "A table containing CanvasFormats as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.",
									"name": "formats",
									"tabletype": [
										"PixelFormat",
										"boolean"
									],
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "If true, the returned formats will only be indicated as supported if readable flag set to true for that format, and vice versa if the parameter is false.",
									"name": "readable",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "A table containing CanvasFormats as keys, and a boolean indicating whether the format is supported as values (taking into account the readable parameter). Not all systems support all formats.",
									"name": "formats",
									"tabletype": [
										"PixelFormat",
										"boolean"
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current color.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "getColor",
					"variants": [
						{
							"returns": [
								{
									"description": "The red component (0-1).",
									"name": "r",
									"type": "number"
								},
								{
									"description": "The green component (0-1).",
									"name": "g",
									"type": "number"
								},
								{
									"description": "The blue component (0-1).",
									"name": "b",
									"type": "number"
								},
								{
									"description": "The alpha component (0-1).",
									"name": "a",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the active color components used when drawing. Normally all 4 components are active unless love.graphics.setColorMask has been used.\n\nThe color mask determines whether individual components of the colors of drawn objects will affect the color of the screen. They affect love.graphics.clear and Canvas:clear as well.",
					"name": "getColorMask",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether the red color component is active when rendering.",
									"name": "r",
									"type": "boolean"
								},
								{
									"description": "Whether the green color component is active when rendering.",
									"name": "g",
									"type": "boolean"
								},
								{
									"description": "Whether the blue color component is active when rendering.",
									"name": "b",
									"type": "boolean"
								},
								{
									"description": "Whether the alpha color component is active when rendering.",
									"name": "a",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets the DPI scale factor of the window.\n\nThe DPI scale factor represents relative pixel density. The pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.graphics.getDPIScale() would return 2 in that case.\n\nThe love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.\n\nThe highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.",
					"name": "getDPIScale",
					"variants": [
						{
							"description": "The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in DPI-scaled units rather than pixels. In LÖVE 0.10 and older they were in pixels.",
							"returns": [
								{
									"description": "The pixel scale factor associated with the window.",
									"name": "scale",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the default scaling filters used with Images, Canvases, and Fonts.",
					"name": "getDefaultFilter",
					"variants": [
						{
							"returns": [
								{
									"description": "Filter mode used when scaling the image down.",
									"name": "min",
									"type": "FilterMode"
								},
								{
									"description": "Filter mode used when scaling the image up.",
									"name": "mag",
									"type": "FilterMode"
								},
								{
									"description": "Maximum amount of Anisotropic Filtering used.",
									"name": "anisotropy",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current depth test mode and whether writing to the depth buffer is enabled.\n\nThis is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.",
					"name": "getDepthMode",
					"variants": [
						{
							"returns": [
								{
									"description": "Depth comparison mode used for depth testing.",
									"name": "comparemode",
									"type": "CompareMode"
								},
								{
									"description": "Whether to write update / write values to the depth buffer when rendering.",
									"name": "write",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets the width and height in pixels of the window.",
					"name": "getDimensions",
					"variants": [
						{
							"returns": [
								{
									"description": "The width of the window.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the window.",
									"name": "height",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current Font object.",
					"name": "getFont",
					"variants": [
						{
							"returns": [
								{
									"description": "The current Font. Automatically creates and sets the default font, if none is set yet.",
									"name": "font",
									"type": "Font"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.\n\nThis is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.",
					"name": "getFrontFaceWinding",
					"variants": [
						{
							"returns": [
								{
									"description": "The winding mode being used. The default winding is counterclockwise ('ccw').",
									"name": "winding",
									"type": "VertexWinding"
								}
							]
						}
					]
				},
				{
					"description": "Gets the height in pixels of the window.",
					"name": "getHeight",
					"variants": [
						{
							"returns": [
								{
									"description": "The height of the window.",
									"name": "height",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the raw and compressed pixel formats usable for Images, and whether each is supported.",
					"name": "getImageFormats",
					"variants": [
						{
							"returns": [
								{
									"description": "A table containing PixelFormats as keys, and a boolean indicating whether the format is supported as values. Not all systems support all formats.",
									"name": "formats",
									"tabletype": [
										"PixelFormat",
										"boolean"
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the line join style.",
					"name": "getLineJoin",
					"variants": [
						{
							"returns": [
								{
									"description": "The LineJoin style.",
									"name": "join",
									"type": "LineJoin"
								}
							]
						}
					]
				},
				{
					"description": "Gets the line style.",
					"name": "getLineStyle",
					"variants": [
						{
							"returns": [
								{
									"description": "The current line style.",
									"name": "style",
									"type": "LineStyle"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current line width.",
					"name": "getLineWidth",
					"variants": [
						{
							"description": "This function does not work in 0.8.0, but has been fixed in version 0.9.0. Use the following snippet to circumvent this in 0.8.0;\n\nlove.graphics._getLineWidth = love.graphics.getLineWidth\n\nlove.graphics._setLineWidth = love.graphics.setLineWidth\n\nfunction love.graphics.getLineWidth() return love.graphics.varlinewidth or 1 end\n\nfunction love.graphics.setLineWidth(w) love.graphics.varlinewidth = w; return love.graphics._setLineWidth(w) end",
							"returns": [
								{
									"description": "The current line width.",
									"name": "width",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether back-facing triangles in a Mesh are culled.\n\nMesh face culling is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.",
					"name": "getMeshCullMode",
					"variants": [
						{
							"returns": [
								{
									"description": "The Mesh face culling mode in use (whether to render everything, cull back-facing triangles, or cull front-facing triangles).",
									"name": "mode",
									"type": "CullMode"
								}
							]
						}
					]
				},
				{
					"description": "Gets the width and height in pixels of the window.\n\nlove.graphics.getDimensions gets the dimensions of the window in units scaled by the screen's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing to the screen and using the graphics coordinate system (calculating the center of the screen, for example), and getPixelDimensions only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).",
					"name": "getPixelDimensions",
					"variants": [
						{
							"returns": [
								{
									"description": "The width of the window in pixels.",
									"name": "pixelwidth",
									"type": "number"
								},
								{
									"description": "The height of the window in pixels.",
									"name": "pixelheight",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the height in pixels of the window.\n\nThe graphics coordinate system and DPI scale factor, rather than raw pixels. Use getHeight for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelHeight only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).",
					"name": "getPixelHeight",
					"variants": [
						{
							"returns": [
								{
									"description": "The height of the window in pixels.",
									"name": "pixelheight",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the width in pixels of the window.\n\nThe graphics coordinate system and DPI scale factor, rather than raw pixels. Use getWidth for calculations related to drawing to the screen and using the coordinate system (calculating the center of the screen, for example), and getPixelWidth only when dealing specifically with underlying pixels (pixel-related calculations in a pixel Shader, for example).",
					"name": "getPixelWidth",
					"variants": [
						{
							"returns": [
								{
									"description": "The width of the window in pixels.",
									"name": "pixelwidth",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the point size.",
					"name": "getPointSize",
					"variants": [
						{
							"returns": [
								{
									"description": "The current point size.",
									"name": "size",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets information about the system's video card and drivers.",
					"name": "getRendererInfo",
					"variants": [
						{
							"returns": [
								{
									"description": "The name of the renderer, e.g. 'OpenGL' or 'OpenGL ES'.",
									"name": "name",
									"type": "string"
								},
								{
									"description": "The version of the renderer with some extra driver-dependent version info, e.g. '2.1 INTEL-8.10.44'.",
									"name": "version",
									"type": "string"
								},
								{
									"description": "The name of the graphics card vendor, e.g. 'Intel Inc'. ",
									"name": "vendor",
									"type": "string"
								},
								{
									"description": "The name of the graphics card, e.g. 'Intel HD Graphics 3000 OpenGL Engine'.",
									"name": "device",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current scissor box.",
					"name": "getScissor",
					"variants": [
						{
							"returns": [
								{
									"description": "The x-component of the top-left point of the box.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y-component of the top-left point of the box.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The width of the box.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the box.",
									"name": "height",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current Shader. Returns nil if none is set.",
					"name": "getShader",
					"variants": [
						{
							"returns": [
								{
									"description": "The currently active Shader, or nil if none is set.",
									"name": "shader",
									"type": "Shader"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current depth of the transform / state stack (the number of pushes without corresponding pops).",
					"name": "getStackDepth",
					"variants": [
						{
							"returns": [
								{
									"description": "The current depth of the transform and state love.graphics stack.",
									"name": "depth",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets performance-related rendering statistics. ",
					"name": "getStats",
					"variants": [
						{
							"returns": [
								{
									"description": "A table with the following fields:",
									"name": "stats",
									"table": [
										{
											"description": "The number of draw calls made so far during the current frame.",
											"name": "drawcalls",
											"type": "number"
										},
										{
											"description": "The number of times the active Canvas has been switched so far during the current frame.",
											"name": "canvasswitches",
											"type": "number"
										},
										{
											"description": "The estimated total size in bytes of video memory used by all loaded Images, Canvases, and Fonts.",
											"name": "texturememory",
											"type": "number"
										},
										{
											"description": "The number of Image objects currently loaded.",
											"name": "images",
											"type": "number"
										},
										{
											"description": "The number of Canvas objects currently loaded.",
											"name": "canvases",
											"type": "number"
										},
										{
											"description": "The number of Font objects currently loaded.",
											"name": "fonts",
											"type": "number"
										},
										{
											"description": "The number of times the active Shader has been changed so far during the current frame.",
											"name": "shaderswitches",
											"type": "number"
										},
										{
											"description": "The number of draw calls that were saved by LÖVE's automatic batching, since the start of the frame.",
											"name": "drawcallsbatched",
											"type": "number"
										}
									],
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table which will be filled in with the stat fields below.",
									"name": "stats",
									"type": "table"
								}
							],
							"description": "This variant accepts an existing table to fill in, instead of creating a new one.",
							"returns": [
								{
									"description": "The table that was passed in above, now containing the following fields:",
									"name": "stats",
									"table": [
										{
											"description": "The number of draw calls made so far during the current frame.",
											"name": "drawcalls",
											"type": "number"
										},
										{
											"description": "The number of times the active Canvas has been switched so far during the current frame.",
											"name": "canvasswitches",
											"type": "number"
										},
										{
											"description": "The estimated total size in bytes of video memory used by all loaded Images, Canvases, and Fonts.",
											"name": "texturememory",
											"type": "number"
										},
										{
											"description": "The number of Image objects currently loaded.",
											"name": "images",
											"type": "number"
										},
										{
											"description": "The number of Canvas objects currently loaded.",
											"name": "canvases",
											"type": "number"
										},
										{
											"description": "The number of Font objects currently loaded.",
											"name": "fonts",
											"type": "number"
										},
										{
											"description": "The number of times the active Shader has been changed so far during the current frame.",
											"name": "shaderswitches",
											"type": "number"
										},
										{
											"description": "The number of draw calls that were saved by LÖVE's automatic batching, since the start of the frame.",
											"name": "drawcallsbatched",
											"type": "number"
										}
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current stencil test configuration.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.\n\nEach Canvas has its own per-pixel stencil values.",
					"name": "getStencilTest",
					"variants": [
						{
							"returns": [
								{
									"description": "The type of comparison that is made for each pixel. Will be 'always' if stencil testing is disabled.",
									"name": "comparemode",
									"type": "CompareMode"
								},
								{
									"description": "The value used when comparing with the stencil value of each pixel.",
									"name": "comparevalue",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the optional graphics features and whether they're supported on the system.\n\nSome older or low-end systems don't always support all graphics features.",
					"name": "getSupported",
					"variants": [
						{
							"returns": [
								{
									"description": "A table containing GraphicsFeature keys, and boolean values indicating whether each feature is supported.",
									"name": "features",
									"tabletype": [
										"GraphicsFeature",
										"boolean"
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the system-dependent maximum values for love.graphics features.",
					"name": "getSystemLimits",
					"variants": [
						{
							"returns": [
								{
									"description": "A table containing GraphicsLimit keys, and number values.",
									"name": "limits",
									"tabletype": [
										"GraphicsLimit",
										"number"
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the available texture types, and whether each is supported.",
					"name": "getTextureTypes",
					"variants": [
						{
							"returns": [
								{
									"description": "A table containing TextureTypes as keys, and a boolean indicating whether the type is supported as values. Not all systems support all types.",
									"name": "texturetypes",
									"tabletype": [
										"TextureType",
										"boolean"
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the width in pixels of the window.",
					"name": "getWidth",
					"variants": [
						{
							"returns": [
								{
									"description": "The width of the window.",
									"name": "width",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the scissor to the rectangle created by the intersection of the specified rectangle with the existing scissor.  If no scissor is active yet, it behaves like love.graphics.setScissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear.\n\nThe dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).",
					"name": "intersectScissor",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y-coordinate of the upper left corner of the rectangle to intersect with the existing scissor rectangle.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The width of the rectangle to intersect with the existing scissor rectangle.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the rectangle to intersect with the existing scissor rectangle.",
									"name": "height",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Converts the given 2D position from screen-space into global coordinates.\n\nThis effectively applies the reverse of the current graphics transformations to the given position. A similar Transform:inverseTransformPoint method exists for Transform objects.",
					"name": "inverseTransformPoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x component of the screen-space position.",
									"name": "screenX",
									"type": "number"
								},
								{
									"description": "The y component of the screen-space position.",
									"name": "screenY",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The x component of the position in global coordinates.",
									"name": "globalX",
									"type": "number"
								},
								{
									"description": "The y component of the position in global coordinates.",
									"name": "globalY",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether the graphics module is able to be used. If it is not active, love.graphics function and method calls will not work correctly and may cause the program to crash.\nThe graphics module is inactive if a window is not open, or if the app is in the background on iOS. Typically the app's execution will be automatically paused by the system, in the latter case.",
					"name": "isActive",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether the graphics module is active and able to be used.",
									"name": "active",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether gamma-correct rendering is supported and enabled. It can be enabled by setting t.gammacorrect = true in love.conf.\n\nNot all devices support gamma-correct rendering, in which case it will be automatically disabled and this function will return false. It is supported on desktop systems which have graphics cards that are capable of using OpenGL 3 / DirectX 10, and iOS devices that can use OpenGL ES 3.",
					"name": "isGammaCorrect",
					"variants": [
						{
							"description": "When gamma-correct rendering is enabled, many functions and objects perform automatic color conversion between sRGB and linear RGB in order for blending and shader math to be mathematically correct (which they aren't if it's not enabled.)\n\n* The colors passed into converted from sRGB to linear RGB.\n\n* The colors set in text with per-character colors, points with per-point colors, standard custom Meshes which use the 'VertexColor' attribute name will automatically be converted from sRGB to linear RGB when those objects are drawn.\n\n* creating the Image.\n\n* Everything drawn to the screen will be blended in linear RGB and then the result will be converted to sRGB for display.\n\n* Canvases which use the 'normal' or 'srgb' CanvasFormat will have their content blended in linear RGB and the result will be stored in the canvas in sRGB, when drawing to them. When the Canvas itself is drawn, its pixel colors will be converted from sRGB to linear RGB in the same manner as Images. Keeping the canvas pixel data stored as sRGB allows for better precision (less banding) for darker colors compared to 'rgba8'.\n\nBecause most conversions are automatically handled, your own code doesn't need to worry about sRGB and linear RGB color conversions when gamma-correct rendering is enabled, except in a couple cases:\n\n* If a Mesh with custom vertex attributes is used and one of the attributes is meant to be used as a color in a Shader, and the attribute isn't named 'VertexColor'.\n\n* If  a Shader is used which has uniform / extern variables or other variables that are meant to be used as colors, and Shader:sendColor isn't used.\n\nIn both cases, love.math.gammaToLinear can be used to convert color values to linear RGB in Lua code, or the gammaCorrectColor (or unGammaCorrectColor if necessary) shader functions can be used inside shader code. Those shader functions ''only'' do conversions if gamma-correct rendering is actually enabled. The LOVE_GAMMA_CORRECT shader preprocessor define will be set if so.\n\nRead more about gamma-correct rendering here, here, and here.",
							"returns": [
								{
									"description": "True if gamma-correct rendering is supported and was enabled in love.conf, false otherwise.",
									"name": "gammacorrect",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether wireframe mode is used when drawing.",
					"name": "isWireframe",
					"variants": [
						{
							"returns": [
								{
									"description": "True if wireframe lines are used when drawing, false if it's not.",
									"name": "wireframe",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Draws lines between points.",
					"name": "line",
					"variants": [
						{
							"arguments": [
								{
									"description": "The position of first point on the x-axis.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The position of first point on the y-axis.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The position of second point on the x-axis.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The position of second point on the y-axis.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "You can continue passing point positions to draw a polyline.",
									"name": "...",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "A table of point positions, as described above.",
									"name": "points",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new array Image.\n\nAn array image / array texture is a single object which contains multiple 'layers' or 'slices' of 2D sub-images. It can be thought of similarly to a texture atlas or sprite sheet, but it doesn't suffer from the same tile / quad bleeding artifacts that texture atlases do – although every sub-image must have the same dimensions.\n\nA specific layer of an array image can be drawn with love.graphics.drawLayer / SpriteBatch:addLayer, or with the Quad variant of love.graphics.draw and Quad:setLayer, or via a custom Shader.\n\nTo use an array image in a Shader, it must be declared as a ArrayImage or sampler2DArray type (instead of Image or sampler2D). The Texel(ArrayImage image, vec3 texturecoord) shader function must be used to get pixel colors from a slice of the array image. The vec3 argument contains the texture coordinate in the first two components, and the 0-based slice index in the third component.",
					"name": "newArrayImage",
					"variants": [
						{
							"arguments": [
								{
									"description": "A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each sub-image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the slice index of that sub-table.",
									"name": "slices",
									"type": "table"
								},
								{
									"default": "nil",
									"description": "Optional table of settings to configure the array image, containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "false",
											"description": "True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format.",
											"name": "mipmaps",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										},
										{
											"default": "1",
											"description": "The DPI scale to use when drawing the array image and calling getWidth/getHeight.",
											"name": "dpiscale",
											"type": "number"
										}
									],
									"type": "table"
								}
							],
							"description": "Creates an array Image given a different image file for each slice of the resulting array image object.\n\nIllustration of how an array image works: [http://codeflow.org/entries/2010/dec/09/minecraft-like-rendering-experiments-in-opengl-4/illustrations/textures.jpg]\n\nA DPI scale of 2 (double the normal pixel density) will result in the image taking up the same space on-screen as an image with half its pixel dimensions that has a DPI scale of 1. This allows for easily swapping out image assets that take the same space on-screen but have different pixel densities, which makes supporting high-dpi / retina resolution require less code logic.\n\nIn order to use an Array Texture or other non-2D texture types as the main texture in a custom void effect() variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: uniform ArrayImage MainTex;.",
							"returns": [
								{
									"description": "An Array Image object.",
									"name": "image",
									"type": "Image"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Canvas object for offscreen rendering.",
					"name": "newCanvas",
					"variants": [
						{
							"returns": [
								{
									"description": "A new Canvas with dimensions equal to the window's size in pixels.",
									"name": "canvas",
									"type": "Canvas"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The desired width of the Canvas.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The desired height of the Canvas.",
									"name": "height",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new Canvas with specified width and height.",
									"name": "canvas",
									"type": "Canvas"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The desired width of the Canvas.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The desired height of the Canvas.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "A table containing the given fields:",
									"name": "settings",
									"table": [
										{
											"default": "'2d'",
											"description": "The type of Canvas to create.",
											"name": "type",
											"type": "TextureType"
										},
										{
											"default": "'normal'",
											"description": "The format of the Canvas.",
											"name": "format",
											"type": "PixelFormat"
										},
										{
											"description": "Whether the Canvas is readable (drawable and accessible in a Shader). True by default for regular formats, false by default for depth/stencil formats.",
											"name": "readable",
											"type": "boolean"
										},
										{
											"default": "0",
											"description": "The desired number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.",
											"name": "msaa",
											"type": "number"
										},
										{
											"default": "love.graphics.getDPIScale()",
											"description": "The DPI scale factor of the Canvas, used when drawing to the Canvas as well as when drawing the Canvas to the screen.",
											"name": "dpiscale",
											"type": "number"
										},
										{
											"default": "'none'",
											"description": "Whether the Canvas has mipmaps, and whether to automatically regenerate them if so.",
											"name": "mipmaps",
											"type": "MipmapMode"
										}
									],
									"type": "table"
								}
							],
							"description": "Creates a 2D or cubemap Canvas using the given settings.\n\nSome Canvas formats have higher system requirements than the default format. Use love.graphics.getCanvasFormats to check for support.",
							"returns": [
								{
									"description": "A new Canvas with specified width and height.",
									"name": "canvas",
									"type": "Canvas"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The desired width of the Canvas.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The desired height of the Canvas.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The number of array layers (if the Canvas is an Array Texture), or the volume depth (if the Canvas is a Volume Texture).",
									"name": "layers",
									"type": "number"
								},
								{
									"description": "A table containing the given fields:",
									"name": "settings",
									"table": [
										{
											"default": "'array'",
											"description": "The type of Canvas to create.",
											"name": "type",
											"type": "TextureType"
										},
										{
											"default": "'normal'",
											"description": "The format of the Canvas.",
											"name": "format",
											"type": "PixelFormat"
										},
										{
											"description": "Whether the Canvas is readable (drawable and accessible in a Shader). True by default for regular formats, false by default for depth/stencil formats.",
											"name": "readable",
											"type": "boolean"
										},
										{
											"default": "0",
											"description": "The desired number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.",
											"name": "msaa",
											"type": "number"
										},
										{
											"default": "love.graphics.getDPIScale()",
											"description": "The DPI scale factor of the Canvas, used when drawing to the Canvas as well as when drawing the Canvas to the screen.",
											"name": "dpiscale",
											"type": "number"
										},
										{
											"default": "'none'",
											"description": "Whether the Canvas has mipmaps, and whether to automatically regenerate them if so.",
											"name": "mipmaps",
											"type": "MipmapMode"
										}
									],
									"type": "table"
								}
							],
							"description": "Creates a volume or array texture-type Canvas.",
							"returns": [
								{
									"description": "A new Canvas with specified width and height.",
									"name": "canvas",
									"type": "Canvas"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new cubemap Image.\n\nCubemap images have 6 faces (sides) which represent a cube. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).\n\nTo use a cubemap image in a Shader, it must be declared as a CubeImage or samplerCube type (instead of Image or sampler2D). The Texel(CubeImage image, vec3 direction) shader function must be used to get pixel colors from the cubemap. The vec3 argument is a normalized direction from the center of the cube, rather than explicit texture coordinates.\n\nEach face in a cubemap image must have square dimensions.\n\nFor variants of this function which accept a single image containing multiple cubemap faces, they must be laid out in one of the following forms in the image:\n\n   +y\n\n+z +x -z\n\n   -y\n\n   -x\n\nor:\n\n   +y\n\n-x +z +x -z\n\n   -y\n\nor:\n\n+x\n\n-x\n\n+y\n\n-y\n\n+z\n\n-z\n\nor:\n\n+x -x +y -y +z -z",
					"name": "newCubeImage",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filepath to a cubemap image file (or a File, FileData, or ImageData).",
									"name": "filename",
									"type": "string"
								},
								{
									"default": "nil",
									"description": "Optional table of settings to configure the cubemap image, containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "false",
											"description": "True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format.",
											"name": "mipmaps",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"description": "Creates a cubemap Image given a single image file containing multiple cube faces.",
							"returns": [
								{
									"description": "An cubemap Image object.",
									"name": "image",
									"type": "Image"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table containing 6 filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. Each face image must have the same dimensions. A table of tables can also be given, where each sub-table contains all mipmap levels for the cube face index of that sub-table.",
									"name": "faces",
									"type": "table"
								},
								{
									"default": "nil",
									"description": "Optional table of settings to configure the cubemap image, containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "false",
											"description": "True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format.",
											"name": "mipmaps",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"description": "Creates a cubemap Image given a different image file for each cube face.",
							"returns": [
								{
									"description": "An cubemap Image object.",
									"name": "image",
									"type": "Image"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Font from a TrueType Font or BMFont file. Created fonts are not cached, in that calling this function with the same arguments will always create a new Font object.\n\nAll variants which accept a filename can also accept a Data object instead.",
					"name": "newFont",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filepath to the BMFont or TrueType font file.",
									"name": "filename",
									"type": "string"
								}
							],
							"description": "Create a new BMFont or TrueType font.\n\nIf the file is a TrueType font, it will be size 12. Use the variant below to create a TrueType font with a custom size.",
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The filepath to the TrueType font file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "The size of the font in pixels.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.graphics.getDPIScale()",
									"description": "The DPI scale factor of the font.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a new TrueType font.",
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The filepath to the BMFont file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "The filepath to the BMFont's image file. If this argument is omitted, the path specified inside the BMFont file will be used.",
									"name": "imagefilename",
									"type": "string"
								}
							],
							"description": "Create a new BMFont.",
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"default": "12",
									"description": "The size of the font in pixels.",
									"name": "size",
									"type": "number"
								},
								{
									"default": "'normal'",
									"description": "True Type hinting mode.",
									"name": "hinting",
									"type": "HintingMode"
								},
								{
									"default": "love.graphics.getDPIScale()",
									"description": "The DPI scale factor of the font.",
									"name": "dpiscale",
									"type": "number"
								}
							],
							"description": "Create a new instance of the default font (Vera Sans) with a custom size.",
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Image from a filepath, FileData, an ImageData, or a CompressedImageData, and optionally generates or specifies mipmaps for the image.",
					"name": "newImage",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filepath to the image file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "A table containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "1",
											"description": "The DPI scale to use when drawing the image and calling getWidth/getHeight.",
											"name": "dpiscale",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "If true, mipmaps for the image will be automatically generated (or taken from the images's file if possible, if the image originated from a CompressedImageData).",
											"name": "mipmaps",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A new Image object which can be drawn on screen.",
									"name": "image",
									"type": "Image"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The FileData containing image file.",
									"name": "fileData",
									"type": "FileData"
								},
								{
									"description": "A table containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "1",
											"description": "The DPI scale to use when drawing the image and calling getWidth/getHeight.",
											"name": "dpiscale",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "If true, mipmaps for the image will be automatically generated (or taken from the images's file if possible, if the image originated from a CompressedImageData).",
											"name": "mipmaps",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A new Image object which can be drawn on screen.",
									"name": "image",
									"type": "Image"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The ImageData containing image.",
									"name": "imageData",
									"type": "ImageData"
								},
								{
									"description": "A table containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "1",
											"description": "The DPI scale to use when drawing the image and calling getWidth/getHeight.",
											"name": "dpiscale",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "If true, mipmaps for the image will be automatically generated (or taken from the images's file if possible, if the image originated from a CompressedImageData).",
											"name": "mipmaps",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A new Image object which can be drawn on screen.",
									"name": "image",
									"type": "Image"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A CompressedImageData object. The Image will use this CompressedImageData to reload itself when love.window.setMode is called.",
									"name": "compressedImageData",
									"type": "CompressedImageData"
								},
								{
									"description": "A table containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "1",
											"description": "The DPI scale to use when drawing the image and calling getWidth/getHeight.",
											"name": "dpiscale",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "If true, mipmaps for the image will be automatically generated (or taken from the images's file if possible, if the image originated from a CompressedImageData).",
											"name": "mipmaps",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A new Image object which can be drawn on screen.",
									"name": "image",
									"type": "Image"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new specifically formatted image.\n\nIn versions prior to 0.9.0, LÖVE expects ISO 8859-1 encoding for the glyphs string.",
					"name": "newImageFont",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filepath to the image file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "A string of the characters in the image in order from left to right.",
									"name": "glyphs",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The ImageData object to create the font from.",
									"name": "imageData",
									"type": "ImageData"
								},
								{
									"description": "A string of the characters in the image in order from left to right.",
									"name": "glyphs",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The filepath to the image file.",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "A string of the characters in the image in order from left to right.",
									"name": "glyphs",
									"type": "string"
								},
								{
									"description": "Additional spacing (positive or negative) to apply to each glyph in the Font.",
									"name": "extraspacing",
									"type": "number"
								}
							],
							"description": "Instead of using this function, consider using a BMFont generator such as bmfont, littera, or bmGlyph with love.graphics.newFont. Because slime said it was better.",
							"returns": [
								{
									"description": "A Font object which can be used to draw text on screen.",
									"name": "font",
									"type": "Font"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Mesh.\n\nUse Mesh:setTexture if the Mesh should be textured with an Image or Canvas when it's drawn.\n\nIn versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "newMesh",
					"variants": [
						{
							"arguments": [
								{
									"description": "The table filled with vertex information tables for each vertex as follows:",
									"name": "vertices",
									"table": [
										{
											"description": "The position of the vertex on the x-axis.",
											"name": "1",
											"type": "number"
										},
										{
											"description": "The position of the vertex on the y-axis.",
											"name": "2",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The u texture coordinate of the vertex. Texture coordinates are normally in the range of 1, but can be greater or less (see WrapMode.)",
											"name": "3",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The v texture coordinate of the vertex. Texture coordinates are normally in the range of 1, but can be greater or less (see WrapMode.)",
											"name": "4",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The red component of the vertex color.",
											"name": "5",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The green component of the vertex color.",
											"name": "6",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The blue component of the vertex color.",
											"name": "7",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The alpha component of the vertex color.",
											"name": "8",
											"type": "number"
										}
									],
									"tablearray": "",
									"type": "table"
								},
								{
									"default": "'fan'",
									"description": "How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.",
									"name": "mode",
									"type": "MeshDrawMode"
								},
								{
									"default": "'dynamic'",
									"description": "The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.",
									"name": "usage",
									"type": "SpriteBatchUsage"
								}
							],
							"description": "Creates a standard Mesh with the specified vertices.",
							"returns": [
								{
									"description": "The new mesh.",
									"name": "mesh",
									"type": "Mesh"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The total number of vertices the Mesh will use. Each vertex is initialized to {0,0, 0,0, 1,1,1,1}.",
									"name": "vertexcount",
									"type": "number"
								},
								{
									"default": "'fan'",
									"description": "How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.",
									"name": "mode",
									"type": "MeshDrawMode"
								},
								{
									"default": "'dynamic'",
									"description": "The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.",
									"name": "usage",
									"type": "SpriteBatchUsage"
								}
							],
							"description": "Creates a standard Mesh with the specified number of vertices.\n\nMesh:setVertices or Mesh:setVertex and Mesh:setDrawRange can be used to specify vertex information once the Mesh is created.",
							"returns": [
								{
									"description": "The new mesh.",
									"name": "mesh",
									"type": "Mesh"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table in the form of {attribute, ...}. Each attribute is a table which specifies a custom vertex attribute used for each vertex.",
									"name": "vertexformat",
									"table": [
										{
											"description": "A table containing the attribute's name, it's data type, and the number of components in the attribute, in the form of {name, datatype, components}.",
											"name": "attribute",
											"type": "table"
										},
										{
											"description": "Additional vertex attribute format tables.",
											"name": "...",
											"type": "table"
										}
									],
									"type": "table"
								},
								{
									"description": "The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.",
									"name": "vertices",
									"table": [
										{
											"description": "The first component of the first vertex attribute in the vertex.",
											"name": "attributecomponent",
											"type": "number"
										},
										{
											"description": "Additional components of all vertex attributes in the vertex.",
											"name": "...",
											"type": "number"
										}
									],
									"type": "table"
								},
								{
									"default": "'fan'",
									"description": "How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.",
									"name": "mode",
									"type": "MeshDrawMode"
								},
								{
									"default": "'dynamic'",
									"description": "The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.",
									"name": "usage",
									"type": "SpriteBatchUsage"
								}
							],
							"description": "Creates a Mesh with custom vertex attributes and the specified vertex data.\n\nThe values in each vertex table are in the same order as the vertex attributes in the specified vertex format. If no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 1 if its data type is 'byte'.\n\nIf the data type of an attribute is 'float', components can be in the range 1 to 4, if the data type is 'byte' it must be 4.\n\nIf a custom vertex attribute uses the name 'VertexPosition', 'VertexTexCoord', or 'VertexColor', then the vertex data for that vertex attribute will be used for the standard vertex positions, texture coordinates, or vertex colors respectively, when drawing the Mesh. Otherwise a Vertex Shader is required in order to make use of the vertex attribute when the Mesh is drawn.\n\nA Mesh '''must''' have a 'VertexPosition' attribute in order to be drawn, but it can be attached from a different Mesh via Mesh:attachAttribute.\n\nTo use a custom named vertex attribute in a Vertex Shader, it must be declared as an attribute variable of the same name. Variables can be sent from Vertex Shader code to Pixel Shader code by making a varying variable. For example:\n\n''Vertex Shader code''\n\nattribute vec2 CoolVertexAttribute;\n\nvarying vec2 CoolVariable;\n\nvec4 position(mat4 transform_projection, vec4 vertex_position)\n\n{\n\n    CoolVariable = CoolVertexAttribute;\n\n    return transform_projection * vertex_position;\n\n}\n\n''Pixel Shader code''\n\nvarying vec2 CoolVariable;\n\nvec4 effect(vec4 color, Image tex, vec2 texcoord, vec2 pixcoord)\n\n{\n\n    vec4 texcolor = Texel(tex, texcoord + CoolVariable);\n\n    return texcolor * color;\n\n}",
							"returns": [
								{
									"description": "The new mesh.",
									"name": "mesh",
									"type": "Mesh"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table in the form of {attribute, ...}. Each attribute is a table which specifies a custom vertex attribute used for each vertex.",
									"name": "vertexformat",
									"table": [
										{
											"description": "A table containing the attribute's name, it's data type, and the number of components in the attribute, in the form of {name, datatype, components}.",
											"name": "attribute",
											"type": "table"
										},
										{
											"description": "Additional vertex attribute format tables.",
											"name": "...",
											"type": "table"
										}
									],
									"type": "table"
								},
								{
									"description": "The total number of vertices the Mesh will use.",
									"name": "vertexcount",
									"type": "number"
								},
								{
									"default": "'fan'",
									"description": "How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.",
									"name": "mode",
									"type": "MeshDrawMode"
								},
								{
									"default": "'dynamic'",
									"description": "The expected usage of the Mesh. The specified usage mode affects the Mesh's memory usage and performance.",
									"name": "usage",
									"type": "SpriteBatchUsage"
								}
							],
							"description": "Creates a Mesh with custom vertex attributes and the specified number of vertices.\n\nEach vertex attribute component is initialized to 0 if its data type is 'float', or 1 if its data type is 'byte'. Vertex Shader is required in order to make use of the vertex attribute when the Mesh is drawn.\n\nA Mesh '''must''' have a 'VertexPosition' attribute in order to be drawn, but it can be attached from a different Mesh via Mesh:attachAttribute.",
							"returns": [
								{
									"description": "The new mesh.",
									"name": "mesh",
									"type": "Mesh"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The total number of vertices the Mesh will use. Each vertex is initialized to {0,0, 0,0, 255,255,255,255}.",
									"name": "vertexcount",
									"type": "number"
								},
								{
									"default": "nil",
									"description": "The Image or Canvas to use when drawing the Mesh. May be nil to use no texture.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"default": "'fan'",
									"description": "How the vertices are used when drawing. The default mode 'fan' is sufficient for simple convex polygons.",
									"name": "mode",
									"type": "MeshDrawMode"
								}
							],
							"description": "Mesh:setVertices or Mesh:setVertex and Mesh:setDrawRange can be used to specify vertex information once the Mesh is created.",
							"returns": [
								{
									"description": "The new mesh.",
									"name": "mesh",
									"type": "Mesh"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new ParticleSystem.",
					"name": "newParticleSystem",
					"variants": [
						{
							"arguments": [
								{
									"description": "The image to use.",
									"name": "image",
									"type": "Image"
								},
								{
									"default": "1000",
									"description": "The max number of particles at the same time.",
									"name": "buffer",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new ParticleSystem.",
									"name": "system",
									"type": "ParticleSystem"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The texture (Image or Canvas) to use.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"default": "1000",
									"description": "The max number of particles at the same time.",
									"name": "buffer",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new ParticleSystem.",
									"name": "system",
									"type": "ParticleSystem"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Quad.\n\nThe purpose of a Quad is to use a fraction of an image to draw objects, as opposed to drawing entire image. It is most useful for sprite sheets and atlases: in a sprite atlas, multiple sprites reside in same image, quad is used to draw a specific sprite from that image; in animated sprites with all frames residing in the same image, quad is used to draw specific frame from the animation.",
					"name": "newQuad",
					"variants": [
						{
							"arguments": [
								{
									"description": "The top-left position in the Image along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The top-left position in the Image along the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The width of the Quad in the Image. (Must be greater than 0.)",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the Quad in the Image. (Must be greater than 0.)",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The reference width, the width of the Image. (Must be greater than 0.)",
									"name": "sw",
									"type": "number"
								},
								{
									"description": "The reference height, the height of the Image. (Must be greater than 0.)",
									"name": "sh",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new Quad.",
									"name": "quad",
									"type": "Quad"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The top-left position in the Image along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The top-left position in the Image along the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The width of the Quad in the Image. (Must be greater than 0.)",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the Quad in the Image. (Must be greater than 0.)",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The texture whose width and height will be used as the reference width and height.",
									"name": "texture",
									"type": "Texture"
								}
							],
							"returns": [
								{
									"description": "The new Quad.",
									"name": "quad",
									"type": "Quad"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Shader object for hardware-accelerated vertex and pixel effects. A Shader contains either vertex shader code, pixel shader code, or both.\n\nShaders are small programs which are run on the graphics card when drawing. Vertex shaders are run once for each vertex (for example, an image has 4 vertices - one at each corner. A Mesh might have many more.) Pixel shaders are run once for each pixel on the screen which the drawn object touches. Pixel shader code is executed after all the object's vertices have been processed by the vertex shader.",
					"name": "newShader",
					"variants": [
						{
							"arguments": [
								{
									"description": "The pixel shader or vertex shader code, or a filename pointing to a file with the code.",
									"name": "code",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A Shader object for use in drawing operations.",
									"name": "shader",
									"type": "Shader"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The pixel shader code, or a filename pointing to a file with the code.",
									"name": "pixelcode",
									"type": "string"
								},
								{
									"description": "The vertex shader code, or a filename pointing to a file with the code.",
									"name": "vertexcode",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A Shader object for use in drawing operations.",
									"name": "shader",
									"type": "Shader"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new SpriteBatch object.",
					"name": "newSpriteBatch",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Image to use for the sprites.",
									"name": "image",
									"type": "Image"
								},
								{
									"default": "1000",
									"description": "The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.",
									"name": "maxsprites",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new SpriteBatch.",
									"name": "spriteBatch",
									"type": "SpriteBatch"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The Image to use for the sprites.",
									"name": "image",
									"type": "Image"
								},
								{
									"default": "1000",
									"description": "The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.",
									"name": "maxsprites",
									"type": "number"
								},
								{
									"default": "'dynamic'",
									"description": "The expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.",
									"name": "usage",
									"type": "SpriteBatchUsage"
								}
							],
							"returns": [
								{
									"description": "The new SpriteBatch.",
									"name": "spriteBatch",
									"type": "SpriteBatch"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The Image or Canvas to use for the sprites.",
									"name": "texture",
									"type": "Texture"
								},
								{
									"default": "1000",
									"description": "The maximum number of sprites that the SpriteBatch can contain at any given time. Since version 11.0, additional sprites added past this number will automatically grow the spritebatch.",
									"name": "maxsprites",
									"type": "number"
								},
								{
									"default": "'dynamic'",
									"description": "The expected usage of the SpriteBatch. The specified usage mode affects the SpriteBatch's memory usage and performance.",
									"name": "usage",
									"type": "SpriteBatchUsage"
								}
							],
							"returns": [
								{
									"description": "The new SpriteBatch.",
									"name": "spriteBatch",
									"type": "SpriteBatch"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new drawable Text object.",
					"name": "newText",
					"variants": [
						{
							"arguments": [
								{
									"description": "The font to use for the text.",
									"name": "font",
									"type": "Font"
								},
								{
									"default": "nil",
									"description": "The initial string of text that the new Text object will contain. May be nil.",
									"name": "textstring",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The new drawable Text object.",
									"name": "text",
									"type": "Text"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The font to use for the text.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "Variant"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "The new drawable Text object.",
									"name": "text",
									"type": "Text"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new drawable Video. Currently only Ogg Theora video files are supported.",
					"name": "newVideo",
					"variants": [
						{
							"arguments": [
								{
									"description": "The file path to the Ogg Theora video file.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A new Video.",
									"name": "video",
									"type": "Video"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A video stream object.",
									"name": "videostream",
									"type": "VideoStream"
								}
							],
							"returns": [
								{
									"description": "A new Video.",
									"name": "video",
									"type": "Video"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The file path to the Ogg Theora video file (or VideoStream).",
									"name": "filename",
									"type": "string"
								},
								{
									"description": "A table containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "false",
											"description": "Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.",
											"name": "audio",
											"type": "boolean"
										},
										{
											"default": "love.graphics.getDPIScale()",
											"description": "The DPI scale factor of the video.",
											"name": "dpiscale",
											"type": "number"
										}
									],
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A new Video.",
									"name": "video",
									"type": "Video"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The file path to the Ogg Theora video file.",
									"name": "filename",
									"type": "string"
								},
								{
									"default": "nil",
									"description": "Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.",
									"name": "loadaudio",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "A new Video.",
									"name": "video",
									"type": "Video"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A video stream object.",
									"name": "videostream",
									"type": "VideoStream"
								},
								{
									"default": "nil",
									"description": "Whether to try to load the video's audio into an audio Source. If not explicitly set to true or false, it will try without causing an error if the video has no audio.",
									"name": "loadaudio",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "A new Video.",
									"name": "video",
									"type": "Video"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new volume (3D) Image.\n\nVolume images are 3D textures with width, height, and depth. They can't be rendered directly, they can only be used in Shader code (and sent to the shader via Shader:send).\n\nTo use a volume image in a Shader, it must be declared as a VolumeImage or sampler3D type (instead of Image or sampler2D). The Texel(VolumeImage image, vec3 texcoords) shader function must be used to get pixel colors from the volume image. The vec3 argument is a normalized texture coordinate with the z component representing the depth to sample at (ranging from 1).\n\nVolume images are typically used as lookup tables in shaders for color grading, for example, because sampling using a texture coordinate that is partway in between two pixels can interpolate across all 3 dimensions in the volume image, resulting in a smooth gradient even when a small-sized volume image is used as the lookup table.\n\nArray images are a much better choice than volume images for storing multiple different sprites in a single array image for directly drawing them.",
					"name": "newVolumeImage",
					"variants": [
						{
							"arguments": [
								{
									"description": "A table containing filepaths to images (or File, FileData, ImageData, or CompressedImageData objects), in an array. A table of tables can also be given, where each sub-table represents a single mipmap level and contains all layers for that mipmap.",
									"name": "layers",
									"type": "table"
								},
								{
									"default": "nil",
									"description": "Optional table of settings to configure the volume image, containing the following fields:",
									"name": "settings",
									"table": [
										{
											"default": "false",
											"description": "True to make the image use mipmaps, false to disable them. Mipmaps will be automatically generated if the image isn't a compressed texture format.",
											"name": "mipmaps",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "True to treat the image's pixels as linear instead of sRGB, when gamma correct rendering is enabled. Most images are authored as sRGB.",
											"name": "linear",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"description": "Creates a volume Image given multiple image files with matching dimensions.\n\nVolume images are not supported on some older mobile devices. Use love.graphics.getTextureTypes to check at runtime.",
							"returns": [
								{
									"description": "A volume Image object.",
									"name": "image",
									"type": "Image"
								}
							]
						}
					]
				},
				{
					"description": "Resets the current coordinate transformation.\n\nThis function is always used to reverse any previous calls to love.graphics.rotate, love.graphics.scale, love.graphics.shear or love.graphics.translate. It returns the current transformation state to its defaults.",
					"name": "origin",
					"variants": [
						[]
					]
				},
				{
					"description": "Draws one or more points.",
					"name": "points",
					"variants": [
						{
							"arguments": [
								{
									"description": "The position of the first point on the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the first point on the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The x and y coordinates of additional points.",
									"name": "...",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "A table containing multiple point positions, in the form of {x, y, ...}.",
									"name": "points",
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table containing multiple individually colored points, in the form of {point, ...}.",
									"name": "points",
									"table": [
										{
											"description": "A table containing the position and color of the first point, in the form of {x, y, r, g, b, a}. The color components are optional.",
											"name": "point",
											"type": "table"
										},
										{
											"description": "Additional tables containing the position and color of more points, in the form of {x, y, r, g, b, a}. The color components are optional.",
											"name": "...",
											"type": "table"
										}
									],
									"type": "table"
								}
							],
							"description": "Draws one or more individually colored points.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.\n\nThe pixel grid is actually offset to the center of each pixel. So to get clean pixels drawn use 0.5 + integer increments.\n\nPoints are not affected by size is always in pixels."
						}
					]
				},
				{
					"description": "Draw a polygon.\n\nFollowing the mode argument, this function can accept multiple numeric arguments or a single table of numeric arguments. In either case the arguments are interpreted as alternating x and y coordinates of the polygon's vertices.",
					"name": "polygon",
					"variants": [
						{
							"arguments": [
								{
									"description": "How to draw the polygon.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The vertices of the polygon.",
									"name": "...",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "How to draw the polygon.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"arraytype": "number",
									"description": "The vertices of the polygon as a table.",
									"name": "vertices",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Pops the current coordinate transformation from the transformation stack.\n\nThis function is always used to reverse a previous push operation. It returns the current transformation state to what it was before the last preceding push.",
					"name": "pop",
					"variants": [
						[]
					]
				},
				{
					"description": "Displays the results of drawing operations on the screen.\n\nThis function is used when writing your own love.run function. It presents all the results of your drawing operations on the screen. See the example in love.run for a typical use of this function.",
					"name": "present",
					"variants": [
						{
							"description": "* If love.window.setMode has vsync equal to true, this function can't run more frequently than the refresh rate (e.g. 60 Hz), and will halt the program until ready if necessary."
						}
					]
				},
				{
					"description": "Draws text on screen. If no Font is set, one will be created and set (once) if needed.\n\nAs of LOVE 0.7.1, when using translation and scaling functions while drawing text, this function assumes the scale occurs first.  If you don't script with this in mind, the text won't be in the right position, or possibly even on screen.\n\nlove.graphics.print and love.graphics.printf both support UTF-8 encoding. You'll also need a proper Font for special characters.\n\nIn versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "print",
					"variants": [
						{
							"arguments": [
								{
									"description": "The text to draw.",
									"name": "text",
									"type": "string"
								},
								{
									"default": "0",
									"description": "The position to draw the object (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position to draw the object (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"default": "0",
									"description": "The position of the text on the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The position of the text on the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The orientation of the text in radians.",
									"name": "angle",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor on the x-axis.",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor on the y-axis.",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset on the x-axis.",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset on the y-axis.",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing / skew factor on the x-axis.",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing / skew factor on the y-axis.",
									"name": "ky",
									"type": "number"
								}
							],
							"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text."
						},
						{
							"arguments": [
								{
									"description": "The text to draw.",
									"name": "text",
									"type": "string"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								}
							],
							"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text."
						},
						{
							"arguments": [
								{
									"description": "The text to draw.",
									"name": "text",
									"type": "string"
								},
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								}
							],
							"description": ""
						}
					]
				},
				{
					"description": "Draws formatted text, with word wrap and alignment.\n\nSee additional notes in love.graphics.print.\n\nThe word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.\n\nIn version 0.9.2 and earlier, wrapping was implemented by breaking up words by spaces and putting them back together to make sure things fit nicely within the limit provided. However, due to the way this is done, extra spaces between words would end up missing when printed on the screen, and some lines could overflow past the provided wrap limit. In version 0.10.0 and newer this is no longer the case.\n\nIn versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "printf",
					"variants": [
						{
							"arguments": [
								{
									"description": "A text string.",
									"name": "text",
									"type": "string"
								},
								{
									"description": "The position on the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position on the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A text string.",
									"name": "text",
									"type": "string"
								},
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "The position on the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position on the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "r",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A text string.",
									"name": "text",
									"type": "string"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A text string.",
									"name": "text",
									"type": "string"
								},
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"description": "The position of the text (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the text (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The maximum width in pixels of the text before it gets automatically wrapped to a new line.",
									"name": "limit",
									"type": "number"
								},
								{
									"description": "The alignment of the text.",
									"name": "align",
									"type": "AlignMode"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "angle",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing / skew factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing / skew factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							],
							"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text."
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "The position on the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position on the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								},
								{
									"default": "0",
									"description": "Orientation (radians).",
									"name": "angle",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor (x-axis).",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor (y-axis).",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (x-axis).",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset (y-axis).",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (x-axis).",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing factor (y-axis).",
									"name": "ky",
									"type": "number"
								}
							],
							"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text."
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								}
							],
							"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text."
						},
						{
							"arguments": [
								{
									"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
									"name": "coloredtext",
									"table": [
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color1",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string1",
											"type": "string"
										},
										{
											"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
											"name": "color2",
											"type": "table"
										},
										{
											"description": "A string of text which has a color specified by the previous color.",
											"name": "string2",
											"type": "string"
										},
										{
											"description": "Additional colors and strings.",
											"name": "...",
											"type": "tables and strings"
										}
									],
									"type": "table"
								},
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								},
								{
									"description": "Transformation object.",
									"name": "transform",
									"type": "Transform"
								},
								{
									"description": "Wrap the line after this many horizontal pixels.",
									"name": "limit",
									"type": "number"
								},
								{
									"default": "'left'",
									"description": "The alignment.",
									"name": "align",
									"type": "AlignMode"
								}
							],
							"description": ""
						}
					]
				},
				{
					"description": "Copies and pushes the current coordinate transformation to the transformation stack.\n\nThis function is always used to prepare for a corresponding pop operation later. It stores the current coordinate transformation state into the transformation stack and keeps it active. Later changes to the transformation can be undone by using the pop operation, which returns the coordinate transform to the state it was in before calling push.",
					"name": "push",
					"variants": [
						{
							"description": "Pushes the current transformation to the transformation stack."
						},
						{
							"arguments": [
								{
									"description": "The type of stack to push (e.g. just transformation state, or all love.graphics state).",
									"name": "stack",
									"type": "StackType"
								}
							],
							"description": "Pushes a specific type of state to the stack."
						}
					]
				},
				{
					"description": "Draws a rectangle.",
					"name": "rectangle",
					"variants": [
						{
							"arguments": [
								{
									"description": "How to draw the rectangle.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The position of top-left corner along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of top-left corner along the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Width of the rectangle.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "Height of the rectangle.",
									"name": "height",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "How to draw the rectangle.",
									"name": "mode",
									"type": "DrawMode"
								},
								{
									"description": "The position of top-left corner along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of top-left corner along the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Width of the rectangle.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "Height of the rectangle.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The x-axis radius of each round corner. Cannot be greater than half the rectangle's width.",
									"name": "rx",
									"type": "number"
								},
								{
									"default": "rx",
									"description": "The y-axis radius of each round corner. Cannot be greater than half the rectangle's height.",
									"name": "ry",
									"type": "number"
								},
								{
									"default": "nil",
									"description": "The number of segments used for drawing the round corners. A default amount will be chosen if no number is given.",
									"name": "segments",
									"type": "number"
								}
							],
							"description": "Draws a rectangle with rounded corners."
						}
					]
				},
				{
					"description": "Replaces the current coordinate transformation with the given Transform object.",
					"name": "replaceTransform",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Transform object to replace the current graphics coordinate transform with.",
									"name": "transform",
									"type": "Transform"
								}
							]
						}
					]
				},
				{
					"description": "Resets the current graphics settings.\n\nCalling reset makes the current drawing color white, the current background color black, disables any active color component masks, disables wireframe mode and resets the current graphics transformation to the origin. It also sets both the point and line drawing modes to smooth and their sizes to 1.0.",
					"name": "reset",
					"variants": [
						[]
					]
				},
				{
					"description": "Rotates the coordinate system in two dimensions.\n\nCalling this function affects all future drawing operations by rotating the coordinate system around the origin by the given amount of radians. This change lasts until love.draw() exits.",
					"name": "rotate",
					"variants": [
						{
							"arguments": [
								{
									"description": "The amount to rotate the coordinate system in radians.",
									"name": "angle",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Scales the coordinate system in two dimensions.\n\nBy default the coordinate system in LÖVE corresponds to the display pixels in horizontal and vertical directions one-to-one, and the x-axis increases towards the right while the y-axis increases downwards. Scaling the coordinate system changes this relation.\n\nAfter scaling by sx and sy, all coordinates are treated as if they were multiplied by sx and sy. Every result of a drawing operation is also correspondingly scaled, so scaling by (2, 2) for example would mean making everything twice as large in both x- and y-directions. Scaling by a negative value flips the coordinate system in the corresponding direction, which also means everything will be drawn flipped or upside down, or both. Scaling by zero is not a useful operation.\n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nScaling lasts until love.draw() exits.",
					"name": "scale",
					"variants": [
						{
							"arguments": [
								{
									"description": "The scaling in the direction of the x-axis.",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "The scaling in the direction of the y-axis. If omitted, it defaults to same as parameter sx.",
									"name": "sy",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the background color.",
					"name": "setBackgroundColor",
					"variants": [
						{
							"arguments": [
								{
									"description": "The red component (0-1).",
									"name": "red",
									"type": "number"
								},
								{
									"description": "The green component (0-1).",
									"name": "green",
									"type": "number"
								},
								{
									"description": "The blue component (0-1).",
									"name": "blue",
									"type": "number"
								},
								{
									"default": "1",
									"description": "The alpha component (0-1).",
									"name": "alpha",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "A numerical indexed table with the red, green, blue and alpha values as numbers. The alpha is optional and defaults to 1 if it is left out.",
									"name": "rgba",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Sets the blending mode.",
					"name": "setBlendMode",
					"variants": [
						{
							"arguments": [
								{
									"description": "The blend mode to use.",
									"name": "mode",
									"type": "BlendMode"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The blend mode to use.",
									"name": "mode",
									"type": "BlendMode"
								},
								{
									"default": "'alphamultiply'",
									"description": "What to do with the alpha of drawn objects when blending.",
									"name": "alphamode",
									"type": "BlendAlphaMode"
								}
							],
							"description": "The default 'alphamultiply' alpha mode should normally be preferred except when drawing content with pre-multiplied alpha. If content is drawn to a Canvas using the 'alphamultiply' mode, the Canvas texture will have pre-multiplied alpha afterwards, so the 'premultiplied' alpha mode should generally be used when drawing a Canvas to the screen."
						}
					]
				},
				{
					"description": "Captures drawing operations to a Canvas.",
					"name": "setCanvas",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new target.",
									"name": "canvas",
									"type": "Canvas"
								},
								{
									"default": "1",
									"description": "The mipmap level to render to, for Canvases with mipmaps.",
									"name": "mipmap",
									"type": "number"
								}
							],
							"description": "Sets the render target to a specified stencil or depth testing with an active Canvas, the stencil buffer or depth buffer must be explicitly enabled in setCanvas via the variants below.\n\nNote that no canvas should be active when ''love.graphics.present'' is called. ''love.graphics.present'' is called at the end of love.draw in the default love.run, hence if you activate a canvas using this function, you normally need to deactivate it at some point before ''love.draw'' finishes."
						},
						{
							"description": "Resets the render target to the screen, i.e. re-enables drawing to the screen."
						},
						{
							"arguments": [
								{
									"description": "The first render target.",
									"name": "canvas1",
									"type": "Canvas"
								},
								{
									"description": "The second render target.",
									"name": "canvas2",
									"type": "Canvas"
								},
								{
									"description": "More canvases.",
									"name": "...",
									"type": "Canvas"
								}
							],
							"description": "Sets the render target to multiple simultaneous 2D Canvases. All drawing operations until the next ''love.graphics.setCanvas'' call will be redirected to the specified canvases and not shown on the screen.\n\nNormally all drawing operations will draw only to the first canvas passed to the function, but that can be changed if a pixel shader is used with the void effect function instead of the regular vec4 effect.\n\nAll canvas arguments must have the same widths and heights and the same texture type. Not all computers which support Canvases will support multiple render targets. If love.graphics.isSupported('multicanvas') returns true, at least 4 simultaneously active canvases are supported."
						},
						{
							"arguments": [
								{
									"description": "The new render target.",
									"name": "canvas",
									"type": "Canvas"
								},
								{
									"description": "For cubemaps this is the cube face index to render to (between 1 and 6). For Array textures this is the array layer. For volume textures this is the depth slice. 2D canvases should use a value of 1.",
									"name": "slice",
									"type": "number"
								},
								{
									"default": "1",
									"description": "The mipmap level to render to, for Canvases with mipmaps.",
									"name": "mipmap",
									"type": "number"
								}
							],
							"description": "Sets the render target to the specified layer/slice and mipmap level of the given non-2D Canvas. All drawing operations until the next ''love.graphics.setCanvas'' call will be redirected to the Canvas and not shown on the screen."
						},
						{
							"arguments": [
								{
									"description": "A table specifying the active Canvas(es), their mipmap levels and active layers if applicable, and whether to use a stencil and/or depth buffer.",
									"name": "setup",
									"table": [
										{
											"description": "The Canvas to render to.",
											"name": "1",
											"type": "RenderTargetSetup"
										},
										{
											"default": "nil",
											"description": "An additional Canvas to render to, if multiple simultaneous render targets are wanted.",
											"name": "2",
											"type": "RenderTargetSetup"
										},
										{
											"description": "Additional Canvases to render to, if multiple simultaneous render targets are wanted.",
											"name": "...",
											"type": "RenderTargetSetup"
										},
										{
											"default": "false",
											"description": "Whether an internally managed stencil buffer should be used, if the depthstencil field isn't set.",
											"name": "stencil",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "Whether an internally managed depth buffer should be used, if the depthstencil field isn't set.",
											"name": "depth",
											"type": "boolean"
										},
										{
											"default": "nil",
											"description": "An optional custom depth/stencil formatted Canvas to use for the depth and/or stencil buffer.",
											"name": "depthstencil",
											"type": "RenderTargetSetup"
										}
									],
									"type": "table"
								}
							],
							"description": "Sets the active render target(s) and active stencil and depth buffers based on the specified setup information. All drawing operations until the next ''love.graphics.setCanvas'' call will be redirected to the specified Canvases and not shown on the screen.\n\nThe RenderTargetSetup parameters can either be a Canvas|[1]|The Canvas to use for this active render target.}}\n\n{{param|number|mipmap (1)|The mipmap level to render to, for Canvases with [[Texture:getMipmapCount|mipmaps.}}\n\n{{param|number|layer (1)|Only used for Volume and Array-type Canvases. For Array textures this is the array layer to render to. For volume textures this is the depth slice.}}\n\n{{param|number|face (1)|Only used for Cubemap-type Canvases. The cube face index to render to (between 1 and 6)}}"
						}
					]
				},
				{
					"description": "Sets the color used for drawing.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "setColor",
					"variants": [
						{
							"arguments": [
								{
									"description": "The amount of red.",
									"name": "red",
									"type": "number"
								},
								{
									"description": "The amount of green.",
									"name": "green",
									"type": "number"
								},
								{
									"description": "The amount of blue.",
									"name": "blue",
									"type": "number"
								},
								{
									"default": "1",
									"description": "The amount of alpha.  The alpha value will be applied to all subsequent draw operations, even the drawing of an image.",
									"name": "alpha",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "A numerical indexed table with the red, green, blue and alpha values as numbers. The alpha is optional and defaults to 1 if it is left out.",
									"name": "rgba",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Sets the color mask. Enables or disables specific color components when rendering and clearing the screen. For example, if '''red''' is set to '''false''', no further changes will be made to the red component of any pixels.",
					"name": "setColorMask",
					"variants": [
						{
							"arguments": [
								{
									"description": "Render red component.",
									"name": "red",
									"type": "boolean"
								},
								{
									"description": "Render green component.",
									"name": "green",
									"type": "boolean"
								},
								{
									"description": "Render blue component.",
									"name": "blue",
									"type": "boolean"
								},
								{
									"description": "Render alpha component.",
									"name": "alpha",
									"type": "boolean"
								}
							],
							"description": "Enables color masking for the specified color components."
						},
						{
							"description": "Disables color masking."
						}
					]
				},
				{
					"description": "Sets the default scaling filters used with Images, Canvases, and Fonts.",
					"name": "setDefaultFilter",
					"variants": [
						{
							"arguments": [
								{
									"description": "Filter mode used when scaling the image down.",
									"name": "min",
									"type": "FilterMode"
								},
								{
									"default": "min",
									"description": "Filter mode used when scaling the image up.",
									"name": "mag",
									"type": "FilterMode"
								},
								{
									"default": "1",
									"description": "Maximum amount of Anisotropic Filtering used.",
									"name": "anisotropy",
									"type": "number"
								}
							],
							"description": "This function does not apply retroactively to loaded images."
						}
					]
				},
				{
					"description": "Configures depth testing and writing to the depth buffer.\n\nThis is low-level functionality designed for use with custom vertex shaders and Meshes with custom vertex attributes. No higher level APIs are provided to set the depth of 2D graphics such as shapes, lines, and Images.",
					"name": "setDepthMode",
					"variants": [
						{
							"arguments": [
								{
									"description": "Depth comparison mode used for depth testing.",
									"name": "comparemode",
									"type": "CompareMode"
								},
								{
									"description": "Whether to write update / write values to the depth buffer when rendering.",
									"name": "write",
									"type": "boolean"
								}
							]
						},
						{
							"description": "Disables depth testing and depth writes."
						}
					]
				},
				{
					"description": "Set an already-loaded Font as the current font or create and load a new one from the file and size.\n\nIt's recommended that Font objects are created with love.graphics.newFont in the loading stage and then passed to this function in the drawing stage.",
					"name": "setFont",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Font object to use.",
									"name": "font",
									"type": "Font"
								}
							]
						}
					]
				},
				{
					"description": "Sets whether triangles with clockwise- or counterclockwise-ordered vertices are considered front-facing.\n\nThis is designed for use in combination with Mesh face culling. Other love.graphics shapes, lines, and sprites are not guaranteed to have a specific winding order to their internal vertices.",
					"name": "setFrontFaceWinding",
					"variants": [
						{
							"arguments": [
								{
									"description": "The winding mode to use. The default winding is counterclockwise ('ccw').",
									"name": "winding",
									"type": "VertexWinding"
								}
							]
						}
					]
				},
				{
					"description": "Sets the line join style. See LineJoin for the possible options.",
					"name": "setLineJoin",
					"variants": [
						{
							"arguments": [
								{
									"description": "The LineJoin to use.",
									"name": "join",
									"type": "LineJoin"
								}
							]
						}
					]
				},
				{
					"description": "Sets the line style.",
					"name": "setLineStyle",
					"variants": [
						{
							"arguments": [
								{
									"description": "The LineStyle to use. Line styles include smooth and rough.",
									"name": "style",
									"type": "LineStyle"
								}
							]
						}
					]
				},
				{
					"description": "Sets the line width.",
					"name": "setLineWidth",
					"variants": [
						{
							"arguments": [
								{
									"description": "The width of the line.",
									"name": "width",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets whether back-facing triangles in a Mesh are culled.\n\nThis is designed for use with low level custom hardware-accelerated 3D rendering via custom vertex attributes on Meshes, custom vertex shaders, and depth testing with a depth buffer.\n\nBy default, both front- and back-facing triangles in Meshes are rendered.",
					"name": "setMeshCullMode",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Mesh face culling mode to use (whether to render everything, cull back-facing triangles, or cull front-facing triangles).",
									"name": "mode",
									"type": "CullMode"
								}
							]
						}
					]
				},
				{
					"description": "Creates and sets a new Font.",
					"name": "setNewFont",
					"variants": [
						{
							"arguments": [
								{
									"default": "12",
									"description": "The size of the font.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new font.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The path and name of the file with the font.",
									"name": "filename",
									"type": "string"
								},
								{
									"default": "12",
									"description": "The size of the font.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new font.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A File with the font.",
									"name": "file",
									"type": "File"
								},
								{
									"default": "12",
									"description": "The size of the font.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new font.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A Data with the font.",
									"name": "data",
									"type": "Data"
								},
								{
									"default": "12",
									"description": "The size of the font.",
									"name": "size",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new font.",
									"name": "font",
									"type": "Font"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A rasterizer.",
									"name": "rasterizer",
									"type": "Rasterizer"
								}
							],
							"returns": [
								{
									"description": "The new font.",
									"name": "font",
									"type": "Font"
								}
							]
						}
					]
				},
				{
					"description": "Sets the point size.",
					"name": "setPointSize",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new point size.",
									"name": "size",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets or disables scissor.\n\nThe scissor limits the drawing area to a specified rectangle. This affects all graphics calls, including love.graphics.clear. \n\nThe dimensions of the scissor is unaffected by graphical transformations (translate, scale, ...).",
					"name": "setScissor",
					"variants": [
						{
							"arguments": [
								{
									"description": "x coordinate of upper left corner.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "y coordinate of upper left corner.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "width of clipping rectangle.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "height of clipping rectangle.",
									"name": "height",
									"type": "number"
								}
							],
							"description": "Limits the drawing area to a specified rectangle. "
						},
						{
							"description": "Disables scissor."
						}
					]
				},
				{
					"description": "Sets or resets a Shader as the current pixel effect or vertex shaders. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified.",
					"name": "setShader",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new shader.",
									"name": "shader",
									"type": "Shader"
								}
							],
							"description": "Sets the current shader to a specified Shader. All drawing operations until the next ''love.graphics.setShader'' will be drawn using the Shader object specified."
						},
						{
							"description": "Disables shaders, allowing unfiltered drawing operations."
						}
					]
				},
				{
					"description": "Configures or disables stencil testing.\n\nWhen stencil testing is enabled, the geometry of everything that is drawn afterward will be clipped / stencilled out based on a comparison between the arguments of this function and the stencil value of each pixel that the geometry touches. The stencil values of pixels are affected via love.graphics.stencil.",
					"name": "setStencilTest",
					"variants": [
						{
							"arguments": [
								{
									"description": "The type of comparison to make for each pixel.",
									"name": "comparemode",
									"type": "CompareMode"
								},
								{
									"description": "The value to use when comparing with the stencil value of each pixel. Must be between 0 and 255.",
									"name": "comparevalue",
									"type": "number"
								}
							]
						},
						{
							"description": "Disables stencil testing."
						}
					]
				},
				{
					"description": "Sets whether wireframe lines will be used when drawing.",
					"name": "setWireframe",
					"variants": [
						{
							"arguments": [
								{
									"description": "True to enable wireframe mode when drawing, false to disable it.",
									"name": "enable",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Shears the coordinate system.",
					"name": "shear",
					"variants": [
						{
							"arguments": [
								{
									"description": "The shear factor on the x-axis.",
									"name": "kx",
									"type": "number"
								},
								{
									"description": "The shear factor on the y-axis.",
									"name": "ky",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Draws geometry as a stencil.\n\nThe geometry drawn by the supplied function sets invisible stencil values of pixels, instead of setting pixel colors. The stencil buffer (which contains those stencil values) can act like a mask / stencil - love.graphics.setStencilTest can be used afterward to determine how further rendering is affected by the stencil values in each pixel.\n\nStencil values are integers within the range of 255.",
					"name": "stencil",
					"variants": [
						{
							"arguments": [
								{
									"description": "Function which draws geometry. The stencil values of pixels, rather than the color of each pixel, will be affected by the geometry.",
									"name": "stencilfunction",
									"type": "function"
								},
								{
									"default": "'replace'",
									"description": "How to modify any stencil values of pixels that are touched by what's drawn in the stencil function.",
									"name": "action",
									"type": "StencilAction"
								},
								{
									"default": "1",
									"description": "The new stencil value to use for pixels if the 'replace' stencil action is used. Has no effect with other stencil actions. Must be between 0 and 255.",
									"name": "value",
									"type": "number"
								},
								{
									"default": "false",
									"description": "True to preserve old stencil values of pixels, false to re-set every pixel's stencil value to 0 before executing the stencil function. love.graphics.clear will also re-set all stencil values.",
									"name": "keepvalues",
									"type": "boolean"
								}
							],
							"description": "It is possible to draw to the screen and to the stencil values of pixels at the same time, by using love.graphics.setColorMask inside the stencil function to enable drawing to all color components."
						}
					]
				},
				{
					"description": "Converts the given 2D position from global coordinates into screen-space.\n\nThis effectively applies the current graphics transformations to the given position. A similar Transform:transformPoint method exists for Transform objects.",
					"name": "transformPoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x component of the position in global coordinates.",
									"name": "globalX",
									"type": "number"
								},
								{
									"description": "The y component of the position in global coordinates.",
									"name": "globalY",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The x component of the position with graphics transformations applied.",
									"name": "screenX",
									"type": "number"
								},
								{
									"description": "The y component of the position with graphics transformations applied.",
									"name": "screenY",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Translates the coordinate system in two dimensions.\n\nWhen this function is called with two numbers, dx, and dy, all the following drawing operations take effect as if their x and y coordinates were x+dx and y+dy. \n\nScale and translate are not commutative operations, therefore, calling them in different orders will change the outcome.\n\nThis change lasts until love.draw() exits or else a love.graphics.pop reverts to a previous love.graphics.push.\n\nTranslating using whole numbers will prevent tearing/blurring of images and fonts draw after translating.",
					"name": "translate",
					"variants": [
						{
							"arguments": [
								{
									"description": "The translation relative to the x-axis.",
									"name": "dx",
									"type": "number"
								},
								{
									"description": "The translation relative to the y-axis.",
									"name": "dy",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Validates shader code. Check if specified shader code does not contain any errors.",
					"name": "validateShader",
					"variants": [
						{
							"arguments": [
								{
									"description": "Validate code as GLSL ES shader.",
									"name": "gles",
									"type": "boolean"
								},
								{
									"description": "The pixel shader or vertex shader code, or a filename pointing to a file with the code.",
									"name": "code",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "true if specified shader code doesn't contain any errors. false otherwise.",
									"name": "status",
									"type": "boolean"
								},
								{
									"description": "Reason why shader code validation failed (or nil if validation succeded).",
									"name": "message",
									"type": "string"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Validate code as GLSL ES shader.",
									"name": "gles",
									"type": "boolean"
								},
								{
									"description": "The pixel shader code, or a filename pointing to a file with the code.",
									"name": "pixelcode",
									"type": "string"
								},
								{
									"description": "The vertex shader code, or a filename pointing to a file with the code.",
									"name": "vertexcode",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "true if specified shader code doesn't contain any errors. false otherwise.",
									"name": "status",
									"type": "boolean"
								},
								{
									"description": "Reason why shader code validation failed (or nil if validation succeded).",
									"name": "message",
									"type": "string"
								}
							]
						}
					]
				}
			],
			"name": "graphics",
			"types": [
				{
					"constructors": [
						"newCanvas",
						"getCanvas"
					],
					"description": "A Canvas is used for off-screen rendering. Think of it as an invisible screen that you can draw to, but that will not be visible until you draw it to the actual visible screen. It is also known as \"render to texture\".\n\nBy drawing things that do not change position often (such as background items) to the Canvas, and then drawing the entire Canvas instead of each item,  you can reduce the number of draw operations performed each frame.\n\nIn versions prior to love.graphics.isSupported(\"canvas\") could be used to check for support at runtime.",
					"functions": [
						{
							"description": "Generates mipmaps for the Canvas, based on the contents of the highest-resolution mipmap level.\n\nThe Canvas must be created with mipmaps set to a MipmapMode other than 'none' for this function to work. It should only be called while the Canvas is not the active render target.\n\nIf the mipmap mode is set to 'auto', this function is automatically called inside love.graphics.setCanvas when switching from this Canvas to another Canvas or to the main screen.",
							"name": "generateMipmaps",
							"variants": [
								[]
							]
						},
						{
							"description": "Gets the number of multisample antialiasing (MSAA) samples used when drawing to the Canvas.\n\nThis may be different than the number used as an argument to love.graphics.newCanvas if the system running LÖVE doesn't support that number.",
							"name": "getMSAA",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of multisample antialiasing samples used by the canvas when drawing to it.",
											"name": "samples",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the MipmapMode this Canvas was created with.",
							"name": "getMipmapMode",
							"variants": [
								{
									"returns": [
										{
											"description": "The mipmap mode this Canvas was created with.",
											"name": "mode",
											"type": "MipmapMode"
										}
									]
								}
							]
						},
						{
							"description": "Generates ImageData from the contents of the Canvas.",
							"name": "newImageData",
							"variants": [
								{
									"returns": [
										{
											"description": "The new ImageData made from the Canvas' contents.",
											"name": "data",
											"type": "ImageData"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The cubemap face index, array index, or depth layer for cubemap, array, or volume type Canvases, respectively. This argument is ignored for regular 2D canvases.",
											"name": "slice",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The mipmap index to use, for Canvases with mipmaps.",
											"name": "mipmap",
											"type": "number"
										},
										{
											"description": "The x-axis of the top-left corner (in pixels) of the area within the Canvas to capture.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-axis of the top-left corner (in pixels) of the area within the Canvas to capture.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The width in pixels of the area within the Canvas to capture.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height in pixels of the area within the Canvas to capture.",
											"name": "height",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The new ImageData made from the Canvas' contents.",
											"name": "data",
											"type": "ImageData"
										}
									]
								}
							]
						},
						{
							"description": "Render to the Canvas using a function.\n\nThis is a shortcut to love.graphics.setCanvas:\n\ncanvas:renderTo( func )\n\nis the same as\n\nlove.graphics.setCanvas( canvas )\n\nfunc()\n\nlove.graphics.setCanvas()",
							"name": "renderTo",
							"variants": [
								{
									"arguments": [
										{
											"description": "A function performing drawing operations.",
											"name": "func",
											"signature": {
												"arguments": [
													{
														"description": "Additional arguments passed.",
														"name": "...",
														"type": "any"
													}
												]
											},
											"type": "function"
										},
										{
											"description": "Additional arguments to call the function with.",
											"name": "...",
											"type": "any"
										}
									]
								}
							]
						}
					],
					"name": "Canvas",
					"supertypes": [
						"Texture",
						"Drawable",
						"Object"
					]
				},
				{
					"description": "Superclass for all things that can be drawn on screen. This is an abstract type that can't be created directly.",
					"functions": [],
					"name": "Drawable",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"getFont",
						"newFont",
						"setNewFont",
						"newImageFont"
					],
					"description": "Defines the shape of characters that can be drawn onto the screen.",
					"functions": [
						{
							"description": "Gets the ascent of the Font.\n\nThe ascent spans the distance between the baseline and the top of the glyph that reaches farthest from the baseline.",
							"name": "getAscent",
							"variants": [
								{
									"returns": [
										{
											"description": "The ascent of the Font in pixels.",
											"name": "ascent",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the baseline of the Font.\n\nMost scripts share the notion of a baseline: an imaginary horizontal line on which characters rest. In some scripts, parts of glyphs lie below the baseline.",
							"name": "getBaseline",
							"variants": [
								{
									"returns": [
										{
											"description": "The baseline of the Font in pixels.",
											"name": "baseline",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the DPI scale factor of the Font.\n\nThe DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the font's glyphs have twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a font with a DPI scale factor of 1.\n\nThe font size of TrueType fonts is scaled internally by the font's specified DPI scale factor. By default, LÖVE uses the screen's DPI scale factor when creating TrueType fonts.",
							"name": "getDPIScale",
							"variants": [
								{
									"returns": [
										{
											"description": "The DPI scale factor of the Font.",
											"name": "dpiscale",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the descent of the Font.\n\nThe descent spans the distance between the baseline and the lowest descending glyph in a typeface.",
							"name": "getDescent",
							"variants": [
								{
									"returns": [
										{
											"description": "The descent of the Font in pixels.",
											"name": "descent",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the filter mode for a font.",
							"name": "getFilter",
							"variants": [
								{
									"returns": [
										{
											"description": "Filter mode used when minifying the font.",
											"name": "min",
											"type": "FilterMode"
										},
										{
											"description": "Filter mode used when magnifying the font.",
											"name": "mag",
											"type": "FilterMode"
										},
										{
											"description": "Maximum amount of anisotropic filtering used.",
											"name": "anisotropy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height of the Font.\n\nThe height of the font is the size including any spacing; the height which it will need.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the Font in pixels.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the kerning between two characters in the Font.\n\nKerning is normally handled automatically in love.graphics.print, Text objects, Font:getWidth, Font:getWrap, etc. This function is useful when stitching text together manually.",
							"name": "getKerning",
							"variants": [
								{
									"arguments": [
										{
											"description": "The left character.",
											"name": "leftchar",
											"type": "string"
										},
										{
											"description": "The right character.",
											"name": "rightchar",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "The kerning amount to add to the spacing between the two characters. May be negative.",
											"name": "kerning",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The unicode number for the left glyph.",
											"name": "leftglyph",
											"type": "number"
										},
										{
											"description": "The unicode number for the right glyph.",
											"name": "rightglyph",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The kerning amount to add to the spacing between the two characters. May be negative.",
											"name": "kerning",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the line height.\n\nThis will be the value previously set by Font:setLineHeight, or 1.0 by default.",
							"name": "getLineHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The current line height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Determines the maximum width (accounting for newlines) taken by the given string.",
							"name": "getWidth",
							"variants": [
								{
									"arguments": [
										{
											"description": "A string.",
											"name": "text",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "The width of the text.",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets formatting information for text, given a wrap limit.\n\nThis function accounts for newlines correctly (i.e. '\\n').",
							"name": "getWrap",
							"variants": [
								{
									"arguments": [
										{
											"description": "The text that will be wrapped.",
											"name": "text",
											"type": "string"
										},
										{
											"description": "The maximum width in pixels of each line that ''text'' is allowed before wrapping.",
											"name": "wraplimit",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The maximum width of the wrapped text.",
											"name": "width",
											"type": "number"
										},
										{
											"arraytype": "string",
											"description": "A sequence containing each line of text that was wrapped.",
											"name": "wrappedtext",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Font can render a character or string.",
							"name": "hasGlyphs",
							"variants": [
								{
									"arguments": [
										{
											"description": "A UTF-8 encoded unicode string.",
											"name": "text",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "Whether the font can render all the UTF-8 characters in the string.",
											"name": "hasglyph",
											"type": "boolean"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A unicode character.",
											"name": "character1",
											"type": "string"
										},
										{
											"description": "Another unicode character.",
											"name": "character2",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "Whether the font can render all the glyphs represented by the characters.",
											"name": "hasglyph",
											"type": "boolean"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A unicode codepoint number.",
											"name": "codepoint1",
											"type": "number"
										},
										{
											"description": "Another unicode codepoint number.",
											"name": "codepoint2",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Whether the font can render all the glyphs represented by the codepoint numbers.",
											"name": "hasglyph",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the fallback fonts. When the Font doesn't contain a glyph, it will substitute the glyph from the next subsequent fallback Fonts. This is akin to setting a 'font stack' in Cascading Style Sheets (CSS).",
							"name": "setFallbacks",
							"variants": [
								{
									"arguments": [
										{
											"description": "The first fallback Font to use.",
											"name": "fallbackfont1",
											"type": "Font"
										},
										{
											"description": "Additional fallback Fonts.",
											"name": "...",
											"type": "Font"
										}
									],
									"description": "If this is called it should be before love.graphics.print, Font:getWrap, and other Font methods which use glyph positioning information are called.\n\nEvery fallback Font must be created from the same file type as the primary Font. For example, a Font created from a .ttf file can only use fallback Fonts that were created from .ttf files."
								}
							]
						},
						{
							"description": "Sets the filter mode for a font.",
							"name": "setFilter",
							"variants": [
								{
									"arguments": [
										{
											"description": "How to scale a font down.",
											"name": "min",
											"type": "FilterMode"
										},
										{
											"description": "How to scale a font up.",
											"name": "mag",
											"type": "FilterMode"
										},
										{
											"default": "1",
											"description": "Maximum amount of anisotropic filtering used.",
											"name": "anisotropy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the line height.\n\nWhen rendering the font in lines the actual height will be determined by the line height multiplied by the height of the font. The default is 1.0.",
							"name": "setLineHeight",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new line height.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Font",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newImage",
						"newVolumeImage",
						"newCubeImage",
						"newArrayImage"
					],
					"description": "Drawable image type.",
					"functions": [
						{
							"description": "Gets whether the Image was created from CompressedData.\n\nCompressed images take up less space in VRAM, and drawing a compressed image will generally be more efficient than drawing one created from raw pixel data.",
							"name": "isCompressed",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Image is stored as a compressed texture on the GPU.",
											"name": "compressed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Image was created with the linear (non-gamma corrected) flag set to true.\n\nThis method always returns false when gamma-correct rendering is not enabled.",
							"name": "isFormatLinear",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Image's internal pixel format is linear (not gamma corrected), when gamma-correct rendering is enabled.",
											"name": "linear",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Replace the contents of an Image.",
							"name": "replacePixels",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new ImageData to replace the contents with.",
											"name": "data",
											"type": "ImageData"
										},
										{
											"default": "1",
											"description": "Which cubemap face, array index, or volume layer to replace, if applicable.",
											"name": "slice",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The mimap level to replace, if the Image has mipmaps.",
											"name": "mipmap",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The x-offset in pixels from the top-left of the image to replace. The given ImageData's width plus this value must not be greater than the pixel width of the Image's specified mipmap level.",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The y-offset in pixels from the top-left of the image to replace. The given ImageData's height plus this value must not be greater than the pixel height of the Image's specified mipmap level.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "false",
											"description": "Whether to generate new mipmaps after replacing the Image's pixels. True by default if the Image was created with automatically generated mipmaps, false by default otherwise.",
											"name": "reloadmipmaps",
											"type": "boolean"
										}
									]
								}
							]
						}
					],
					"name": "Image",
					"supertypes": [
						"Texture",
						"Drawable",
						"Object"
					]
				},
				{
					"constructors": [
						"newMesh"
					],
					"description": "A 2D polygon mesh used for drawing arbitrary textured shapes.",
					"functions": [
						{
							"description": "Attaches a vertex attribute from a different Mesh onto this Mesh, for use when drawing. This can be used to share vertex attribute data between several different Meshes.",
							"name": "attachAttribute",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the vertex attribute to attach.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "The Mesh to get the vertex attribute from.",
											"name": "mesh",
											"type": "Mesh"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The name of the vertex attribute to attach.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "The Mesh to get the vertex attribute from.",
											"name": "mesh",
											"type": "Mesh"
										},
										{
											"default": "'pervertex'",
											"description": "Whether the attribute will be per-vertex or per-instance when the mesh is drawn.",
											"name": "step",
											"type": "VertexAttributeStep"
										},
										{
											"default": "name",
											"description": "The name of the attribute to use in shader code. Defaults to the name of the attribute in the given mesh. Can be used to use a different name for this attribute when rendering.",
											"name": "attachname",
											"type": "string"
										}
									],
									"description": "If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor.\n\nCustom named attributes can be accessed in a vertex shader by declaring them as attribute vec4 MyCustomAttributeName; at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the name argument of Mesh:attachAttribute."
								}
							]
						},
						{
							"description": "Removes a previously attached vertex attribute from this Mesh.",
							"name": "detachAttribute",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the attached vertex attribute to detach.",
											"name": "name",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "Whether the attribute was successfully detached.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Immediately sends all modified vertex data in the Mesh to the graphics card.\n\nNormally it isn't necessary to call this method as love.graphics.draw(mesh, ...) will do it automatically if needed, but explicitly using **Mesh:flush** gives more control over when the work happens.\n\nIf this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(mesh, ...) calls.",
							"name": "flush",
							"variants": [
								[]
							]
						},
						{
							"description": "Gets the mode used when drawing the Mesh.",
							"name": "getDrawMode",
							"variants": [
								{
									"returns": [
										{
											"description": "The mode used when drawing the Mesh.",
											"name": "mode",
											"type": "MeshDrawMode"
										}
									]
								}
							]
						},
						{
							"description": "Gets the range of vertices used when drawing the Mesh.",
							"name": "getDrawRange",
							"variants": [
								{
									"description": "If the Mesh's draw range has not been set previously with Mesh:setDrawRange, this function will return nil.",
									"returns": [
										{
											"description": "The index of the first vertex used when drawing, or the index of the first value in the vertex map used if one is set for this Mesh.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The index of the last vertex used when drawing, or the index of the last value in the vertex map used if one is set for this Mesh.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the texture (Image or Canvas) used when drawing the Mesh.",
							"name": "getTexture",
							"variants": [
								{
									"returns": [
										{
											"description": "The Image or Canvas to texture the Mesh with when drawing, or nil if none is set.",
											"name": "texture",
											"type": "Texture"
										}
									]
								}
							]
						},
						{
							"description": "Gets the properties of a vertex in the Mesh.\n\nIn versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "getVertex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The one-based index of the vertex you want to retrieve the information for.",
											"name": "index",
											"type": "number"
										}
									],
									"description": "The values are returned in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will return two position numbers, two texture coordinate numbers, and four color components: x, y, u, v, r, g, b, a.",
									"returns": [
										{
											"description": "The first component of the first vertex attribute in the specified vertex.",
											"name": "attributecomponent",
											"type": "number"
										},
										{
											"description": "Additional components of all vertex attributes in the specified vertex.",
											"name": "...",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The index of the vertex you want to retrieve the information for.",
											"name": "index",
											"type": "number"
										}
									],
									"description": "Gets the vertex components of a Mesh that wasn't created with a custom vertex format.",
									"returns": [
										{
											"description": "The position of the vertex on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the vertex on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The horizontal component of the texture coordinate.",
											"name": "u",
											"type": "number"
										},
										{
											"description": "The vertical component of the texture coordinate.",
											"name": "v",
											"type": "number"
										},
										{
											"description": "The red component of the vertex's color.",
											"name": "r",
											"type": "number"
										},
										{
											"description": "The green component of the vertex's color.",
											"name": "g",
											"type": "number"
										},
										{
											"description": "The blue component of the vertex's color.",
											"name": "b",
											"type": "number"
										},
										{
											"description": "The alpha component of the vertex's color.",
											"name": "a",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the properties of a specific attribute within a vertex in the Mesh.\n\nMeshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.",
							"name": "getVertexAttribute",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the the vertex you want to retrieve the attribute for (one-based).",
											"name": "vertexindex",
											"type": "number"
										},
										{
											"description": "The index of the attribute within the vertex to be retrieved (one-based).",
											"name": "attributeindex",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The value of the first component of the attribute.",
											"name": "value1",
											"type": "number"
										},
										{
											"description": "The value of the second component of the attribute.",
											"name": "value2",
											"type": "number"
										},
										{
											"description": "Any additional vertex attribute components.",
											"name": "...",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the total number of vertices in the Mesh.",
							"name": "getVertexCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The total number of vertices in the mesh.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the vertex format that the Mesh was created with.",
							"name": "getVertexFormat",
							"variants": [
								{
									"description": "If a Mesh wasn't created with a custom vertex format, it will have the following vertex format:\n\ndefaultformat = {\n\n    {'VertexPosition', 'float', 2}, -- The x,y position of each vertex.\n\n    {'VertexTexCoord', 'float', 2}, -- The u,v texture coordinates of each vertex.\n\n    {'VertexColor', 'byte', 4} -- The r,g,b,a color of each vertex.\n\n}",
									"returns": [
										{
											"description": "The vertex format of the Mesh, which is a table containing tables for each vertex attribute the Mesh was created with, in the form of {attribute, ...}.",
											"name": "format",
											"table": [
												{
													"description": "A table containing the attribute's name, it's data type, and the number of components in the attribute, in the form of {name, datatype, components}.",
													"name": "attribute",
													"type": "table"
												},
												{
													"description": "Additional vertex attributes in the Mesh.",
													"name": "...",
													"type": "table"
												}
											],
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.\n\nIf no vertex map has been set previously via Mesh:setVertexMap, then this function will return nil in LÖVE 0.10.0+, or an empty table in 0.9.2 and older.",
							"name": "getVertexMap",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "number",
											"description": "A table containing the list of vertex indices used when drawing.",
											"name": "map",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether a specific vertex attribute in the Mesh is enabled. Vertex data from disabled attributes is not used when drawing the Mesh.",
							"name": "isAttributeEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the vertex attribute to be checked.",
											"name": "name",
											"type": "string"
										}
									],
									"description": "If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor. Otherwise the attribute name must either match one of the vertex attributes specified in the vertex format when creating the Mesh, \n\nor must match a vertex attribute from another Mesh attached to this Mesh via Mesh:attachAttribute.",
									"returns": [
										{
											"description": "Whether the vertex attribute is used when drawing this Mesh.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Enables or disables a specific vertex attribute in the Mesh. Vertex data from disabled attributes is not used when drawing the Mesh.",
							"name": "setAttributeEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the vertex attribute to enable or disable.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Whether the vertex attribute is used when drawing this Mesh.",
											"name": "enable",
											"type": "boolean"
										}
									],
									"description": "If a Mesh wasn't created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor. Otherwise the attribute name must either match one of the vertex attributes specified in the vertex format when creating the Mesh, \n\nor must match a vertex attribute from another Mesh attached to this Mesh via Mesh:attachAttribute."
								}
							]
						},
						{
							"description": "Sets the mode used when drawing the Mesh.",
							"name": "setDrawMode",
							"variants": [
								{
									"arguments": [
										{
											"description": "The mode to use when drawing the Mesh.",
											"name": "mode",
											"type": "MeshDrawMode"
										}
									]
								}
							]
						},
						{
							"description": "Restricts the drawn vertices of the Mesh to a subset of the total.",
							"name": "setDrawRange",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the first vertex to use when drawing, or the index of the first value in the vertex map to use if one is set for this Mesh.",
											"name": "start",
											"type": "number"
										},
										{
											"description": "The number of vertices to use when drawing, or number of values in the vertex map to use if one is set for this Mesh.",
											"name": "count",
											"type": "number"
										}
									]
								},
								{
									"description": "Allows all vertices in the Mesh to be drawn."
								}
							]
						},
						{
							"description": "Sets the texture (Image or Canvas) used when drawing the Mesh.",
							"name": "setTexture",
							"variants": [
								{
									"arguments": [
										{
											"description": "The Image or Canvas to texture the Mesh with when drawing.",
											"name": "texture",
											"type": "Texture"
										}
									]
								},
								{
									"description": "Disables any texture from being used when drawing the Mesh. Untextured meshes have a white color by default."
								}
							]
						},
						{
							"description": "Sets the properties of a vertex in the Mesh.\n\nIn versions prior to 11.0, color and byte component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "setVertex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the the vertex you want to modify (one-based).",
											"name": "index",
											"type": "number"
										},
										{
											"description": "The first component of the first vertex attribute in the specified vertex.",
											"name": "attributecomponent",
											"type": "number"
										},
										{
											"description": "Additional components of all vertex attributes in the specified vertex.",
											"name": "...",
											"type": "number"
										}
									],
									"description": "The arguments are in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.\n\nIf no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 1 if its data type is 'byte'."
								},
								{
									"arguments": [
										{
											"description": "The index of the the vertex you want to modify (one-based).",
											"name": "index",
											"type": "number"
										},
										{
											"description": "A table with vertex information, in the form of {attributecomponent, ...}.",
											"name": "vertex",
											"table": [
												{
													"description": "The first component of the first vertex attribute in the specified vertex.",
													"name": "attributecomponent",
													"type": "number"
												},
												{
													"description": "Additional components of all vertex attributes in the specified vertex.",
													"name": "...",
													"type": "number"
												}
											],
											"type": "table"
										}
									],
									"description": "The table indices are in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.\n\nIf no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 1 if its data type is 'byte'."
								},
								{
									"arguments": [
										{
											"description": "The index of the the vertex you want to modify (one-based).",
											"name": "index",
											"type": "number"
										},
										{
											"description": "The position of the vertex on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the vertex on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The horizontal component of the texture coordinate.",
											"name": "u",
											"type": "number"
										},
										{
											"description": "The vertical component of the texture coordinate.",
											"name": "v",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The red component of the vertex's color.",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The green component of the vertex's color.",
											"name": "g",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The blue component of the vertex's color.",
											"name": "b",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The alpha component of the vertex's color.",
											"name": "a",
											"type": "number"
										}
									],
									"description": "Sets the vertex components of a Mesh that wasn't created with a custom vertex format."
								},
								{
									"arguments": [
										{
											"description": "The index of the the vertex you want to modify (one-based).",
											"name": "index",
											"type": "number"
										},
										{
											"description": "A table with vertex information.",
											"name": "vertex",
											"table": [
												{
													"description": "The position of the vertex on the x-axis.",
													"name": "1",
													"type": "number"
												},
												{
													"description": "The position of the vertex on the y-axis.",
													"name": "2",
													"type": "number"
												},
												{
													"description": "The u texture coordinate. Texture coordinates are normally in the range of 1, but can be greater or less (see WrapMode.)",
													"name": "3",
													"type": "number"
												},
												{
													"description": "The v texture coordinate. Texture coordinates are normally in the range of 1, but can be greater or less (see WrapMode.)",
													"name": "4",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The red color component.",
													"name": "5",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The green color component.",
													"name": "6",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The blue color component.",
													"name": "7",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The alpha color component.",
													"name": "8",
													"type": "number"
												}
											],
											"type": "table"
										}
									],
									"description": "Sets the vertex components of a Mesh that wasn't created with a custom vertex format."
								}
							]
						},
						{
							"description": "Sets the properties of a specific attribute within a vertex in the Mesh.\n\nMeshes without a custom vertex format specified in love.graphics.newMesh have position as their first attribute, texture coordinates as their second attribute, and color as their third attribute.",
							"name": "setVertexAttribute",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the the vertex to be modified (one-based).",
											"name": "vertexindex",
											"type": "number"
										},
										{
											"description": "The index of the attribute within the vertex to be modified (one-based).",
											"name": "attributeindex",
											"type": "number"
										},
										{
											"description": "The new value for the first component of the attribute.",
											"name": "value1",
											"type": "number"
										},
										{
											"description": "The new value for the second component of the attribute.",
											"name": "value2",
											"type": "number"
										},
										{
											"description": "Any additional vertex attribute components.",
											"name": "...",
											"type": "number"
										}
									],
									"description": "Attribute components which exist within the attribute but are not specified as arguments default to 0 for attributes with the float data type, and 255 for the byte data type."
								}
							]
						},
						{
							"description": "Sets the vertex map for the Mesh. The vertex map describes the order in which the vertices are used when the Mesh is drawn. The vertices, vertex map, and mesh draw mode work together to determine what exactly is displayed on the screen.\n\nThe vertex map allows you to re-order or reuse vertices when drawing without changing the actual vertex parameters or duplicating vertices. It is especially useful when combined with different Mesh Draw Modes.",
							"name": "setVertexMap",
							"variants": [
								{
									"arguments": [
										{
											"description": "A table containing a list of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount().",
											"name": "map",
											"type": "table"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The index of the first vertex to use when drawing. Must be in the range of Mesh:getVertexCount().",
											"name": "vi1",
											"type": "number"
										},
										{
											"description": "The index of the second vertex to use when drawing.",
											"name": "vi2",
											"type": "number"
										},
										{
											"description": "The index of the third vertex to use when drawing.",
											"name": "vi3",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Array of vertex indices to use when drawing. Values must be in the range of Mesh:getVertexCount()-1",
											"name": "data",
											"type": "Data"
										},
										{
											"description": "Datatype of the vertex indices array above.",
											"name": "datatype",
											"type": "IndexDataType"
										}
									]
								}
							]
						},
						{
							"description": "Replaces a range of vertices in the Mesh with new ones. The total number of vertices in a Mesh cannot be changed after it has been created. This is often more efficient than calling Mesh:setVertex in a loop.",
							"name": "setVertices",
							"variants": [
								{
									"arguments": [
										{
											"description": "The table filled with vertex information tables for each vertex, in the form of {vertex, ...} where each vertex is a table in the form of {attributecomponent, ...}.",
											"name": "vertices",
											"table": [
												{
													"description": "The first component of the first vertex attribute in the vertex.",
													"name": "attributecomponent",
													"type": "number"
												},
												{
													"description": "Additional components of all vertex attributes in the vertex.",
													"name": "...",
													"type": "number"
												}
											],
											"type": "table"
										},
										{
											"default": "1",
											"description": "The index of the first vertex to replace.",
											"name": "startvertex",
											"type": "number"
										},
										{
											"default": "all",
											"description": "Amount of vertices to replace.",
											"name": "count",
											"type": "number"
										}
									],
									"description": "The values in each vertex table are in the same order as the vertex attributes in the Mesh's vertex format. A standard Mesh that wasn't created with a custom vertex format will use two position numbers, two texture coordinate numbers, and four color components per vertex: x, y, u, v, r, g, b, a.\n\nIf no value is supplied for a specific vertex attribute component, it will be set to a default value of 0 if its data type is 'float', or 255 if its data type is 'byte'."
								},
								{
									"arguments": [
										{
											"description": "A Data object to copy from. The contents of the Data must match the layout of this Mesh's vertex format.",
											"name": "data",
											"type": "Data"
										},
										{
											"default": "1",
											"description": "The index of the first vertex to replace.",
											"name": "startvertex",
											"type": "number"
										}
									],
									"description": "Sets the vertex components of the Mesh by copying directly from the memory of a Data object.\n\nIf LuaJIT's FFI is used to populate the Data object via Data:getPointer and ffi.cast, this variant can be drastically more efficient than other methods of setting Mesh vertex data."
								},
								{
									"arguments": [
										{
											"description": "The table filled with vertex information tables for each vertex as follows:",
											"name": "vertices",
											"table": [
												{
													"description": "The position of the vertex on the x-axis.",
													"name": "1",
													"type": "number"
												},
												{
													"description": "The position of the vertex on the y-axis.",
													"name": "2",
													"type": "number"
												},
												{
													"description": "The horizontal component of the texture coordinate. Texture coordinates are normally in the range of 1, but can be greater or less (see WrapMode).",
													"name": "3",
													"type": "number"
												},
												{
													"description": "The vertical component of the texture coordinate. Texture coordinates are normally in the range of 1, but can be greater or less (see WrapMode).",
													"name": "4",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The red color component.",
													"name": "5",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The green color component.",
													"name": "6",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The blue color component.",
													"name": "7",
													"type": "number"
												},
												{
													"default": "1",
													"description": "The alpha color component.",
													"name": "8",
													"type": "number"
												}
											],
											"type": "table"
										}
									],
									"description": "Sets the vertex components of a Mesh that wasn't created with a custom vertex format."
								}
							]
						}
					],
					"name": "Mesh",
					"supertypes": [
						"Drawable",
						"Object"
					]
				},
				{
					"constructors": [
						"newParticleSystem"
					],
					"description": "A ParticleSystem can be used to create particle effects like fire or smoke.\n\nThe particle system has to be created using update it in the update callback to see any changes in the particles emitted.\n\nThe particle system won't create any particles unless you call setParticleLifetime and setEmissionRate.",
					"functions": [
						{
							"description": "Creates an identical copy of the ParticleSystem in the stopped state.",
							"name": "clone",
							"variants": [
								{
									"description": "Cloned ParticleSystem inherit all the set-able state of the original ParticleSystem, but they are initialized stopped.",
									"returns": [
										{
											"description": "The new identical copy of this ParticleSystem.",
											"name": "particlesystem",
											"type": "ParticleSystem"
										}
									]
								}
							]
						},
						{
							"description": "Emits a burst of particles from the particle emitter.",
							"name": "emit",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of particles to emit. The number of emitted particles will be truncated if the particle system's max buffer size is reached.",
											"name": "numparticles",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the maximum number of particles the ParticleSystem can have at once.",
							"name": "getBufferSize",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum number of particles.",
											"name": "size",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the series of colors applied to the particle sprite.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "getColors",
							"variants": [
								{
									"returns": [
										{
											"description": "First color, red component (0-1).",
											"name": "r1",
											"type": "number"
										},
										{
											"description": "First color, green component (0-1).",
											"name": "g1",
											"type": "number"
										},
										{
											"description": "First color, blue component (0-1).",
											"name": "b1",
											"type": "number"
										},
										{
											"description": "First color, alpha component (0-1).",
											"name": "a1",
											"type": "number"
										},
										{
											"description": "Second color, red component (0-1).",
											"name": "r2",
											"type": "number"
										},
										{
											"description": "Second color, green component (0-1).",
											"name": "g2",
											"type": "number"
										},
										{
											"description": "Second color, blue component (0-1).",
											"name": "b2",
											"type": "number"
										},
										{
											"description": "Second color, alpha component (0-1).",
											"name": "a2",
											"type": "number"
										},
										{
											"description": "Eighth color, red component (0-1).",
											"name": "r8",
											"type": "number"
										},
										{
											"description": "Eighth color, green component (0-1).",
											"name": "g8",
											"type": "number"
										},
										{
											"description": "Eighth color, blue component (0-1).",
											"name": "b8",
											"type": "number"
										},
										{
											"description": "Eighth color, alpha component (0-1).",
											"name": "a8",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of particles that are currently in the system.",
							"name": "getCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The current number of live particles.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the direction of the particle emitter (in radians).",
							"name": "getDirection",
							"variants": [
								{
									"returns": [
										{
											"description": "The direction of the emitter (radians).",
											"name": "direction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the area-based spawn parameters for the particles.",
							"name": "getEmissionArea",
							"variants": [
								{
									"returns": [
										{
											"description": "The type of distribution for new particles.",
											"name": "distribution",
											"type": "AreaSpreadDistribution"
										},
										{
											"description": "The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.",
											"name": "dx",
											"type": "number"
										},
										{
											"description": "The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.",
											"name": "dy",
											"type": "number"
										},
										{
											"description": "The angle in radians of the emission area.",
											"name": "angle",
											"type": "number"
										},
										{
											"description": "True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.",
											"name": "directionRelativeToCenter",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets the amount of particles emitted per second.",
							"name": "getEmissionRate",
							"variants": [
								{
									"returns": [
										{
											"description": "The amount of particles per second.",
											"name": "rate",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets how long the particle system will emit particles (if -1 then it emits particles forever).",
							"name": "getEmitterLifetime",
							"variants": [
								{
									"returns": [
										{
											"description": "The lifetime of the emitter (in seconds).",
											"name": "life",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the mode used when the ParticleSystem adds new particles.",
							"name": "getInsertMode",
							"variants": [
								{
									"returns": [
										{
											"description": "The mode used when the ParticleSystem adds new particles.",
											"name": "mode",
											"type": "ParticleInsertMode"
										}
									]
								}
							]
						},
						{
							"description": "Gets the linear acceleration (acceleration along the x and y axes) for particles.\n\nEvery particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.",
							"name": "getLinearAcceleration",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum acceleration along the x axis.",
											"name": "xmin",
											"type": "number"
										},
										{
											"description": "The minimum acceleration along the y axis.",
											"name": "ymin",
											"type": "number"
										},
										{
											"description": "The maximum acceleration along the x axis.",
											"name": "xmax",
											"type": "number"
										},
										{
											"description": "The maximum acceleration along the y axis.",
											"name": "ymax",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the amount of linear damping (constant deceleration) for particles.",
							"name": "getLinearDamping",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum amount of linear damping applied to particles.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum amount of linear damping applied to particles.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the particle image's draw offset.",
							"name": "getOffset",
							"variants": [
								{
									"returns": [
										{
											"description": "The x coordinate of the particle image's draw offset.",
											"name": "ox",
											"type": "number"
										},
										{
											"description": "The y coordinate of the particle image's draw offset.",
											"name": "oy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the lifetime of the particles.",
							"name": "getParticleLifetime",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum life of the particles (in seconds).",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum life of the particles (in seconds).",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the position of the emitter.",
							"name": "getPosition",
							"variants": [
								{
									"returns": [
										{
											"description": "Position along x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Position along y-axis.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the series of Quads used for the particle sprites.",
							"name": "getQuads",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Quad",
											"description": "A table containing the Quads used.",
											"name": "quads",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the radial acceleration (away from the emitter).",
							"name": "getRadialAcceleration",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum acceleration.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum acceleration.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the rotation of the image upon particle creation (in radians).",
							"name": "getRotation",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum initial angle (radians).",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum initial angle (radians).",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).",
							"name": "getSizeVariation",
							"variants": [
								{
									"returns": [
										{
											"description": "The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).",
											"name": "variation",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the series of sizes by which the sprite is scaled. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.",
							"name": "getSizes",
							"variants": [
								{
									"returns": [
										{
											"description": "The first size.",
											"name": "size1",
											"type": "number"
										},
										{
											"description": "The second size.",
											"name": "size2",
											"type": "number"
										},
										{
											"description": "The eighth size.",
											"name": "size8",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the speed of the particles.",
							"name": "getSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum linear speed of the particles.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum linear speed of the particles.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the spin of the sprite.",
							"name": "getSpin",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum spin (radians per second).",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum spin (radians per second).",
											"name": "max",
											"type": "number"
										},
										{
											"description": "The degree of variation (0 meaning no variation and 1 meaning full variation between start and end).",
											"name": "variation",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).",
							"name": "getSpinVariation",
							"variants": [
								{
									"returns": [
										{
											"description": "The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).",
											"name": "variation",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the amount of directional spread of the particle emitter (in radians).",
							"name": "getSpread",
							"variants": [
								{
									"returns": [
										{
											"description": "The spread of the emitter (radians).",
											"name": "spread",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the tangential acceleration (acceleration perpendicular to the particle's direction).",
							"name": "getTangentialAcceleration",
							"variants": [
								{
									"returns": [
										{
											"description": "The minimum acceleration.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum acceleration.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the texture (Image or Canvas) used for the particles.",
							"name": "getTexture",
							"variants": [
								{
									"returns": [
										{
											"description": "The Image or Canvas used for the particles.",
											"name": "texture",
											"type": "Texture"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.",
							"name": "hasRelativeRotation",
							"variants": [
								{
									"returns": [
										{
											"description": "True if relative particle rotation is enabled, false if it's disabled.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether the particle system is actively emitting particles.",
							"name": "isActive",
							"variants": [
								{
									"returns": [
										{
											"description": "True if system is active, false otherwise.",
											"name": "active",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether the particle system is paused.",
							"name": "isPaused",
							"variants": [
								{
									"returns": [
										{
											"description": "True if system is paused, false otherwise.",
											"name": "paused",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether the particle system is stopped.",
							"name": "isStopped",
							"variants": [
								{
									"returns": [
										{
											"description": "True if system is stopped, false otherwise.",
											"name": "stopped",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Moves the position of the emitter. This results in smoother particle spawning behaviour than if ParticleSystem:setPosition is used every frame.",
							"name": "moveTo",
							"variants": [
								{
									"arguments": [
										{
											"description": "Position along x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Position along y-axis.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Pauses the particle emitter.",
							"name": "pause",
							"variants": [
								[]
							]
						},
						{
							"description": "Resets the particle emitter, removing any existing particles and resetting the lifetime counter.",
							"name": "reset",
							"variants": [
								[]
							]
						},
						{
							"description": "Sets the size of the buffer (the max allowed amount of particles in the system).",
							"name": "setBufferSize",
							"variants": [
								{
									"arguments": [
										{
											"description": "The buffer size.",
											"name": "size",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a series of colors to apply to the particle sprite. The particle system will interpolate between each color evenly over the particle's lifetime.\n\nArguments can be passed in groups of four, representing the components of the desired RGBA value, or as tables of RGBA component values, with a default alpha value of 1 if only three values are given. At least one color must be specified. A maximum of eight may be used.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "setColors",
							"variants": [
								{
									"arguments": [
										{
											"description": "First color, red component (0-1).",
											"name": "r1",
											"type": "number"
										},
										{
											"description": "First color, green component (0-1).",
											"name": "g1",
											"type": "number"
										},
										{
											"description": "First color, blue component (0-1).",
											"name": "b1",
											"type": "number"
										},
										{
											"default": "1",
											"description": "First color, alpha component (0-1).",
											"name": "a1",
											"type": "number"
										},
										{
											"description": "Additional colors.",
											"name": "...",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"arraytype": "number",
											"description": "First color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.",
											"name": "rgba1",
											"type": "table"
										},
										{
											"arraytype": "number",
											"description": "Additional color, a numerical indexed table with the red, green, blue and alpha values as numbers (0-1). The alpha is optional and defaults to 1 if it is left out.",
											"name": "...",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Sets the direction the particles will be emitted in.",
							"name": "setDirection",
							"variants": [
								{
									"arguments": [
										{
											"description": "The direction of the particles (in radians).",
											"name": "direction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets area-based spawn parameters for the particles. Newly created particles will spawn in an area around the emitter based on the parameters to this function.",
							"name": "setEmissionArea",
							"variants": [
								{
									"arguments": [
										{
											"description": "The type of distribution for new particles.",
											"name": "distribution",
											"type": "AreaSpreadDistribution"
										},
										{
											"description": "The maximum spawn distance from the emitter along the x-axis for uniform distribution, or the standard deviation along the x-axis for normal distribution.",
											"name": "dx",
											"type": "number"
										},
										{
											"description": "The maximum spawn distance from the emitter along the y-axis for uniform distribution, or the standard deviation along the y-axis for normal distribution.",
											"name": "dy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The angle in radians of the emission area.",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True if newly spawned particles will be oriented relative to the center of the emission area, false otherwise.",
											"name": "directionRelativeToCenter",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the amount of particles emitted per second.",
							"name": "setEmissionRate",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of particles per second.",
											"name": "rate",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets how long the particle system should emit particles (if -1 then it emits particles forever).",
							"name": "setEmitterLifetime",
							"variants": [
								{
									"arguments": [
										{
											"description": "The lifetime of the emitter (in seconds).",
											"name": "life",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the mode to use when the ParticleSystem adds new particles.",
							"name": "setInsertMode",
							"variants": [
								{
									"arguments": [
										{
											"description": "The mode to use when the ParticleSystem adds new particles.",
											"name": "mode",
											"type": "ParticleInsertMode"
										}
									]
								}
							]
						},
						{
							"description": "Sets the linear acceleration (acceleration along the x and y axes) for particles.\n\nEvery particle created will accelerate along the x and y axes between xmin,ymin and xmax,ymax.",
							"name": "setLinearAcceleration",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum acceleration along the x axis.",
											"name": "xmin",
											"type": "number"
										},
										{
											"description": "The minimum acceleration along the y axis.",
											"name": "ymin",
											"type": "number"
										},
										{
											"default": "xmin",
											"description": "The maximum acceleration along the x axis.",
											"name": "xmax",
											"type": "number"
										},
										{
											"default": "ymin",
											"description": "The maximum acceleration along the y axis.",
											"name": "ymax",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the amount of linear damping (constant deceleration) for particles.",
							"name": "setLinearDamping",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum amount of linear damping applied to particles.",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum amount of linear damping applied to particles.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the offset position which the particle sprite is rotated around.\n\nIf this function is not used, the particles rotate around their center.",
							"name": "setOffset",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x coordinate of the rotation offset.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y coordinate of the rotation offset.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the lifetime of the particles.",
							"name": "setParticleLifetime",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum life of the particles (in seconds).",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum life of the particles (in seconds).",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the position of the emitter.",
							"name": "setPosition",
							"variants": [
								{
									"arguments": [
										{
											"description": "Position along x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Position along y-axis.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a series of Quads to use for the particle sprites. Particles will choose a Quad from the list based on the particle's current lifetime, allowing for the use of animated sprite sheets with ParticleSystems.",
							"name": "setQuads",
							"variants": [
								{
									"arguments": [
										{
											"description": "The first Quad to use.",
											"name": "quad1",
											"type": "Quad"
										},
										{
											"description": "Additional Quads to use.",
											"name": "...",
											"type": "Quad"
										}
									]
								},
								{
									"arguments": [
										{
											"arraytype": "Quad",
											"description": "A table containing the Quads to use.",
											"name": "quads",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Set the radial acceleration (away from the emitter).",
							"name": "setRadialAcceleration",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum acceleration.",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum acceleration.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets whether particle angles and rotations are relative to their velocities. If enabled, particles are aligned to the angle of their velocities and rotate relative to that angle.",
							"name": "setRelativeRotation",
							"variants": [
								{
									"arguments": [
										{
											"description": "True to enable relative particle rotation, false to disable it.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the rotation of the image upon particle creation (in radians).",
							"name": "setRotation",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum initial angle (radians).",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum initial angle (radians).",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the amount of size variation (0 meaning no variation and 1 meaning full variation between start and end).",
							"name": "setSizeVariation",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).",
											"name": "variation",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a series of sizes by which to scale a particle sprite. 1.0 is normal size. The particle system will interpolate between each size evenly over the particle's lifetime.\n\nAt least one size must be specified. A maximum of eight may be used.",
							"name": "setSizes",
							"variants": [
								{
									"arguments": [
										{
											"description": "The first size.",
											"name": "size1",
											"type": "number"
										},
										{
											"default": "nil",
											"description": "The second size.",
											"name": "size2",
											"type": "number"
										},
										{
											"default": "nil",
											"description": "The eighth size.",
											"name": "size8",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the speed of the particles.",
							"name": "setSpeed",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum linear speed of the particles.",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum linear speed of the particles.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the spin of the sprite.",
							"name": "setSpin",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum spin (radians per second).",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum spin (radians per second).",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the amount of spin variation (0 meaning no variation and 1 meaning full variation between start and end).",
							"name": "setSpinVariation",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of variation (0 meaning no variation and 1 meaning full variation between start and end).",
											"name": "variation",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the amount of spread for the system.",
							"name": "setSpread",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of spread (radians).",
											"name": "spread",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the tangential acceleration (acceleration perpendicular to the particle's direction).",
							"name": "setTangentialAcceleration",
							"variants": [
								{
									"arguments": [
										{
											"description": "The minimum acceleration.",
											"name": "min",
											"type": "number"
										},
										{
											"default": "min",
											"description": "The maximum acceleration.",
											"name": "max",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the texture (Image or Canvas) to be used for the particles.",
							"name": "setTexture",
							"variants": [
								{
									"arguments": [
										{
											"description": "An Image or Canvas to use for the particles.",
											"name": "texture",
											"type": "Texture"
										}
									]
								}
							]
						},
						{
							"description": "Starts the particle emitter.",
							"name": "start",
							"variants": [
								[]
							]
						},
						{
							"description": "Stops the particle emitter, resetting the lifetime counter.",
							"name": "stop",
							"variants": [
								[]
							]
						},
						{
							"description": "Updates the particle system; moving, creating and killing particles.",
							"name": "update",
							"variants": [
								{
									"arguments": [
										{
											"description": "The time (seconds) since last frame.",
											"name": "dt",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "ParticleSystem",
					"supertypes": [
						"Drawable",
						"Object"
					]
				},
				{
					"constructors": [
						"newQuad"
					],
					"description": "A quadrilateral (a polygon with four sides and four corners) with texture coordinate information.\n\nQuads can be used to select part of a texture to draw. In this way, one large texture atlas can be loaded, and then split up into sub-images.",
					"functions": [
						{
							"description": "Gets reference texture dimensions initially specified in love.graphics.newQuad.",
							"name": "getTextureDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The Texture width used by the Quad.",
											"name": "sw",
											"type": "number"
										},
										{
											"description": "The Texture height used by the Quad.",
											"name": "sh",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current viewport of this Quad.",
							"name": "getViewport",
							"variants": [
								{
									"returns": [
										{
											"description": "The top-left corner along the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The top-left corner along the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The width of the viewport.",
											"name": "w",
											"type": "number"
										},
										{
											"description": "The height of the viewport.",
											"name": "h",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the texture coordinates according to a viewport.",
							"name": "setViewport",
							"variants": [
								{
									"arguments": [
										{
											"description": "The top-left corner along the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The top-left corner along the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The width of the viewport.",
											"name": "w",
											"type": "number"
										},
										{
											"description": "The height of the viewport.",
											"name": "h",
											"type": "number"
										},
										{
											"description": "The reference width, the width of the Image. (Must be greater than 0.)",
											"name": "sw",
											"type": "number"
										},
										{
											"description": "The reference height, the height of the Image. (Must be greater than 0.)",
											"name": "sh",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Quad",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"getShader",
						"newShader"
					],
					"description": "A Shader is used for advanced hardware-accelerated pixel or vertex manipulation. These effects are written in a language based on GLSL (OpenGL Shading Language) with a few things simplified for easier coding.\n\nPotential uses for shaders include HDR/bloom, motion blur, grayscale/invert/sepia/any kind of color effect, reflection/refraction, distortions, bump mapping, and much more! Here is a collection of basic shaders and good starting point to learn: https://github.com/vrld/moonshine",
					"functions": [
						{
							"description": "Returns any warning and error messages from compiling the shader code. This can be used for debugging your shaders if there's anything the graphics hardware doesn't like.",
							"name": "getWarnings",
							"variants": [
								{
									"returns": [
										{
											"description": "Warning and error messages (if any).",
											"name": "warnings",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether a uniform / extern variable exists in the Shader.\n\nIf a graphics driver's shader compiler determines that a uniform / extern variable doesn't affect the final output of the shader, it may optimize the variable out. This function will return false in that case.",
							"name": "hasUniform",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the uniform variable.",
											"name": "name",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "Whether the uniform exists in the shader and affects its final output.",
											"name": "hasuniform",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sends one or more values to a special (''uniform'') variable inside the shader. Uniform variables have to be marked using the ''uniform'' or ''extern'' keyword, e.g.\n\nuniform float time;  // 'float' is the typical number type used in GLSL shaders.\n\nuniform float varsvec2 light_pos;\n\nuniform vec4 colors[4;\n\nThe corresponding send calls would be\n\nshader:send('time', t)\n\nshader:send('vars',a,b)\n\nshader:send('light_pos', {light_x, light_y})\n\nshader:send('colors', {r1, g1, b1, a1},  {r2, g2, b2, a2},  {r3, g3, b3, a3},  {r4, g4, b4, a4})\n\nUniform / extern variables are read-only in the shader code and remain constant until modified by a Shader:send call. Uniform variables can be accessed in both the Vertex and Pixel components of a shader, as long as the variable is declared in each.",
							"name": "send",
							"variants": [
								{
									"arguments": [
										{
											"description": "Name of the number to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Number to send to store in the uniform variable.",
											"name": "number",
											"type": "number"
										},
										{
											"description": "Additional numbers to send if the uniform variable is an array.",
											"name": "...",
											"type": "number"
										}
									],
									"description": "Because all numbers in Lua are floating point, in versions prior to 0.10.2 you must use the function Shader:sendInt to send values to uniform int variables in the shader's code."
								},
								{
									"arguments": [
										{
											"description": "Name of the vector to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Numbers to send to the uniform variable as a vector. The number of elements in the table determines the type of the vector (e.g. two numbers -&gt; vec2). At least two and at most four numbers can be used.",
											"name": "vector",
											"type": "table"
										},
										{
											"description": "Additional vectors to send if the uniform variable is an array. All vectors need to be of the same size (e.g. only vec3's).",
											"name": "...",
											"type": "table"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of the matrix to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: {{a,b,c,d}, {e,f,g,h}, ... } or (since version 0.10.2) {a,b,c,d, e,f,g,h, ...}. The order in 0.10.2 is column-major; starting in 11.0 it's row-major instead.",
											"name": "matrix",
											"type": "table"
										},
										{
											"description": "Additional matrices of the same type as ''matrix'' to store in a uniform array.",
											"name": "...",
											"type": "table"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of the Texture to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Texture (Image or Canvas) to send to the uniform variable.",
											"name": "texture",
											"type": "Texture"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of the boolean to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Boolean to send to store in the uniform variable.",
											"name": "boolean",
											"type": "boolean"
										},
										{
											"description": "Additional booleans to send if the uniform variable is an array.",
											"name": "...",
											"type": "boolean"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of the matrix to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "The layout (row- or column-major) of the matrix.",
											"name": "matrixlayout",
											"type": "MatrixLayout"
										},
										{
											"description": "2x2, 3x3, or 4x4 matrix to send to the uniform variable. Using table form: {{a,b,c,d}, {e,f,g,h}, ... } or {a,b,c,d, e,f,g,h, ...}.",
											"name": "matrix",
											"type": "table"
										},
										{
											"description": "Additional matrices of the same type as ''matrix'' to store in a uniform array.",
											"name": "...",
											"type": "table"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of the uniform to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Data object containing the values to send.",
											"name": "data",
											"type": "Data"
										},
										{
											"default": "0",
											"description": "Offset in bytes from the start of the Data object.",
											"name": "offset",
											"type": "number"
										},
										{
											"default": "all",
											"description": "Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.",
											"name": "size",
											"type": "number"
										}
									],
									"description": "Sends uniform values to the Shader sourced from the contents of a Data object. This directly copies the bytes of the data."
								},
								{
									"arguments": [
										{
											"description": "Name of the uniform matrix to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "Data object containing the values to send.",
											"name": "data",
											"type": "Data"
										},
										{
											"description": "The layout (row- or column-major) of the matrix in memory.",
											"name": "matrixlayout",
											"type": "MatrixLayout"
										},
										{
											"default": "0",
											"description": "Offset in bytes from the start of the Data object.",
											"name": "offset",
											"type": "number"
										},
										{
											"default": "all",
											"description": "Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.",
											"name": "size",
											"type": "number"
										}
									],
									"description": "Sends uniform matrices to the Shader sourced from the contents of a Data object. This directly copies the bytes of the data."
								},
								{
									"arguments": [
										{
											"description": "Name of the uniform matrix to send to the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "The layout (row- or column-major) of the matrix in memory.",
											"name": "matrixlayout",
											"type": "MatrixLayout"
										},
										{
											"description": "Data object containing the values to send.",
											"name": "data",
											"type": "Data"
										},
										{
											"default": "0",
											"description": "Offset in bytes from the start of the Data object.",
											"name": "offset",
											"type": "number"
										},
										{
											"default": "all",
											"description": "Size in bytes of the data to send. If nil, as many bytes as the specified uniform uses will be copied.",
											"name": "size",
											"type": "number"
										}
									],
									"description": "Sends uniform matrices to the Shader sourced from the contents of a Data object. This directly copies the bytes of the data."
								}
							]
						},
						{
							"description": "Sends one or more colors to a special (''extern'' / ''uniform'') vec3 or vec4 variable inside the shader. The color components must be in the range of 1. The colors are gamma-corrected if global gamma-correction is enabled.\n\nExtern variables must be marked using the ''extern'' keyword, e.g.\n\nextern vec4 Color;\n\nThe corresponding sendColor call would be\n\nshader:sendColor('Color', {r, g, b, a})\n\nExtern variables can be accessed in both the Vertex and Pixel stages of a shader, as long as the variable is declared in each.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "sendColor",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the color extern variable to send to in the shader.",
											"name": "name",
											"type": "string"
										},
										{
											"arraytype": "number",
											"description": "A table with red, green, blue, and optional alpha color components in the range of 1 to send to the extern as a vector.",
											"name": "color",
											"type": "table"
										},
										{
											"arraytype": "number",
											"description": "Additional colors to send in case the extern is an array. All colors need to be of the same size (e.g. only vec3's).",
											"name": "...",
											"type": "table"
										}
									]
								}
							]
						}
					],
					"name": "Shader",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newSpriteBatch"
					],
					"description": "Using a single image, draw any number of identical copies of the image using a single call to love.graphics.draw(). This can be used, for example, to draw repeating copies of a single background image with high performance.\n\nA SpriteBatch can be even more useful when the underlying image is a texture atlas (a single image file containing many independent images); by adding Quads to the batch, different sub-images from within the atlas can be drawn.",
					"functions": [
						{
							"description": "Adds a sprite to the batch. Sprites are drawn in the order they are added.",
							"name": "add",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position to draw the object (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position to draw the object (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "An identifier for the added sprite.",
											"name": "id",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The Quad to add.",
											"name": "quad",
											"type": "Quad"
										},
										{
											"description": "The position to draw the object (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position to draw the object (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "Adds a Quad to the batch.",
									"returns": [
										{
											"description": "An identifier for the added sprite.",
											"name": "id",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Adds a sprite to a batch created with an Array Texture.",
							"name": "addLayer",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the layer to use for this sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture.",
									"returns": [
										{
											"description": "The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer.",
											"name": "spriteindex",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The index of the layer to use for this sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"description": "The subsection of the texture's layer to use when drawing the sprite.",
											"name": "quad",
											"type": "Quad"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture using the specified Quad.\n\nThe specified layer index overrides any layer index set on the Quad via Quad:setLayer.",
									"returns": [
										{
											"description": "The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer.",
											"name": "spriteindex",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The index of the layer to use for this sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"description": "A transform object.",
											"name": "transform",
											"type": "Transform"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture using the specified Transform.",
									"returns": [
										{
											"description": "The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer.",
											"name": "spriteindex",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The index of the layer to use for this sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"description": "The subsection of the texture's layer to use when drawing the sprite.",
											"name": "quad",
											"type": "Quad"
										},
										{
											"description": "A transform object.",
											"name": "transform",
											"type": "Transform"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture using the specified Quad and Transform.\n\nIn order to use an Array Texture or other non-2D texture types as the main texture in a custom void effect() variant must be used in the pixel shader, and MainTex must be declared as an ArrayImage or sampler2DArray like so: uniform ArrayImage MainTex;.",
									"returns": [
										{
											"description": "The index of the added sprite, for use with SpriteBatch:set or SpriteBatch:setLayer.",
											"name": "spriteindex",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Attaches a per-vertex attribute from a Mesh onto this SpriteBatch, for use when drawing. This can be combined with a Shader to augment a SpriteBatch with per-vertex or additional per-sprite information instead of just having per-sprite colors.\n\nEach sprite in a SpriteBatch has 4 vertices in the following order: top-left, bottom-left, top-right, bottom-right. The index returned by SpriteBatch:add (and used by SpriteBatch:set) can used to determine the first vertex of a specific sprite with the formula 1 + 4 * ( id - 1 ).",
							"name": "attachAttribute",
							"variants": [
								{
									"arguments": [
										{
											"description": "The name of the vertex attribute to attach.",
											"name": "name",
											"type": "string"
										},
										{
											"description": "The Mesh to get the vertex attribute from.",
											"name": "mesh",
											"type": "Mesh"
										}
									],
									"description": "If a created with a custom vertex format, it will have 3 vertex attributes named VertexPosition, VertexTexCoord, and VertexColor. If vertex attributes with those names are attached to the SpriteBatch, it will override the SpriteBatch's sprite positions, texture coordinates, and sprite colors, respectively.\n\nCustom named attributes can be accessed in a vertex shader by declaring them as attribute vec4 MyCustomAttributeName; at the top-level of the vertex shader code. The name must match what was specified in the Mesh's vertex format and in the name argument of SpriteBatch:attachAttribute.\n\nA Mesh must have at least 4 * SpriteBatch:getBufferSize vertices in order to be attachable to a SpriteBatch."
								}
							]
						},
						{
							"description": "Removes all sprites from the buffer.",
							"name": "clear",
							"variants": [
								[]
							]
						},
						{
							"description": "Immediately sends all new and modified sprite data in the batch to the graphics card.\n\nNormally it isn't necessary to call this method as love.graphics.draw(spritebatch, ...) will do it automatically if needed, but explicitly using SpriteBatch:flush gives more control over when the work happens.\n\nIf this method is used, it generally shouldn't be called more than once (at most) between love.graphics.draw(spritebatch, ...) calls.",
							"name": "flush",
							"variants": [
								[]
							]
						},
						{
							"description": "Gets the maximum number of sprites the SpriteBatch can hold.",
							"name": "getBufferSize",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum number of sprites the batch can hold.",
											"name": "size",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the color that will be used for the next add and set operations.\n\nIf no color has been set with SpriteBatch:setColor or the current SpriteBatch color has been cleared, this method will return nil.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "getColor",
							"variants": [
								{
									"returns": [
										{
											"description": "The red component (0-1).",
											"name": "r",
											"type": "number"
										},
										{
											"description": "The green component (0-1).",
											"name": "g",
											"type": "number"
										},
										{
											"description": "The blue component (0-1).",
											"name": "b",
											"type": "number"
										},
										{
											"description": "The alpha component (0-1).",
											"name": "a",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of sprites currently in the SpriteBatch.",
							"name": "getCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of sprites currently in the batch.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the texture (Image or Canvas) used by the SpriteBatch.",
							"name": "getTexture",
							"variants": [
								{
									"returns": [
										{
											"description": "The Image or Canvas used by the SpriteBatch.",
											"name": "texture",
											"type": "Texture"
										}
									]
								}
							]
						},
						{
							"description": "Changes a sprite in the batch. This requires the sprite index returned by SpriteBatch:add or SpriteBatch:addLayer.",
							"name": "set",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the sprite that will be changed.",
											"name": "spriteindex",
											"type": "number"
										},
										{
											"description": "The position to draw the object (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position to draw the object (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The index of the sprite that will be changed.",
											"name": "spriteindex",
											"type": "number"
										},
										{
											"description": "The Quad used on the image of the batch.",
											"name": "quad",
											"type": "Quad"
										},
										{
											"description": "The position to draw the object (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position to draw the object (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shear factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "Changes a sprite with a Quad in the batch. This requires the index returned by SpriteBatch:add or SpriteBatch:addLayer.\n\nSpriteBatches do not support removing individual sprites. One can do a pseudo removal (instead of clearing and re-adding everything) by:\n\nSpriteBatch:set(id, 0, 0, 0, 0, 0)\n\nThis makes all the sprite's vertices equal (because the x and y scales are 0), which prevents the GPU from fully processing the sprite when drawing the SpriteBatch."
								}
							]
						},
						{
							"description": "Sets the color that will be used for the next add and set operations. Calling the function without arguments will disable all per-sprite colors for the SpriteBatch.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.\n\nIn version 0.9.2 and older, the global color set with love.graphics.setColor will not work on the SpriteBatch if any of the sprites has its own color.",
							"name": "setColor",
							"variants": [
								{
									"arguments": [
										{
											"description": "The amount of red.",
											"name": "r",
											"type": "number"
										},
										{
											"description": "The amount of green.",
											"name": "g",
											"type": "number"
										},
										{
											"description": "The amount of blue.",
											"name": "b",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The amount of alpha.",
											"name": "a",
											"type": "number"
										}
									]
								},
								{
									"description": "Disables all per-sprite colors for this SpriteBatch."
								}
							]
						},
						{
							"description": "Restricts the drawn sprites in the SpriteBatch to a subset of the total.",
							"name": "setDrawRange",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the first sprite to draw. Index 1 corresponds to the first sprite added with SpriteBatch:add.",
											"name": "start",
											"type": "number"
										},
										{
											"description": "The number of sprites to draw.",
											"name": "count",
											"type": "number"
										}
									]
								},
								{
									"description": "Allows all sprites in the SpriteBatch to be drawn."
								}
							]
						},
						{
							"description": "Changes a sprite previously added with add or addLayer, in a batch created with an Array Texture.",
							"name": "setLayer",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the existing sprite to replace.",
											"name": "spriteindex",
											"type": "number"
										},
										{
											"description": "The index of the layer in the Array Texture to use for this sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "Changes the sprite in the SpriteBatch."
								},
								{
									"arguments": [
										{
											"description": "The index of the existing sprite to replace.",
											"name": "spriteindex",
											"type": "number"
										},
										{
											"description": "The index of the layer to use for this sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"description": "The subsection of the texture's layer to use when drawing the sprite.",
											"name": "quad",
											"type": "Quad"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position to draw the sprite (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "r",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture using the specified Quad.\n\nThe specified layer index overrides any layer index set on the Quad via Quad:setLayer."
								},
								{
									"arguments": [
										{
											"description": "The index of the existing sprite to replace.",
											"name": "spriteindex",
											"type": "number"
										},
										{
											"description": "The index of the layer to use for the sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"description": "A transform object.",
											"name": "transform",
											"type": "Transform"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture using the specified Transform."
								},
								{
									"arguments": [
										{
											"description": "The index of the existing sprite to replace.",
											"name": "spriteindex",
											"type": "number"
										},
										{
											"description": "The index of the layer to use for the sprite.",
											"name": "layerindex",
											"type": "number"
										},
										{
											"description": "The subsection of the texture's layer to use when drawing the sprite.",
											"name": "quad",
											"type": "Quad"
										},
										{
											"description": "A transform object.",
											"name": "transform",
											"type": "Transform"
										}
									],
									"description": "Adds a layer of the SpriteBatch's Array Texture using the specified Quad and Transform.\n\nThe specified layer index overrides any layer index set on the Quad via Quad:setLayer."
								}
							]
						},
						{
							"description": "Sets the texture (Image or Canvas) used for the sprites in the batch, when drawing.",
							"name": "setTexture",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new Image or Canvas to use for the sprites in the batch.",
											"name": "texture",
											"type": "Texture"
										}
									]
								}
							]
						}
					],
					"name": "SpriteBatch",
					"supertypes": [
						"Drawable",
						"Object"
					]
				},
				{
					"constructors": [
						"newText"
					],
					"description": "Drawable text.",
					"functions": [
						{
							"description": "Adds additional colored text to the Text object at the specified position.",
							"name": "add",
							"variants": [
								{
									"arguments": [
										{
											"description": "The text to add to the object.",
											"name": "textstring",
											"type": "string"
										},
										{
											"default": "0",
											"description": "The position of the new text on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position of the new text on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The orientation of the new text in radians.",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor on the x-axis.",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor on the y-axis.",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset on the x-axis.",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset on the y-axis.",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor on the x-axis.",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor on the y-axis.",
											"name": "ky",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "An index number that can be used with Text:getWidth or Text:getHeight.",
											"name": "index",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
											"name": "coloredtext",
											"table": [
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color1",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string1",
													"type": "string"
												},
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color2",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string2",
													"type": "string"
												},
												{
													"description": "Additional colors and strings.",
													"name": "...",
													"type": "tables and strings"
												}
											],
											"type": "table"
										},
										{
											"default": "0",
											"description": "The position of the new text on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The position of the new text on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The orientation of the new text in radians.",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor on the x-axis.",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor on the y-axis.",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset on the x-axis.",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset on the y-axis.",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor on the x-axis.",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor on the y-axis.",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object.",
									"returns": [
										{
											"description": "An index number that can be used with Text:getWidth or Text:getHeight.",
											"name": "index",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Adds additional formatted / colored text to the Text object at the specified position.\n\nThe word wrap limit is applied before any scaling, rotation, and other coordinate transformations. Therefore the amount of text per line stays constant given the same wrap limit, even if the scale arguments change.",
							"name": "addf",
							"variants": [
								{
									"arguments": [
										{
											"description": "The text to add to the object.",
											"name": "textstring",
											"type": "string"
										},
										{
											"description": "The maximum width in pixels of the text before it gets automatically wrapped to a new line.",
											"name": "wraplimit",
											"type": "number"
										},
										{
											"description": "The alignment of the text.",
											"name": "align",
											"type": "AlignMode"
										},
										{
											"description": "The position of the new text (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the new text (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "An index number that can be used with Text:getWidth or Text:getHeight.",
											"name": "index",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A table containing colors and strings to add to the object, in the form of {color1, string1, color2, string2, ...}.",
											"name": "coloredtext",
											"table": [
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color1",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string1",
													"type": "string"
												},
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color2",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string2",
													"type": "string"
												},
												{
													"description": "Additional colors and strings.",
													"name": "...",
													"type": "tables and strings"
												}
											],
											"type": "table"
										},
										{
											"description": "The maximum width in pixels of the text before it gets automatically wrapped to a new line.",
											"name": "wraplimit",
											"type": "number"
										},
										{
											"description": "The alignment of the text.",
											"name": "align",
											"type": "AlignMode"
										},
										{
											"description": "The position of the new text (x-axis).",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the new text (y-axis).",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Orientation (radians).",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor (x-axis).",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor (y-axis).",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (x-axis).",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset (y-axis).",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor (x-axis).",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor (y-axis).",
											"name": "ky",
											"type": "number"
										}
									],
									"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object.",
									"returns": [
										{
											"description": "An index number that can be used with Text:getWidth or Text:getHeight.",
											"name": "index",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Clears the contents of the Text object.",
							"name": "clear",
							"variants": [
								[]
							]
						},
						{
							"description": "Gets the width and height of the text in pixels.",
							"name": "getDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned.",
											"name": "height",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "An index number returned by Text:add or Text:addf.",
											"name": "index",
											"type": "number"
										}
									],
									"description": "Gets the width and height of a specific sub-string that was previously added to the Text object.",
									"returns": [
										{
											"description": "The width of the sub-string (before scaling and other transformations).",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of the sub-string (before scaling and other transformations).",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the Font used with the Text object.",
							"name": "getFont",
							"variants": [
								{
									"returns": [
										{
											"description": "The font used with this Text object.",
											"name": "font",
											"type": "Font"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height of the text in pixels.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the text. If multiple sub-strings have been added with Text:add, the height of the last sub-string is returned.",
											"name": " height ",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "An index number returned by Text:add or Text:addf.",
											"name": "index",
											"type": "number"
										}
									],
									"description": "Gets the height of a specific sub-string that was previously added to the Text object.",
									"returns": [
										{
											"description": "The height of the sub-string (before scaling and other transformations).",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width of the text in pixels.",
							"name": "getWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the text. If multiple sub-strings have been added with Text:add, the width of the last sub-string is returned.",
											"name": "width",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "An index number returned by Text:add or Text:addf.",
											"name": "index",
											"type": "number"
										}
									],
									"description": "Gets the width of a specific sub-string that was previously added to the Text object.",
									"returns": [
										{
											"description": "The width of the sub-string (before scaling and other transformations).",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Replaces the contents of the Text object with a new unformatted string.",
							"name": "set",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new string of text to use.",
											"name": "textstring",
											"type": "string"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A table containing colors and strings to use as the new text, in the form of {color1, string1, color2, string2, ...}.",
											"name": "coloredtext",
											"table": [
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color1",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string1",
													"type": "string"
												},
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color2",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string2",
													"type": "string"
												},
												{
													"description": "Additional colors and strings.",
													"name": "...",
													"type": "tables and strings"
												}
											],
											"type": "table"
										}
									],
									"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object."
								}
							]
						},
						{
							"description": "Replaces the Font used with the text.",
							"name": "setFont",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new font to use with this Text object.",
											"name": "font",
											"type": "Font"
										}
									]
								}
							]
						},
						{
							"description": "Replaces the contents of the Text object with a new formatted string.",
							"name": "setf",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new string of text to use.",
											"name": "textstring",
											"type": "string"
										},
										{
											"description": "The maximum width in pixels of the text before it gets automatically wrapped to a new line.",
											"name": "wraplimit",
											"type": "number"
										},
										{
											"description": "The alignment of the text.",
											"name": "align",
											"type": "AlignMode"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A table containing colors and strings to use as the new text, in the form of {color1, string1, color2, string2, ...}.",
											"name": "coloredtext",
											"table": [
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color1",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string1",
													"type": "string"
												},
												{
													"description": "A table containing red, green, blue, and optional alpha components to use as a color for the next string in the table, in the form of {red, green, blue, alpha}.",
													"name": "color2",
													"type": "table"
												},
												{
													"description": "A string of text which has a color specified by the previous color.",
													"name": "string2",
													"type": "string"
												},
												{
													"description": "Additional colors and strings.",
													"name": "...",
													"type": "tables and strings"
												}
											],
											"type": "table"
										},
										{
											"description": "The maximum width in pixels of the text before it gets automatically wrapped to a new line.",
											"name": "wraplimit",
											"type": "number"
										},
										{
											"description": "The alignment of the text.",
											"name": "align",
											"type": "AlignMode"
										}
									],
									"description": "The color set by love.graphics.setColor will be combined (multiplied) with the colors of the text, when drawing the Text object."
								}
							]
						}
					],
					"name": "Text",
					"supertypes": [
						"Drawable",
						"Object"
					]
				},
				{
					"description": "Superclass for drawable objects which represent a texture. All Textures can be drawn with Quads. This is an abstract type that can't be created directly.",
					"functions": [
						{
							"description": "Gets the DPI scale factor of the Texture.\n\nThe DPI scale factor represents relative pixel density. A DPI scale factor of 2 means the texture has twice the pixel density in each dimension (4 times as many pixels in the same area) compared to a texture with a DPI scale factor of 1.\n\nFor example, a texture with pixel dimensions of 100x100 with a DPI scale factor of 2 will be drawn as if it was 50x50. This is useful with high-dpi /  retina displays to easily allow swapping out higher or lower pixel density Images and Canvases without needing any extra manual scaling logic.",
							"name": "getDPIScale",
							"variants": [
								{
									"returns": [
										{
											"description": "The DPI scale factor of the Texture.",
											"name": "dpiscale",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the depth of a Volume Texture. Returns 1 for 2D, Cubemap, and Array textures.",
							"name": "getDepth",
							"variants": [
								{
									"returns": [
										{
											"description": "The depth of the volume Texture.",
											"name": "depth",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the comparison mode used when sampling from a depth texture in a shader.\n\nDepth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.",
							"name": "getDepthSampleMode",
							"variants": [
								{
									"returns": [
										{
											"default": "nil",
											"description": "The comparison mode used when sampling from this texture in a shader, or nil if setDepthSampleMode has not been called on this Texture.",
											"name": "compare",
											"type": "CompareMode"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width and height of the Texture.",
							"name": "getDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the Texture.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of the Texture.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the filter mode of the Texture.",
							"name": "getFilter",
							"variants": [
								{
									"returns": [
										{
											"description": "Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).",
											"name": "min",
											"type": "FilterMode"
										},
										{
											"description": "Filter mode to use when magnifying the texture (rendering it at a smaller size on-screen than its size in pixels).",
											"name": "mag",
											"type": "FilterMode"
										},
										{
											"description": "Maximum amount of anisotropic filtering used.",
											"name": "anisotropy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the pixel format of the Texture.",
							"name": "getFormat",
							"variants": [
								{
									"returns": [
										{
											"description": "The pixel format the Texture was created with.",
											"name": "format",
											"type": "PixelFormat"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height of the Texture.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the Texture.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of layers / slices in an Array Texture. Returns 1 for 2D, Cubemap, and Volume textures.",
							"name": "getLayerCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of layers in the Array Texture.",
											"name": "layers",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of mipmaps contained in the Texture. If the texture was not created with mipmaps, it will return 1.",
							"name": "getMipmapCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of mipmaps in the Texture.",
											"name": "mipmaps",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.",
							"name": "getMipmapFilter",
							"variants": [
								{
									"returns": [
										{
											"description": "The filter mode used in between mipmap levels. nil if mipmap filtering is not enabled.",
											"name": "mode",
											"type": "FilterMode"
										},
										{
											"description": "Value used to determine whether the image should use more or less detailed mipmap levels than normal when drawing.",
											"name": "sharpness",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width and height in pixels of the Texture.\n\nTexture:getDimensions gets the dimensions of the texture in units scaled by the texture's DPI scale factor, rather than pixels. Use getDimensions for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelDimensions only when dealing specifically with pixels, for example when using Canvas:newImageData.",
							"name": "getPixelDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the Texture, in pixels.",
											"name": "pixelwidth",
											"type": "number"
										},
										{
											"description": "The height of the Texture, in pixels.",
											"name": "pixelheight",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height in pixels of the Texture.\n\nDPI scale factor, rather than pixels. Use getHeight for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelHeight only when dealing specifically with pixels, for example when using Canvas:newImageData.",
							"name": "getPixelHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the Texture, in pixels.",
											"name": "pixelheight",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width in pixels of the Texture.\n\nDPI scale factor, rather than pixels. Use getWidth for calculations related to drawing the texture (calculating an origin offset, for example), and getPixelWidth only when dealing specifically with pixels, for example when using Canvas:newImageData.",
							"name": "getPixelWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the Texture, in pixels.",
											"name": "pixelwidth",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the type of the Texture.",
							"name": "getTextureType",
							"variants": [
								{
									"returns": [
										{
											"description": "The type of the Texture.",
											"name": "texturetype",
											"type": "TextureType"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width of the Texture.",
							"name": "getWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the Texture.",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the wrapping properties of a Texture.\n\nThis function returns the currently set horizontal and vertical wrapping modes for the texture.",
							"name": "getWrap",
							"variants": [
								{
									"returns": [
										{
											"description": "Horizontal wrapping mode of the texture.",
											"name": "horiz",
											"type": "WrapMode"
										},
										{
											"description": "Vertical wrapping mode of the texture.",
											"name": "vert",
											"type": "WrapMode"
										},
										{
											"description": "Wrapping mode for the z-axis of a Volume texture.",
											"name": "depth",
											"type": "WrapMode"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Texture can be drawn and sent to a Shader.\n\nCanvases created with stencil and/or depth PixelFormats are not readable by default, unless readable=true is specified in the settings table passed into love.graphics.newCanvas.\n\nNon-readable Canvases can still be rendered to.",
							"name": "isReadable",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Texture is readable.",
											"name": "readable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the comparison mode used when sampling from a depth texture in a shader. Depth texture comparison modes are advanced low-level functionality typically used with shadow mapping in 3D.\n\nWhen using a depth texture with a comparison mode set in a shader, it must be declared as a sampler2DShadow and used in a GLSL 3 Shader. The result of accessing the texture in the shader will return a float between 0 and 1, proportional to the number of samples (up to 4 samples will be used if bilinear filtering is enabled) that passed the test set by the comparison operation.\n\nDepth texture comparison can only be used with readable depth-formatted Canvases.",
							"name": "setDepthSampleMode",
							"variants": [
								{
									"arguments": [
										{
											"description": "The comparison mode used when sampling from this texture in a shader.",
											"name": "compare",
											"type": "CompareMode"
										}
									]
								}
							]
						},
						{
							"description": "Sets the filter mode of the Texture.",
							"name": "setFilter",
							"variants": [
								{
									"arguments": [
										{
											"description": "Filter mode to use when minifying the texture (rendering it at a smaller size on-screen than its size in pixels).",
											"name": "min",
											"type": "FilterMode"
										},
										{
											"default": "min",
											"description": "Filter mode to use when magnifying the texture (rendering it at a larger size on-screen than its size in pixels).",
											"name": "mag",
											"type": "FilterMode"
										},
										{
											"default": "1",
											"description": "Maximum amount of anisotropic filtering to use.",
											"name": "anisotropy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the mipmap filter mode for a Texture. Prior to 11.0 this method only worked on Images.\n\nMipmapping is useful when drawing a texture at a reduced scale. It can improve performance and reduce aliasing issues.\n\nIn created with the mipmaps flag enabled for the mipmap filter to have any effect. In versions prior to 0.10.0 it's best to call this method directly after creating the image with love.graphics.newImage, to avoid bugs in certain graphics drivers.\n\nDue to hardware restrictions and driver bugs, in versions prior to 0.10.0 images that weren't loaded from a CompressedData must have power-of-two dimensions (64x64, 512x256, etc.) to use mipmaps.",
							"name": "setMipmapFilter",
							"variants": [
								{
									"arguments": [
										{
											"description": "The filter mode to use in between mipmap levels. 'nearest' will often give better performance.",
											"name": "filtermode",
											"type": "FilterMode"
										},
										{
											"default": "0",
											"description": "A positive sharpness value makes the texture use a more detailed mipmap level when drawing, at the expense of performance. A negative value does the reverse.",
											"name": "sharpness",
											"type": "number"
										}
									],
									"description": "On mobile devices (Android and iOS), the sharpness parameter is not supported and will do nothing. You can use a custom compressed and its CompressedData has mipmap data included, it will use that."
								},
								{
									"description": "Disables mipmap filtering."
								}
							]
						},
						{
							"description": "Sets the wrapping properties of a Texture.\n\nThis function sets the way a Texture is repeated when it is drawn with a Quad that is larger than the texture's extent, or when a custom Shader is used which uses texture coordinates outside of [0, 1]. A texture may be clamped or set to repeat in both horizontal and vertical directions.\n\nClamped textures appear only once (with the edges of the texture stretching to fill the extent of the Quad), whereas repeated ones repeat as many times as there is room in the Quad.",
							"name": "setWrap",
							"variants": [
								{
									"arguments": [
										{
											"description": "Horizontal wrapping mode of the texture.",
											"name": "horiz",
											"type": "WrapMode"
										},
										{
											"default": "horiz",
											"description": "Vertical wrapping mode of the texture.",
											"name": "vert",
											"type": "WrapMode"
										},
										{
											"default": "horiz",
											"description": "Wrapping mode for the z-axis of a Volume texture.",
											"name": "depth",
											"type": "WrapMode"
										}
									]
								}
							]
						}
					],
					"name": "Texture",
					"supertypes": [
						"Drawable",
						"Object"
					]
				},
				{
					"constructors": [
						"newVideo"
					],
					"description": "A drawable video.",
					"functions": [
						{
							"description": "Gets the width and height of the Video in pixels.",
							"name": "getDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the Video.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of the Video.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the scaling filters used when drawing the Video.",
							"name": "getFilter",
							"variants": [
								{
									"returns": [
										{
											"description": "The filter mode used when scaling the Video down.",
											"name": "min",
											"type": "FilterMode"
										},
										{
											"description": "The filter mode used when scaling the Video up.",
											"name": "mag",
											"type": "FilterMode"
										},
										{
											"description": "Maximum amount of anisotropic filtering used.",
											"name": "anisotropy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height of the Video in pixels.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the Video.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the audio Source used for playing back the video's audio. May return nil if the video has no audio, or if Video:setSource is called with a nil argument.",
							"name": "getSource",
							"variants": [
								{
									"returns": [
										{
											"description": "The audio Source used for audio playback, or nil if the video has no audio.",
											"name": "source",
											"type": "Source"
										}
									]
								}
							]
						},
						{
							"description": "Gets the VideoStream object used for decoding and controlling the video.",
							"name": "getStream",
							"variants": [
								{
									"returns": [
										{
											"description": "The VideoStream used for decoding and controlling the video.",
											"name": "stream",
											"type": "VideoStream"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width of the Video in pixels.",
							"name": "getWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the Video.",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Video is currently playing.",
							"name": "isPlaying",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the video is playing.",
											"name": "playing",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Pauses the Video.",
							"name": "pause",
							"variants": [
								[]
							]
						},
						{
							"description": "Starts playing the Video. In order for the video to appear onscreen it must be drawn with love.graphics.draw.",
							"name": "play",
							"variants": [
								[]
							]
						},
						{
							"description": "Rewinds the Video to the beginning.",
							"name": "rewind",
							"variants": [
								[]
							]
						},
						{
							"description": "Sets the current playback position of the Video.",
							"name": "seek",
							"variants": [
								{
									"arguments": [
										{
											"description": "The time in seconds since the beginning of the Video.",
											"name": "offset",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the scaling filters used when drawing the Video.",
							"name": "setFilter",
							"variants": [
								{
									"arguments": [
										{
											"description": "The filter mode used when scaling the Video down.",
											"name": "min",
											"type": "FilterMode"
										},
										{
											"description": "The filter mode used when scaling the Video up.",
											"name": "mag",
											"type": "FilterMode"
										},
										{
											"default": "1",
											"description": "Maximum amount of anisotropic filtering used.",
											"name": "anisotropy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the audio Source used for playing back the video's audio. The audio Source also controls playback speed and synchronization.",
							"name": "setSource",
							"variants": [
								{
									"arguments": [
										{
											"default": "nil",
											"description": "The audio Source used for audio playback, or nil to disable audio synchronization.",
											"name": "source",
											"type": "Source"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current playback position of the Video.",
							"name": "tell",
							"variants": [
								{
									"returns": [
										{
											"description": "The time in seconds since the beginning of the Video.",
											"name": "seconds",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Video",
					"supertypes": [
						"Drawable",
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides an interface to decode encoded image data.",
			"enums": [
				{
					"constants": [
						{
							"description": "The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.",
							"name": "DXT1"
						},
						{
							"description": "The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.",
							"name": "DXT3"
						},
						{
							"description": "The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.",
							"name": "DXT5"
						},
						{
							"description": "The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.",
							"name": "BC4"
						},
						{
							"description": "The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.",
							"name": "BC4s"
						},
						{
							"description": "The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.",
							"name": "BC5"
						},
						{
							"description": "The signed variant of the BC5 format.",
							"name": "BC5s"
						},
						{
							"description": "The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.",
							"name": "BC6h"
						},
						{
							"description": "The signed variant of the BC6H format. Stores RGB data in the range of +65504.",
							"name": "BC6hs"
						},
						{
							"description": "The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.",
							"name": "BC7"
						},
						{
							"description": "The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.",
							"name": "ETC1"
						},
						{
							"description": "The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.",
							"name": "ETC2rgb"
						},
						{
							"description": "The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.",
							"name": "ETC2rgba"
						},
						{
							"description": "The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.",
							"name": "ETC2rgba1"
						},
						{
							"description": "The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.",
							"name": "EACr"
						},
						{
							"description": "The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.",
							"name": "EACrs"
						},
						{
							"description": "The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.",
							"name": "EACrg"
						},
						{
							"description": "The signed two-channel variant of the EAC format.",
							"name": "EACrgs"
						},
						{
							"description": "The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.",
							"name": "PVR1rgb2"
						},
						{
							"description": "The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.",
							"name": "PVR1rgb4"
						},
						{
							"description": "The 2 bit per pixel RGBA variant of the PVRTC1 format.",
							"name": "PVR1rgba2"
						},
						{
							"description": "The 4 bit per pixel RGBA variant of the PVRTC1 format.",
							"name": "PVR1rgba4"
						},
						{
							"description": "The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.",
							"name": "ASTC4x4"
						},
						{
							"description": "The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.",
							"name": "ASTC5x4"
						},
						{
							"description": "The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.",
							"name": "ASTC5x5"
						},
						{
							"description": "The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.",
							"name": "ASTC6x5"
						},
						{
							"description": "The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.",
							"name": "ASTC6x6"
						},
						{
							"description": "The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.",
							"name": "ASTC8x5"
						},
						{
							"description": "The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.",
							"name": "ASTC8x6"
						},
						{
							"description": "The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.",
							"name": "ASTC8x8"
						},
						{
							"description": "The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.",
							"name": "ASTC10x5"
						},
						{
							"description": "The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.",
							"name": "ASTC10x6"
						},
						{
							"description": "The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.",
							"name": "ASTC10x8"
						},
						{
							"description": "The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.",
							"name": "ASTC10x10"
						},
						{
							"description": "The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.",
							"name": "ASTC12x10"
						},
						{
							"description": "The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.",
							"name": "ASTC12x12"
						}
					],
					"description": "Compressed image data formats. Here and here are a couple overviews of many of the formats.\n\nUnlike traditional PNG or jpeg, these formats stay compressed in RAM and in the graphics card's VRAM. This is good for saving memory space as well as improving performance, since the graphics card will be able to keep more of the image's pixels in its fast-access cache when drawing it.",
					"name": "CompressedImageFormat"
				},
				{
					"constants": [
						{
							"description": "Targa image format.",
							"name": "tga"
						},
						{
							"description": "PNG image format.",
							"name": "png"
						},
						{
							"description": "JPG image format.",
							"name": "jpg"
						},
						{
							"description": "BMP image format.",
							"name": "bmp"
						}
					],
					"description": "Encoded image formats.",
					"name": "ImageFormat"
				},
				{
					"constants": [
						{
							"description": "Indicates unknown pixel format, used internally.",
							"name": "unknown"
						},
						{
							"description": "Alias for rgba8, or srgba8 if gamma-correct rendering is enabled.",
							"name": "normal"
						},
						{
							"description": "A format suitable for high dynamic range content - an alias for the rgba16f format, normally.",
							"name": "hdr"
						},
						{
							"description": "Single-channel (red component) format (8 bpp).",
							"name": "r8"
						},
						{
							"description": "Two channels (red and green components) with 8 bits per channel (16 bpp).",
							"name": "rg8"
						},
						{
							"description": "8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255 (0-1 in shaders).",
							"name": "rgba8"
						},
						{
							"description": "gamma-correct version of rgba8.",
							"name": "srgba8"
						},
						{
							"description": "Single-channel (red component) format (16 bpp).",
							"name": "r16"
						},
						{
							"description": "Two channels (red and green components) with 16 bits per channel (32 bpp).",
							"name": "rg16"
						},
						{
							"description": "16 bits per channel (64 bpp) RGBA. Color channel values range from 0-65535 (0-1 in shaders).",
							"name": "rgba16"
						},
						{
							"description": "Floating point single-channel format (16 bpp). Color values can range from [-65504, +65504].",
							"name": "r16f"
						},
						{
							"description": "Floating point two-channel format with 16 bits per channel (32 bpp). Color values can range from [-65504, +65504].",
							"name": "rg16f"
						},
						{
							"description": "Floating point RGBA with 16 bits per channel (64 bpp). Color values can range from [-65504, +65504].",
							"name": "rgba16f"
						},
						{
							"description": "Floating point single-channel format (32 bpp).",
							"name": "r32f"
						},
						{
							"description": "Floating point two-channel format with 32 bits per channel (64 bpp).",
							"name": "rg32f"
						},
						{
							"description": "Floating point RGBA with 32 bits per channel (128 bpp).",
							"name": "rgba32f"
						},
						{
							"description": "Same as rg8, but accessed as (L, L, L, A)",
							"name": "la8"
						},
						{
							"description": "4 bits per channel (16 bpp) RGBA.",
							"name": "rgba4"
						},
						{
							"description": "RGB with 5 bits each, and a 1-bit alpha channel (16 bpp).",
							"name": "rgb5a1"
						},
						{
							"description": "RGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha channel in this format.",
							"name": "rgb565"
						},
						{
							"description": "RGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp).",
							"name": "rgb10a2"
						},
						{
							"description": "Floating point RGB with 11 bits in the red and green channels, and 10 bits in the blue channel (32 bpp). There is no alpha channel. Color values can range from [0, +65024].",
							"name": "rg11b10f"
						},
						{
							"description": "No depth buffer and 8-bit stencil buffer.",
							"name": "stencil8"
						},
						{
							"description": "16-bit depth buffer and no stencil buffer.",
							"name": "depth16"
						},
						{
							"description": "24-bit depth buffer and no stencil buffer.",
							"name": "depth24"
						},
						{
							"description": "32-bit float depth buffer and no stencil buffer.",
							"name": "depth32f"
						},
						{
							"description": "24-bit depth buffer and 8-bit stencil buffer.",
							"name": "depth24stencil8"
						},
						{
							"description": "32-bit float depth buffer and 8-bit stencil buffer.",
							"name": "depth32fstencil8"
						},
						{
							"description": "The DXT1 format. RGB data at 4 bits per pixel (compared to 32 bits for ImageData and regular Images.) Suitable for fully opaque images on desktop systems.",
							"name": "DXT1"
						},
						{
							"description": "The DXT3 format. RGBA data at 8 bits per pixel. Smooth variations in opacity do not mix well with this format.",
							"name": "DXT3"
						},
						{
							"description": "The DXT5 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on desktop systems.",
							"name": "DXT5"
						},
						{
							"description": "The BC4 format (also known as 3Dc+ or ATI1.) Stores just the red channel, at 4 bits per pixel.",
							"name": "BC4"
						},
						{
							"description": "The signed variant of the BC4 format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.",
							"name": "BC4s"
						},
						{
							"description": "The BC5 format (also known as 3Dc or ATI2.) Stores red and green channels at 8 bits per pixel.",
							"name": "BC5"
						},
						{
							"description": "The signed variant of the BC5 format.",
							"name": "BC5s"
						},
						{
							"description": "The BC6H format. Stores half-precision floating-point RGB data in the range of 65504 at 8 bits per pixel. Suitable for HDR images on desktop systems.",
							"name": "BC6h"
						},
						{
							"description": "The signed variant of the BC6H format. Stores RGB data in the range of +65504.",
							"name": "BC6hs"
						},
						{
							"description": "The BC7 format (also known as BPTC.) Stores RGB or RGBA data at 8 bits per pixel.",
							"name": "BC7"
						},
						{
							"description": "The ETC1 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on older Android devices.",
							"name": "ETC1"
						},
						{
							"description": "The RGB variant of the ETC2 format. RGB data at 4 bits per pixel. Suitable for fully opaque images on newer mobile devices.",
							"name": "ETC2rgb"
						},
						{
							"description": "The RGBA variant of the ETC2 format. RGBA data at 8 bits per pixel. Recommended for images with varying opacity on newer mobile devices.",
							"name": "ETC2rgba"
						},
						{
							"description": "The RGBA variant of the ETC2 format where pixels are either fully transparent or fully opaque. RGBA data at 4 bits per pixel.",
							"name": "ETC2rgba1"
						},
						{
							"description": "The single-channel variant of the EAC format. Stores just the red channel, at 4 bits per pixel.",
							"name": "EACr"
						},
						{
							"description": "The signed single-channel variant of the EAC format. Same as above but pixel values in the texture are in the range of 1 instead of 1 in shaders.",
							"name": "EACrs"
						},
						{
							"description": "The two-channel variant of the EAC format. Stores red and green channels at 8 bits per pixel.",
							"name": "EACrg"
						},
						{
							"description": "The signed two-channel variant of the EAC format.",
							"name": "EACrgs"
						},
						{
							"description": "The 2 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 2 bits per pixel. Textures compressed with PVRTC1 formats must be square and power-of-two sized.",
							"name": "PVR1rgb2"
						},
						{
							"description": "The 4 bit per pixel RGB variant of the PVRTC1 format. Stores RGB data at 4 bits per pixel.",
							"name": "PVR1rgb4"
						},
						{
							"description": "The 2 bit per pixel RGBA variant of the PVRTC1 format.",
							"name": "PVR1rgba2"
						},
						{
							"description": "The 4 bit per pixel RGBA variant of the PVRTC1 format.",
							"name": "PVR1rgba4"
						},
						{
							"description": "The 4x4 pixels per block variant of the ASTC format. RGBA data at 8 bits per pixel.",
							"name": "ASTC4x4"
						},
						{
							"description": "The 5x4 pixels per block variant of the ASTC format. RGBA data at 6.4 bits per pixel.",
							"name": "ASTC5x4"
						},
						{
							"description": "The 5x5 pixels per block variant of the ASTC format. RGBA data at 5.12 bits per pixel.",
							"name": "ASTC5x5"
						},
						{
							"description": "The 6x5 pixels per block variant of the ASTC format. RGBA data at 4.27 bits per pixel.",
							"name": "ASTC6x5"
						},
						{
							"description": "The 6x6 pixels per block variant of the ASTC format. RGBA data at 3.56 bits per pixel.",
							"name": "ASTC6x6"
						},
						{
							"description": "The 8x5 pixels per block variant of the ASTC format. RGBA data at 3.2 bits per pixel.",
							"name": "ASTC8x5"
						},
						{
							"description": "The 8x6 pixels per block variant of the ASTC format. RGBA data at 2.67 bits per pixel.",
							"name": "ASTC8x6"
						},
						{
							"description": "The 8x8 pixels per block variant of the ASTC format. RGBA data at 2 bits per pixel.",
							"name": "ASTC8x8"
						},
						{
							"description": "The 10x5 pixels per block variant of the ASTC format. RGBA data at 2.56 bits per pixel.",
							"name": "ASTC10x5"
						},
						{
							"description": "The 10x6 pixels per block variant of the ASTC format. RGBA data at 2.13 bits per pixel.",
							"name": "ASTC10x6"
						},
						{
							"description": "The 10x8 pixels per block variant of the ASTC format. RGBA data at 1.6 bits per pixel.",
							"name": "ASTC10x8"
						},
						{
							"description": "The 10x10 pixels per block variant of the ASTC format. RGBA data at 1.28 bits per pixel.",
							"name": "ASTC10x10"
						},
						{
							"description": "The 12x10 pixels per block variant of the ASTC format. RGBA data at 1.07 bits per pixel.",
							"name": "ASTC12x10"
						},
						{
							"description": "The 12x12 pixels per block variant of the ASTC format. RGBA data at 0.89 bits per pixel.",
							"name": "ASTC12x12"
						}
					],
					"description": "Pixel formats for Textures, ImageData, and CompressedImageData.",
					"name": "PixelFormat"
				}
			],
			"functions": [
				{
					"description": "Determines whether a file can be loaded as CompressedImageData.",
					"name": "isCompressed",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filename of the potentially compressed image file.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "Whether the file can be loaded as CompressedImageData or not.",
									"name": "compressed",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A FileData potentially containing a compressed image.",
									"name": "fileData",
									"type": "FileData"
								}
							],
							"returns": [
								{
									"description": "Whether the FileData can be loaded as CompressedImageData or not.",
									"name": "compressed",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Create a new CompressedImageData object from a compressed image file. LÖVE supports several compressed texture formats, enumerated in the CompressedImageFormat page.",
					"name": "newCompressedData",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filename of the compressed image file.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The new CompressedImageData object.",
									"name": "compressedImageData",
									"type": "CompressedImageData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A FileData containing a compressed image.",
									"name": "fileData",
									"type": "FileData"
								}
							],
							"returns": [
								{
									"description": "The new CompressedImageData object.",
									"name": "compressedImageData",
									"type": "CompressedImageData"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new ImageData object.",
					"name": "newImageData",
					"variants": [
						{
							"arguments": [
								{
									"description": "The width of the ImageData.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the ImageData.",
									"name": "height",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new blank ImageData object. Each pixel's color values, (including the alpha values!) will be set to zero.",
									"name": "imageData",
									"type": "ImageData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The width of the ImageData.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the ImageData.",
									"name": "height",
									"type": "number"
								},
								{
									"default": "'rgba8'",
									"description": "The pixel format of the ImageData.",
									"name": "format",
									"type": "PixelFormat"
								},
								{
									"default": "nil",
									"description": "Optional raw byte data to load into the ImageData, in the format specified by ''format''.",
									"name": "data",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The new ImageData object.",
									"name": "imageData",
									"type": "ImageData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The width of the ImageData.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the ImageData.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The data to load into the ImageData (RGBA bytes, left to right and top to bottom).",
									"name": "data",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The new ImageData object.",
									"name": "imageData",
									"type": "ImageData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The filename of the image file.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The new ImageData object.",
									"name": "imageData",
									"type": "ImageData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The encoded file data to decode into image data.",
									"name": "filedata",
									"type": "FileData"
								}
							],
							"returns": [
								{
									"description": "The new ImageData object.",
									"name": "imageData",
									"type": "ImageData"
								}
							]
						}
					]
				}
			],
			"name": "image",
			"types": [
				{
					"constructors": [
						"newCompressedData"
					],
					"description": "Represents compressed image data designed to stay compressed in RAM.\n\nCompressedImageData encompasses standard compressed texture formats such as  DXT1, DXT5, and BC5 / 3Dc.\n\nYou can't draw CompressedImageData directly to the screen. See Image for that.",
					"functions": [
						{
							"description": "Gets the width and height of the CompressedImageData.",
							"name": "getDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the CompressedImageData.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of the CompressedImageData.",
											"name": "height",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A mipmap level. Must be in the range of CompressedImageData:getMipmapCount().",
											"name": "level",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The width of a specific mipmap level of the CompressedImageData.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of a specific mipmap level of the CompressedImageData.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the format of the CompressedImageData.",
							"name": "getFormat",
							"variants": [
								{
									"returns": [
										{
											"description": "The format of the CompressedImageData.",
											"name": "format",
											"type": "CompressedImageFormat"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height of the CompressedImageData.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the CompressedImageData.",
											"name": "height",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A mipmap level. Must be in the range of CompressedImageData:getMipmapCount().",
											"name": "level",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The height of a specific mipmap level of the CompressedImageData.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of mipmap levels in the CompressedImageData. The base mipmap level (original image) is included in the count.",
							"name": "getMipmapCount",
							"variants": [
								{
									"description": "Mipmap filtering cannot be activated for an Image:setMipmapFilter will error. Most tools which can create compressed textures are able to automatically generate mipmaps for them in the same file.",
									"returns": [
										{
											"description": "The number of mipmap levels stored in the CompressedImageData.",
											"name": "mipmaps",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width of the CompressedImageData.",
							"name": "getWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the CompressedImageData.",
											"name": "width",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "A mipmap level. Must be in the range of  CompressedImageData:getMipmapCount().",
											"name": "level",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The width of a specific mipmap level of the CompressedImageData.",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "CompressedImageData",
					"supertypes": [
						"Data",
						"Object"
					]
				},
				{
					"constructors": [
						"newImageData"
					],
					"description": "Raw (decoded) image data.\n\nYou can't draw ImageData directly to screen. See Image for that.",
					"functions": [
						{
							"description": "Encodes the ImageData and optionally writes it to the save directory.",
							"name": "encode",
							"variants": [
								{
									"arguments": [
										{
											"description": "The format to encode the image as.",
											"name": "format",
											"type": "ImageFormat"
										},
										{
											"default": "nil",
											"description": "The filename to write the file to. If nil, no file will be written but the FileData will still be returned.",
											"name": "filename",
											"type": "string"
										}
									],
									"returns": [
										{
											"description": "The encoded image as a new FileData object.",
											"name": "filedata",
											"type": "FileData"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of a file to write encoded data to. The format will be automatically deduced from the file extension.",
											"name": "outFile",
											"type": "string"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Name of a file to write encoded data to.",
											"name": "outFile",
											"type": "string"
										},
										{
											"description": "The format to encode the image in.",
											"name": "format",
											"type": "ImageFormat"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width and height of the ImageData in pixels.",
							"name": "getDimensions",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the ImageData in pixels.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "The height of the ImageData in pixels.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the height of the ImageData in pixels.",
							"name": "getHeight",
							"variants": [
								{
									"returns": [
										{
											"description": "The height of the ImageData in pixels.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the color of a pixel at a specific position in the image.\n\nValid x and y values start at 0 and go up to image width and height minus 1. Non-integer values are floored.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "getPixel",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position of the pixel on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the pixel on the y-axis.",
											"name": "y",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The red component (0-1).",
											"name": "r",
											"type": "number"
										},
										{
											"description": "The green component (0-1).",
											"name": "g",
											"type": "number"
										},
										{
											"description": "The blue component (0-1).",
											"name": "b",
											"type": "number"
										},
										{
											"description": "The alpha component (0-1).",
											"name": "a",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the width of the ImageData in pixels.",
							"name": "getWidth",
							"variants": [
								{
									"returns": [
										{
											"description": "The width of the ImageData in pixels.",
											"name": "width",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transform an image by applying a function to every pixel.\n\nThis function is a higher-order function. It takes another function as a parameter, and calls it once for each pixel in the ImageData.\n\nThe passed function is called with six parameters for each pixel in turn. The parameters are numbers that represent the x and y coordinates of the pixel and its red, green, blue and alpha values. The function should return the new red, green, blue, and alpha values for that pixel.\n\nfunction pixelFunction(x, y, r, g, b, a)\n\n    -- template for defining your own pixel mapping function\n\n    -- perform computations giving the new values for r, g, b and a\n\n    -- ...\n\n    return r, g, b, a\n\nend\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "mapPixel",
							"variants": [
								{
									"arguments": [
										{
											"description": "Function to apply to every pixel.",
											"name": "pixelFunction",
											"signature": {
												"arguments": [
													{
														"description": "The x coordinate of the current pixel.",
														"name": "x",
														"type": "number"
													},
													{
														"description": "The y coordinate of the current pixel.",
														"name": "y",
														"type": "number"
													},
													{
														"description": "The red color of the current pixel.",
														"name": "r",
														"type": "number"
													},
													{
														"description": "The green color of the current pixel.",
														"name": "g",
														"type": "number"
													},
													{
														"description": "The blue color of the current pixel.",
														"name": "b",
														"type": "number"
													},
													{
														"description": "The alpha of the current pixel.",
														"name": "a",
														"type": "number"
													}
												],
												"returns": [
													{
														"description": "New red color for the current pixel.",
														"name": "r",
														"type": "number"
													},
													{
														"description": "New green color for the current pixel.",
														"name": "g",
														"type": "number"
													},
													{
														"description": "New blue color for the current pixel.",
														"name": "b",
														"type": "number"
													},
													{
														"description": "New alpha for the current pixel.",
														"name": "a",
														"type": "number"
													}
												]
											},
											"type": "function"
										},
										{
											"default": "0",
											"description": "The x-axis of the top-left corner of the area within the ImageData to apply the function to.",
											"name": "x",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The y-axis of the top-left corner of the area within the ImageData to apply the function to.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "ImageData:getWidth()",
											"description": "The width of the area within the ImageData to apply the function to.",
											"name": "width",
											"type": "number"
										},
										{
											"default": "ImageData:getHeight()",
											"description": "The height of the area within the ImageData to apply the function to.",
											"name": "height",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Paste into ImageData from another source ImageData.",
							"name": "paste",
							"variants": [
								{
									"arguments": [
										{
											"description": "Source ImageData from which to copy.",
											"name": "source",
											"type": "ImageData"
										},
										{
											"description": "Destination top-left position on x-axis.",
											"name": "dx",
											"type": "number"
										},
										{
											"description": "Destination top-left position on y-axis.",
											"name": "dy",
											"type": "number"
										},
										{
											"description": "Source top-left position on x-axis.",
											"name": "sx",
											"type": "number"
										},
										{
											"description": "Source top-left position on y-axis.",
											"name": "sy",
											"type": "number"
										},
										{
											"description": "Source width.",
											"name": "sw",
											"type": "number"
										},
										{
											"description": "Source height.",
											"name": "sh",
											"type": "number"
										}
									],
									"description": "Note that this function just replaces the contents in the destination rectangle; it does not do any alpha blending."
								}
							]
						},
						{
							"description": "Sets the color of a pixel at a specific position in the image.\n\nValid x and y values start at 0 and go up to image width and height minus 1.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
							"name": "setPixel",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position of the pixel on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the pixel on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The red component (0-1).",
											"name": "r",
											"type": "number"
										},
										{
											"description": "The green component (0-1).",
											"name": "g",
											"type": "number"
										},
										{
											"description": "The blue component (0-1).",
											"name": "b",
											"type": "number"
										},
										{
											"description": "The alpha component (0-1).",
											"name": "a",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The position of the pixel on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the pixel on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"arraytype": "number",
											"description": "A numerical indexed table with the red, green, blue and alpha values as numbers.",
											"name": "color",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the pixel format of the ImageData.",
							"name": "getFormat",
							"variants": [
								{
									"returns": [
										{
											"description": "The pixel format the ImageData was created with.",
											"name": "format",
											"type": "PixelFormat"
										}
									]
								}
							]
						}
					],
					"name": "ImageData",
					"supertypes": [
						"Data",
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides an interface to the user's joystick.",
			"enums": [
				{
					"constants": [
						{
							"description": "The x-axis of the left thumbstick.",
							"name": "leftx"
						},
						{
							"description": "The y-axis of the left thumbstick.",
							"name": "lefty"
						},
						{
							"description": "The x-axis of the right thumbstick.",
							"name": "rightx"
						},
						{
							"description": "The y-axis of the right thumbstick.",
							"name": "righty"
						},
						{
							"description": "Left analog trigger.",
							"name": "triggerleft"
						},
						{
							"description": "Right analog trigger.",
							"name": "triggerright"
						}
					],
					"description": "Virtual gamepad axes.",
					"name": "GamepadAxis"
				},
				{
					"constants": [
						{
							"description": "Bottom face button (A).",
							"name": "a"
						},
						{
							"description": "Right face button (B).",
							"name": "b"
						},
						{
							"description": "Left face button (X).",
							"name": "x"
						},
						{
							"description": "Top face button (Y).",
							"name": "y"
						},
						{
							"description": "Back button.",
							"name": "back"
						},
						{
							"description": "Guide button.",
							"name": "guide"
						},
						{
							"description": "Start button.",
							"name": "start"
						},
						{
							"description": "Left stick click button.",
							"name": "leftstick"
						},
						{
							"description": "Right stick click button.",
							"name": "rightstick"
						},
						{
							"description": "Left bumper.",
							"name": "leftshoulder"
						},
						{
							"description": "Right bumper.",
							"name": "rightshoulder"
						},
						{
							"description": "D-pad up.",
							"name": "dpup"
						},
						{
							"description": "D-pad down.",
							"name": "dpdown"
						},
						{
							"description": "D-pad left.",
							"name": "dpleft"
						},
						{
							"description": "D-pad right.",
							"name": "dpright"
						}
					],
					"description": "Virtual gamepad buttons.",
					"name": "GamepadButton"
				},
				{
					"constants": [
						{
							"description": "Centered",
							"name": "c"
						},
						{
							"description": "Down",
							"name": "d"
						},
						{
							"description": "Left",
							"name": "l"
						},
						{
							"description": "Left+Down",
							"name": "ld"
						},
						{
							"description": "Left+Up",
							"name": "lu"
						},
						{
							"description": "Right",
							"name": "r"
						},
						{
							"description": "Right+Down",
							"name": "rd"
						},
						{
							"description": "Right+Up",
							"name": "ru"
						},
						{
							"description": "Up",
							"name": "u"
						}
					],
					"description": "Joystick hat positions.",
					"name": "JoystickHat"
				},
				{
					"constants": [
						{
							"description": "Analog axis.",
							"name": "axis"
						},
						{
							"description": "Button.",
							"name": "button"
						},
						{
							"description": "8-direction hat value.",
							"name": "hat"
						}
					],
					"description": "Types of Joystick inputs.",
					"name": "JoystickInputType"
				}
			],
			"functions": [
				{
					"description": "Gets the full gamepad mapping string of the Joysticks which have the given GUID, or nil if the GUID isn't recognized as a gamepad.\n\nThe mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.",
					"name": "getGamepadMappingString",
					"variants": [
						{
							"arguments": [
								{
									"description": "The GUID value to get the mapping string for.",
									"name": "guid",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A string containing the Joystick's gamepad mappings, or nil if the GUID is not recognized as a gamepad.",
									"name": "mappingstring",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the number of connected joysticks.",
					"name": "getJoystickCount",
					"variants": [
						{
							"returns": [
								{
									"description": "The number of connected joysticks.",
									"name": "joystickcount",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets a list of connected Joysticks.",
					"name": "getJoysticks",
					"variants": [
						{
							"returns": [
								{
									"arraytype": "Joystick",
									"description": "The list of currently connected Joysticks.",
									"name": "joysticks",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Loads a gamepad mappings string or file created with love.joystick.saveGamepadMappings.\n\nIt also recognizes any SDL gamecontroller mapping string, such as those created with Steam's Big Picture controller configure interface, or this nice database. If a new mapping is loaded for an already known controller GUID, the later version will overwrite the one currently loaded.",
					"name": "loadGamepadMappings",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filename to load the mappings string from.",
									"name": "filename",
									"type": "string"
								}
							],
							"description": "Loads a gamepad mappings string from a file."
						},
						{
							"arguments": [
								{
									"description": "The mappings string to load.",
									"name": "mappings",
									"type": "string"
								}
							],
							"description": "Loads a gamepad mappings string directly."
						}
					]
				},
				{
					"description": "Saves the virtual gamepad mappings of all recognized as gamepads and have either been recently used or their gamepad bindings have been modified.\n\nThe mappings are stored as a string for use with love.joystick.loadGamepadMappings.",
					"name": "saveGamepadMappings",
					"variants": [
						{
							"arguments": [
								{
									"description": "The filename to save the mappings string to.",
									"name": "filename",
									"type": "string"
								}
							],
							"description": "Saves the gamepad mappings of all relevant joysticks to a file.",
							"returns": [
								{
									"description": "The mappings string that was written to the file.",
									"name": "mappings",
									"type": "string"
								}
							]
						},
						{
							"description": "Returns the mappings string without writing to a file.",
							"returns": [
								{
									"description": "The mappings string.",
									"name": "mappings",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Binds a virtual gamepad input to a button, axis or hat for all Joysticks of a certain type. For example, if this function is used with a GUID returned by a Dualshock 3 controller in OS X, the binding will affect Joystick:getGamepadAxis and Joystick:isGamepadDown for ''all'' Dualshock 3 controllers used with the game when run in OS X.\n\nLÖVE includes built-in gamepad bindings for many common controllers. This function lets you change the bindings or add new ones for types of Joysticks which aren't recognized as gamepads by default.\n\nThe virtual gamepad buttons and axes are designed around the Xbox 360 controller layout.",
					"name": "setGamepadMapping",
					"variants": [
						{
							"arguments": [
								{
									"description": "The OS-dependent GUID for the type of Joystick the binding will affect.",
									"name": "guid",
									"type": "string"
								},
								{
									"description": "The virtual gamepad button to bind.",
									"name": "button",
									"type": "GamepadButton"
								},
								{
									"description": "The type of input to bind the virtual gamepad button to.",
									"name": "inputtype",
									"type": "JoystickInputType"
								},
								{
									"description": "The index of the axis, button, or hat to bind the virtual gamepad button to.",
									"name": "inputindex",
									"type": "number"
								},
								{
									"default": "nil",
									"description": "The direction of the hat, if the virtual gamepad button will be bound to a hat. nil otherwise.",
									"name": "hatdir",
									"type": "JoystickHat"
								}
							],
							"returns": [
								{
									"description": "Whether the virtual gamepad button was successfully bound.",
									"name": "success",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The OS-dependent GUID for the type of Joystick the binding will affect.",
									"name": "guid",
									"type": "string"
								},
								{
									"description": "The virtual gamepad axis to bind.",
									"name": "axis",
									"type": "GamepadAxis"
								},
								{
									"description": "The type of input to bind the virtual gamepad axis to.",
									"name": "inputtype",
									"type": "JoystickInputType"
								},
								{
									"description": "The index of the axis, button, or hat to bind the virtual gamepad axis to.",
									"name": "inputindex",
									"type": "number"
								},
								{
									"default": "nil",
									"description": "The direction of the hat, if the virtual gamepad axis will be bound to a hat. nil otherwise.",
									"name": "hatdir",
									"type": "JoystickHat"
								}
							],
							"description": "The physical locations for the bound gamepad axes and buttons should correspond as closely as possible to the layout of a standard Xbox 360 controller.",
							"returns": [
								{
									"description": "Whether the virtual gamepad axis was successfully bound.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				}
			],
			"name": "joystick",
			"types": [
				{
					"description": "Represents a physical joystick.",
					"functions": [
						{
							"description": "Gets the direction of each axis.",
							"name": "getAxes",
							"variants": [
								{
									"returns": [
										{
											"description": "Direction of axis1.",
											"name": "axisDir1",
											"type": "number"
										},
										{
											"description": "Direction of axis2.",
											"name": "axisDir2",
											"type": "number"
										},
										{
											"description": "Direction of axisN.",
											"name": "axisDirN",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the direction of an axis.",
							"name": "getAxis",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the axis to be checked.",
											"name": "axis",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Current value of the axis.",
											"name": "direction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of axes on the joystick.",
							"name": "getAxisCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of axes available.",
											"name": "axes",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of buttons on the joystick.",
							"name": "getButtonCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of buttons available.",
											"name": "buttons",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the USB vendor ID, product ID, and product version numbers of joystick which consistent across operating systems.\n\nCan be used to show different icons, etc. for different gamepads.",
							"name": "getDeviceInfo",
							"variants": [
								{
									"description": "Some Linux distribution may not ship with SDL 2.0.6 or later, in which case this function will returns 0 for all the three values.",
									"returns": [
										{
											"description": "The USB vendor ID of the joystick.",
											"name": "vendorID",
											"type": "number"
										},
										{
											"description": "The USB product ID of the joystick.",
											"name": "productID",
											"type": "number"
										},
										{
											"description": "The product version of the joystick.",
											"name": "productVersion",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets a stable GUID unique to the type of the physical joystick which does not change over time. For example, all Sony Dualshock 3 controllers in OS X have the same GUID. The value is platform-dependent.",
							"name": "getGUID",
							"variants": [
								{
									"returns": [
										{
											"description": "The Joystick type's OS-dependent unique identifier.",
											"name": "guid",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the direction of a virtual gamepad axis. If the Joystick isn't recognized as a gamepad or isn't connected, this function will always return 0.",
							"name": "getGamepadAxis",
							"variants": [
								{
									"arguments": [
										{
											"description": "The virtual axis to be checked.",
											"name": "axis",
											"type": "GamepadAxis"
										}
									],
									"returns": [
										{
											"description": "Current value of the axis.",
											"name": "direction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the button, axis or hat that a virtual gamepad input is bound to.",
							"name": "getGamepadMapping",
							"variants": [
								{
									"arguments": [
										{
											"description": "The virtual gamepad axis to get the binding for.",
											"name": "axis",
											"type": "GamepadAxis"
										}
									],
									"description": "Returns nil if the Joystick isn't recognized as a gamepad or the virtual gamepad axis is not bound to a Joystick input.",
									"returns": [
										{
											"description": "The type of input the virtual gamepad axis is bound to.",
											"name": "inputtype",
											"type": "JoystickInputType"
										},
										{
											"description": "The index of the Joystick's button, axis or hat that the virtual gamepad axis is bound to.",
											"name": "inputindex",
											"type": "number"
										},
										{
											"description": "The direction of the hat, if the virtual gamepad axis is bound to a hat. nil otherwise.",
											"name": "hatdirection",
											"type": "JoystickHat"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The virtual gamepad button to get the binding for.",
											"name": "button",
											"type": "GamepadButton"
										}
									],
									"description": "The physical locations for the virtual gamepad axes and buttons correspond as closely as possible to the layout of a standard Xbox 360 controller.",
									"returns": [
										{
											"description": "The type of input the virtual gamepad button is bound to.",
											"name": "inputtype",
											"type": "JoystickInputType"
										},
										{
											"description": "The index of the Joystick's button, axis or hat that the virtual gamepad button is bound to.",
											"name": "inputindex",
											"type": "number"
										},
										{
											"description": "The direction of the hat, if the virtual gamepad button is bound to a hat. nil otherwise.",
											"name": "hatdirection",
											"type": "JoystickHat"
										}
									]
								}
							]
						},
						{
							"description": "Gets the full gamepad mapping string of this Joystick, or nil if it's not recognized as a gamepad.\n\nThe mapping string contains binding information used to map the Joystick's buttons an axes to the standard gamepad layout, and can be used later with love.joystick.loadGamepadMappings.",
							"name": "getGamepadMappingString",
							"variants": [
								{
									"returns": [
										{
											"description": "A string containing the Joystick's gamepad mappings, or nil if the Joystick is not recognized as a gamepad.",
											"name": "mappingstring",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the direction of the Joystick's hat.",
							"name": "getHat",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the hat to be checked.",
											"name": "hat",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The direction the hat is pushed.",
											"name": "direction",
											"type": "JoystickHat"
										}
									]
								}
							]
						},
						{
							"description": "Gets the number of hats on the joystick.",
							"name": "getHatCount",
							"variants": [
								{
									"returns": [
										{
											"description": "How many hats the joystick has.",
											"name": "hats",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the joystick's unique identifier. The identifier will remain the same for the life of the game, even when the Joystick is disconnected and reconnected, but it '''will''' change when the game is re-launched.",
							"name": "getID",
							"variants": [
								{
									"returns": [
										{
											"description": "The Joystick's unique identifier. Remains the same as long as the game is running.",
											"name": "id",
											"type": "number"
										},
										{
											"description": "Unique instance identifier. Changes every time the Joystick is reconnected. nil if the Joystick is not connected.",
											"name": "instanceid",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the name of the joystick.",
							"name": "getName",
							"variants": [
								{
									"returns": [
										{
											"description": "The name of the joystick.",
											"name": "name",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current vibration motor strengths on a Joystick with rumble support.",
							"name": "getVibration",
							"variants": [
								{
									"returns": [
										{
											"description": "Current strength of the left vibration motor on the Joystick.",
											"name": "left",
											"type": "number"
										},
										{
											"description": "Current strength of the right vibration motor on the Joystick.",
											"name": "right",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Joystick is connected.",
							"name": "isConnected",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the Joystick is currently connected, false otherwise.",
											"name": "connected",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Checks if a button on the Joystick is pressed.\n\nLÖVE 0.9.0 had a bug which required the button indices passed to Joystick:isDown to be 0-based instead of 1-based, for example button 1 would be 0 for this function. It was fixed in 0.9.1.",
							"name": "isDown",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of a button to check.",
											"name": "buttonN",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "True if any supplied button is down, false if not.",
											"name": "anyDown",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Joystick is recognized as a gamepad. If this is the case, the Joystick's buttons and axes can be used in a standardized manner across different operating systems and joystick models via Joystick:getGamepadAxis, Joystick:isGamepadDown, love.gamepadpressed, and related functions.\n\nLÖVE automatically recognizes most popular controllers with a similar layout to the Xbox 360 controller as gamepads, but you can add more with love.joystick.setGamepadMapping.",
							"name": "isGamepad",
							"variants": [
								{
									"description": "If the Joystick is recognized as a gamepad, the physical locations for the virtual gamepad axes and buttons correspond as closely as possible to the layout of a standard Xbox 360 controller.",
									"returns": [
										{
											"description": "True if the Joystick is recognized as a gamepad, false otherwise.",
											"name": "isgamepad",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Checks if a virtual gamepad button on the Joystick is pressed. If the Joystick is not recognized as a Gamepad or isn't connected, then this function will always return false.",
							"name": "isGamepadDown",
							"variants": [
								{
									"arguments": [
										{
											"description": "The gamepad button to check.",
											"name": "buttonN",
											"type": "GamepadButton"
										}
									],
									"returns": [
										{
											"description": "True if any supplied button is down, false if not.",
											"name": "anyDown",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Joystick supports vibration.",
							"name": "isVibrationSupported",
							"variants": [
								{
									"description": "The very first call to this function may take more time than expected because SDL's Haptic / Force Feedback subsystem needs to be initialized.",
									"returns": [
										{
											"description": "True if rumble / force feedback vibration is supported on this Joystick, false if not.",
											"name": "supported",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the vibration motor speeds on a Joystick with rumble support. Most common gamepads have this functionality, although not all drivers give proper support. Use Joystick:isVibrationSupported to check.",
							"name": "setVibration",
							"variants": [
								{
									"arguments": [
										{
											"description": "Strength of the left vibration motor on the Joystick. Must be in the range of 1.",
											"name": "left",
											"type": "number"
										},
										{
											"description": "Strength of the right vibration motor on the Joystick. Must be in the range of 1.",
											"name": "right",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "True if the vibration was successfully applied, false if not.",
											"name": "success",
											"type": "boolean"
										}
									]
								},
								{
									"description": "Disables vibration.",
									"returns": [
										{
											"description": "True if the vibration was successfully disabled, false if not.",
											"name": "success",
											"type": "boolean"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "Strength of the left vibration motor on the Joystick. Must be in the range of 1.",
											"name": "left",
											"type": "number"
										},
										{
											"description": "Strength of the right vibration motor on the Joystick. Must be in the range of 1.",
											"name": "right",
											"type": "number"
										},
										{
											"default": "-1",
											"description": "The duration of the vibration in seconds. A negative value means infinite duration.",
											"name": "duration",
											"type": "number"
										}
									],
									"description": "If the Joystick only has a single vibration motor, it will still work but it will use the largest value of the left and right parameters.\n\nThe Xbox 360 controller on Mac OS X only has support for vibration if a modified version of the Tattiebogle driver is used.\n\nThe very first call to this function may take more time than expected because SDL's Haptic / Force Feedback subsystem needs to be initialized.",
									"returns": [
										{
											"description": "True if the vibration was successfully applied, false if not.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						}
					],
					"name": "Joystick",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides an interface to the user's keyboard.",
			"enums": [
				{
					"constants": [
						{
							"description": "The A key",
							"name": "a"
						},
						{
							"description": "The B key",
							"name": "b"
						},
						{
							"description": "The C key",
							"name": "c"
						},
						{
							"description": "The D key",
							"name": "d"
						},
						{
							"description": "The E key",
							"name": "e"
						},
						{
							"description": "The F key",
							"name": "f"
						},
						{
							"description": "The G key",
							"name": "g"
						},
						{
							"description": "The H key",
							"name": "h"
						},
						{
							"description": "The I key",
							"name": "i"
						},
						{
							"description": "The J key",
							"name": "j"
						},
						{
							"description": "The K key",
							"name": "k"
						},
						{
							"description": "The L key",
							"name": "l"
						},
						{
							"description": "The M key",
							"name": "m"
						},
						{
							"description": "The N key",
							"name": "n"
						},
						{
							"description": "The O key",
							"name": "o"
						},
						{
							"description": "The P key",
							"name": "p"
						},
						{
							"description": "The Q key",
							"name": "q"
						},
						{
							"description": "The R key",
							"name": "r"
						},
						{
							"description": "The S key",
							"name": "s"
						},
						{
							"description": "The T key",
							"name": "t"
						},
						{
							"description": "The U key",
							"name": "u"
						},
						{
							"description": "The V key",
							"name": "v"
						},
						{
							"description": "The W key",
							"name": "w"
						},
						{
							"description": "The X key",
							"name": "x"
						},
						{
							"description": "The Y key",
							"name": "y"
						},
						{
							"description": "The Z key",
							"name": "z"
						},
						{
							"description": "The zero key",
							"name": "0"
						},
						{
							"description": "The one key",
							"name": "1"
						},
						{
							"description": "The two key",
							"name": "2"
						},
						{
							"description": "The three key",
							"name": "3"
						},
						{
							"description": "The four key",
							"name": "4"
						},
						{
							"description": "The five key",
							"name": "5"
						},
						{
							"description": "The six key",
							"name": "6"
						},
						{
							"description": "The seven key",
							"name": "7"
						},
						{
							"description": "The eight key",
							"name": "8"
						},
						{
							"description": "The nine key",
							"name": "9"
						},
						{
							"description": "Space key",
							"name": "space"
						},
						{
							"description": "Exclamation mark key",
							"name": "!"
						},
						{
							"description": "Double quote key",
							"name": "\""
						},
						{
							"description": "Hash key",
							"name": "#"
						},
						{
							"description": "Dollar key",
							"name": "$"
						},
						{
							"description": "Ampersand key",
							"name": "&"
						},
						{
							"description": "Single quote key",
							"name": "'"
						},
						{
							"description": "Left parenthesis key",
							"name": "("
						},
						{
							"description": "Right parenthesis key",
							"name": ")"
						},
						{
							"description": "Asterisk key",
							"name": "*"
						},
						{
							"description": "Plus key",
							"name": "+"
						},
						{
							"description": "Comma key",
							"name": ","
						},
						{
							"description": "Hyphen-minus key",
							"name": "-"
						},
						{
							"description": "Full stop key",
							"name": "."
						},
						{
							"description": "Slash key",
							"name": "/"
						},
						{
							"description": "Colon key",
							"name": ":"
						},
						{
							"description": "Semicolon key",
							"name": ";"
						},
						{
							"description": "Less-than key",
							"name": "<"
						},
						{
							"description": "Equal key",
							"name": "="
						},
						{
							"description": "Greater-than key",
							"name": ">"
						},
						{
							"description": "Question mark key",
							"name": "?"
						},
						{
							"description": "At sign key",
							"name": "@"
						},
						{
							"description": "Left square bracket key",
							"name": "["
						},
						{
							"description": "Backslash key",
							"name": "\\"
						},
						{
							"description": "Right square bracket key",
							"name": "]"
						},
						{
							"description": "Caret key",
							"name": "^"
						},
						{
							"description": "Underscore key",
							"name": "_"
						},
						{
							"description": "Grave accent key",
							"name": "`"
						},
						{
							"description": "The numpad zero key",
							"name": "kp0"
						},
						{
							"description": "The numpad one key",
							"name": "kp1"
						},
						{
							"description": "The numpad two key",
							"name": "kp2"
						},
						{
							"description": "The numpad three key",
							"name": "kp3"
						},
						{
							"description": "The numpad four key",
							"name": "kp4"
						},
						{
							"description": "The numpad five key",
							"name": "kp5"
						},
						{
							"description": "The numpad six key",
							"name": "kp6"
						},
						{
							"description": "The numpad seven key",
							"name": "kp7"
						},
						{
							"description": "The numpad eight key",
							"name": "kp8"
						},
						{
							"description": "The numpad nine key",
							"name": "kp9"
						},
						{
							"description": "The numpad decimal point key",
							"name": "kp."
						},
						{
							"description": "The numpad division key",
							"name": "kp/"
						},
						{
							"description": "The numpad multiplication key",
							"name": "kp*"
						},
						{
							"description": "The numpad substraction key",
							"name": "kp-"
						},
						{
							"description": "The numpad addition key",
							"name": "kp+"
						},
						{
							"description": "The numpad enter key",
							"name": "kpenter"
						},
						{
							"description": "The numpad equals key",
							"name": "kp="
						},
						{
							"description": "Up cursor key",
							"name": "up"
						},
						{
							"description": "Down cursor key",
							"name": "down"
						},
						{
							"description": "Right cursor key",
							"name": "right"
						},
						{
							"description": "Left cursor key",
							"name": "left"
						},
						{
							"description": "Home key",
							"name": "home"
						},
						{
							"description": "End key",
							"name": "end"
						},
						{
							"description": "Page up key",
							"name": "pageup"
						},
						{
							"description": "Page down key",
							"name": "pagedown"
						},
						{
							"description": "Insert key",
							"name": "insert"
						},
						{
							"description": "Backspace key",
							"name": "backspace"
						},
						{
							"description": "Tab key",
							"name": "tab"
						},
						{
							"description": "Clear key",
							"name": "clear"
						},
						{
							"description": "Return key",
							"name": "return"
						},
						{
							"description": "Delete key",
							"name": "delete"
						},
						{
							"description": "The 1st function key",
							"name": "f1"
						},
						{
							"description": "The 2nd function key",
							"name": "f2"
						},
						{
							"description": "The 3rd function key",
							"name": "f3"
						},
						{
							"description": "The 4th function key",
							"name": "f4"
						},
						{
							"description": "The 5th function key",
							"name": "f5"
						},
						{
							"description": "The 6th function key",
							"name": "f6"
						},
						{
							"description": "The 7th function key",
							"name": "f7"
						},
						{
							"description": "The 8th function key",
							"name": "f8"
						},
						{
							"description": "The 9th function key",
							"name": "f9"
						},
						{
							"description": "The 10th function key",
							"name": "f10"
						},
						{
							"description": "The 11th function key",
							"name": "f11"
						},
						{
							"description": "The 12th function key",
							"name": "f12"
						},
						{
							"description": "The 13th function key",
							"name": "f13"
						},
						{
							"description": "The 14th function key",
							"name": "f14"
						},
						{
							"description": "The 15th function key",
							"name": "f15"
						},
						{
							"description": "Num-lock key",
							"name": "numlock"
						},
						{
							"description": "Caps-lock key",
							"name": "capslock"
						},
						{
							"description": "Scroll-lock key",
							"name": "scrollock"
						},
						{
							"description": "Right shift key",
							"name": "rshift"
						},
						{
							"description": "Left shift key",
							"name": "lshift"
						},
						{
							"description": "Right control key",
							"name": "rctrl"
						},
						{
							"description": "Left control key",
							"name": "lctrl"
						},
						{
							"description": "Right alt key",
							"name": "ralt"
						},
						{
							"description": "Left alt key",
							"name": "lalt"
						},
						{
							"description": "Right meta key",
							"name": "rmeta"
						},
						{
							"description": "Left meta key",
							"name": "lmeta"
						},
						{
							"description": "Left super key",
							"name": "lsuper"
						},
						{
							"description": "Right super key",
							"name": "rsuper"
						},
						{
							"description": "Mode key",
							"name": "mode"
						},
						{
							"description": "Compose key",
							"name": "compose"
						},
						{
							"description": "Pause key",
							"name": "pause"
						},
						{
							"description": "Escape key",
							"name": "escape"
						},
						{
							"description": "Help key",
							"name": "help"
						},
						{
							"description": "Print key",
							"name": "print"
						},
						{
							"description": "System request key",
							"name": "sysreq"
						},
						{
							"description": "Break key",
							"name": "break"
						},
						{
							"description": "Menu key",
							"name": "menu"
						},
						{
							"description": "Power key",
							"name": "power"
						},
						{
							"description": "Euro (&euro;) key",
							"name": "euro"
						},
						{
							"description": "Undo key",
							"name": "undo"
						},
						{
							"description": "WWW key",
							"name": "www"
						},
						{
							"description": "Mail key",
							"name": "mail"
						},
						{
							"description": "Calculator key",
							"name": "calculator"
						},
						{
							"description": "Application search key",
							"name": "appsearch"
						},
						{
							"description": "Application home key",
							"name": "apphome"
						},
						{
							"description": "Application back key",
							"name": "appback"
						},
						{
							"description": "Application forward key",
							"name": "appforward"
						},
						{
							"description": "Application refresh key",
							"name": "apprefresh"
						},
						{
							"description": "Application bookmarks key",
							"name": "appbookmarks"
						}
					],
					"description": "All the keys you can press. Note that some keys may not be available on your keyboard or system.",
					"name": "KeyConstant"
				},
				{
					"constants": [
						{
							"description": "The 'A' key on an American layout.",
							"name": "a"
						},
						{
							"description": "The 'B' key on an American layout.",
							"name": "b"
						},
						{
							"description": "The 'C' key on an American layout.",
							"name": "c"
						},
						{
							"description": "The 'D' key on an American layout.",
							"name": "d"
						},
						{
							"description": "The 'E' key on an American layout.",
							"name": "e"
						},
						{
							"description": "The 'F' key on an American layout.",
							"name": "f"
						},
						{
							"description": "The 'G' key on an American layout.",
							"name": "g"
						},
						{
							"description": "The 'H' key on an American layout.",
							"name": "h"
						},
						{
							"description": "The 'I' key on an American layout.",
							"name": "i"
						},
						{
							"description": "The 'J' key on an American layout.",
							"name": "j"
						},
						{
							"description": "The 'K' key on an American layout.",
							"name": "k"
						},
						{
							"description": "The 'L' key on an American layout.",
							"name": "l"
						},
						{
							"description": "The 'M' key on an American layout.",
							"name": "m"
						},
						{
							"description": "The 'N' key on an American layout.",
							"name": "n"
						},
						{
							"description": "The 'O' key on an American layout.",
							"name": "o"
						},
						{
							"description": "The 'P' key on an American layout.",
							"name": "p"
						},
						{
							"description": "The 'Q' key on an American layout.",
							"name": "q"
						},
						{
							"description": "The 'R' key on an American layout.",
							"name": "r"
						},
						{
							"description": "The 'S' key on an American layout.",
							"name": "s"
						},
						{
							"description": "The 'T' key on an American layout.",
							"name": "t"
						},
						{
							"description": "The 'U' key on an American layout.",
							"name": "u"
						},
						{
							"description": "The 'V' key on an American layout.",
							"name": "v"
						},
						{
							"description": "The 'W' key on an American layout.",
							"name": "w"
						},
						{
							"description": "The 'X' key on an American layout.",
							"name": "x"
						},
						{
							"description": "The 'Y' key on an American layout.",
							"name": "y"
						},
						{
							"description": "The 'Z' key on an American layout.",
							"name": "z"
						},
						{
							"description": "The '1' key on an American layout.",
							"name": "1"
						},
						{
							"description": "The '2' key on an American layout.",
							"name": "2"
						},
						{
							"description": "The '3' key on an American layout.",
							"name": "3"
						},
						{
							"description": "The '4' key on an American layout.",
							"name": "4"
						},
						{
							"description": "The '5' key on an American layout.",
							"name": "5"
						},
						{
							"description": "The '6' key on an American layout.",
							"name": "6"
						},
						{
							"description": "The '7' key on an American layout.",
							"name": "7"
						},
						{
							"description": "The '8' key on an American layout.",
							"name": "8"
						},
						{
							"description": "The '9' key on an American layout.",
							"name": "9"
						},
						{
							"description": "The '0' key on an American layout.",
							"name": "0"
						},
						{
							"description": "The 'return' / 'enter' key on an American layout.",
							"name": "return"
						},
						{
							"description": "The 'escape' key on an American layout.",
							"name": "escape"
						},
						{
							"description": "The 'backspace' key on an American layout.",
							"name": "backspace"
						},
						{
							"description": "The 'tab' key on an American layout.",
							"name": "tab"
						},
						{
							"description": "The spacebar on an American layout.",
							"name": "space"
						},
						{
							"description": "The minus key on an American layout.",
							"name": "-"
						},
						{
							"description": "The equals key on an American layout.",
							"name": "="
						},
						{
							"description": "The left-bracket key on an American layout.",
							"name": "["
						},
						{
							"description": "The right-bracket key on an American layout.",
							"name": "]"
						},
						{
							"description": "The backslash key on an American layout.",
							"name": "\\"
						},
						{
							"description": "The non-U.S. hash scancode.",
							"name": "nonus#"
						},
						{
							"description": "The semicolon key on an American layout.",
							"name": ";"
						},
						{
							"description": "The apostrophe key on an American layout.",
							"name": "'"
						},
						{
							"description": "The back-tick / grave key on an American layout.",
							"name": "`"
						},
						{
							"description": "The comma key on an American layout.",
							"name": ","
						},
						{
							"description": "The period key on an American layout.",
							"name": "."
						},
						{
							"description": "The forward-slash key on an American layout.",
							"name": "/"
						},
						{
							"description": "The capslock key on an American layout.",
							"name": "capslock"
						},
						{
							"description": "The F1 key on an American layout.",
							"name": "f1"
						},
						{
							"description": "The F2 key on an American layout.",
							"name": "f2"
						},
						{
							"description": "The F3 key on an American layout.",
							"name": "f3"
						},
						{
							"description": "The F4 key on an American layout.",
							"name": "f4"
						},
						{
							"description": "The F5 key on an American layout.",
							"name": "f5"
						},
						{
							"description": "The F6 key on an American layout.",
							"name": "f6"
						},
						{
							"description": "The F7 key on an American layout.",
							"name": "f7"
						},
						{
							"description": "The F8 key on an American layout.",
							"name": "f8"
						},
						{
							"description": "The F9 key on an American layout.",
							"name": "f9"
						},
						{
							"description": "The F10 key on an American layout.",
							"name": "f10"
						},
						{
							"description": "The F11 key on an American layout.",
							"name": "f11"
						},
						{
							"description": "The F12 key on an American layout.",
							"name": "f12"
						},
						{
							"description": "The F13 key on an American layout.",
							"name": "f13"
						},
						{
							"description": "The F14 key on an American layout.",
							"name": "f14"
						},
						{
							"description": "The F15 key on an American layout.",
							"name": "f15"
						},
						{
							"description": "The F16 key on an American layout.",
							"name": "f16"
						},
						{
							"description": "The F17 key on an American layout.",
							"name": "f17"
						},
						{
							"description": "The F18 key on an American layout.",
							"name": "f18"
						},
						{
							"description": "The F19 key on an American layout.",
							"name": "f19"
						},
						{
							"description": "The F20 key on an American layout.",
							"name": "f20"
						},
						{
							"description": "The F21 key on an American layout.",
							"name": "f21"
						},
						{
							"description": "The F22 key on an American layout.",
							"name": "f22"
						},
						{
							"description": "The F23 key on an American layout.",
							"name": "f23"
						},
						{
							"description": "The F24 key on an American layout.",
							"name": "f24"
						},
						{
							"description": "The left control key on an American layout.",
							"name": "lctrl"
						},
						{
							"description": "The left shift key on an American layout.",
							"name": "lshift"
						},
						{
							"description": "The left alt / option key on an American layout.",
							"name": "lalt"
						},
						{
							"description": "The left GUI (command / windows / super) key on an American layout.",
							"name": "lgui"
						},
						{
							"description": "The right control key on an American layout.",
							"name": "rctrl"
						},
						{
							"description": "The right shift key on an American layout.",
							"name": "rshift"
						},
						{
							"description": "The right alt / option key on an American layout.",
							"name": "ralt"
						},
						{
							"description": "The right GUI (command / windows / super) key on an American layout.",
							"name": "rgui"
						},
						{
							"description": "The printscreen key on an American layout.",
							"name": "printscreen"
						},
						{
							"description": "The scroll-lock key on an American layout.",
							"name": "scrolllock"
						},
						{
							"description": "The pause key on an American layout.",
							"name": "pause"
						},
						{
							"description": "The insert key on an American layout.",
							"name": "insert"
						},
						{
							"description": "The home key on an American layout.",
							"name": "home"
						},
						{
							"description": "The numlock / clear key on an American layout.",
							"name": "numlock"
						},
						{
							"description": "The page-up key on an American layout.",
							"name": "pageup"
						},
						{
							"description": "The forward-delete key on an American layout.",
							"name": "delete"
						},
						{
							"description": "The end key on an American layout.",
							"name": "end"
						},
						{
							"description": "The page-down key on an American layout.",
							"name": "pagedown"
						},
						{
							"description": "The right-arrow key on an American layout.",
							"name": "right"
						},
						{
							"description": "The left-arrow key on an American layout.",
							"name": "left"
						},
						{
							"description": "The down-arrow key on an American layout.",
							"name": "down"
						},
						{
							"description": "The up-arrow key on an American layout.",
							"name": "up"
						},
						{
							"description": "The non-U.S. backslash scancode.",
							"name": "nonusbackslash"
						},
						{
							"description": "The application key on an American layout. Windows contextual menu, compose key.",
							"name": "application"
						},
						{
							"description": "The 'execute' key on an American layout.",
							"name": "execute"
						},
						{
							"description": "The 'help' key on an American layout.",
							"name": "help"
						},
						{
							"description": "The 'menu' key on an American layout.",
							"name": "menu"
						},
						{
							"description": "The 'select' key on an American layout.",
							"name": "select"
						},
						{
							"description": "The 'stop' key on an American layout.",
							"name": "stop"
						},
						{
							"description": "The 'again' key on an American layout.",
							"name": "again"
						},
						{
							"description": "The 'undo' key on an American layout.",
							"name": "undo"
						},
						{
							"description": "The 'cut' key on an American layout.",
							"name": "cut"
						},
						{
							"description": "The 'copy' key on an American layout.",
							"name": "copy"
						},
						{
							"description": "The 'paste' key on an American layout.",
							"name": "paste"
						},
						{
							"description": "The 'find' key on an American layout.",
							"name": "find"
						},
						{
							"description": "The keypad forward-slash key on an American layout.",
							"name": "kp/"
						},
						{
							"description": "The keypad '*' key on an American layout.",
							"name": "kp*"
						},
						{
							"description": "The keypad minus key on an American layout.",
							"name": "kp-"
						},
						{
							"description": "The keypad plus key on an American layout.",
							"name": "kp+"
						},
						{
							"description": "The keypad equals key on an American layout.",
							"name": "kp="
						},
						{
							"description": "The keypad enter key on an American layout.",
							"name": "kpenter"
						},
						{
							"description": "The keypad '1' key on an American layout.",
							"name": "kp1"
						},
						{
							"description": "The keypad '2' key on an American layout.",
							"name": "kp2"
						},
						{
							"description": "The keypad '3' key on an American layout.",
							"name": "kp3"
						},
						{
							"description": "The keypad '4' key on an American layout.",
							"name": "kp4"
						},
						{
							"description": "The keypad '5' key on an American layout.",
							"name": "kp5"
						},
						{
							"description": "The keypad '6' key on an American layout.",
							"name": "kp6"
						},
						{
							"description": "The keypad '7' key on an American layout.",
							"name": "kp7"
						},
						{
							"description": "The keypad '8' key on an American layout.",
							"name": "kp8"
						},
						{
							"description": "The keypad '9' key on an American layout.",
							"name": "kp9"
						},
						{
							"description": "The keypad '0' key on an American layout.",
							"name": "kp0"
						},
						{
							"description": "The keypad period key on an American layout.",
							"name": "kp."
						},
						{
							"description": "The 1st international key on an American layout. Used on Asian keyboards.",
							"name": "international1"
						},
						{
							"description": "The 2nd international key on an American layout.",
							"name": "international2"
						},
						{
							"description": "The 3rd international  key on an American layout. Yen.",
							"name": "international3"
						},
						{
							"description": "The 4th international key on an American layout.",
							"name": "international4"
						},
						{
							"description": "The 5th international key on an American layout.",
							"name": "international5"
						},
						{
							"description": "The 6th international key on an American layout.",
							"name": "international6"
						},
						{
							"description": "The 7th international key on an American layout.",
							"name": "international7"
						},
						{
							"description": "The 8th international key on an American layout.",
							"name": "international8"
						},
						{
							"description": "The 9th international key on an American layout.",
							"name": "international9"
						},
						{
							"description": "Hangul/English toggle scancode.",
							"name": "lang1"
						},
						{
							"description": "Hanja conversion scancode.",
							"name": "lang2"
						},
						{
							"description": "Katakana scancode.",
							"name": "lang3"
						},
						{
							"description": "Hiragana scancode.",
							"name": "lang4"
						},
						{
							"description": "Zenkaku/Hankaku scancode.",
							"name": "lang5"
						},
						{
							"description": "The mute key on an American layout.",
							"name": "mute"
						},
						{
							"description": "The volume up key on an American layout.",
							"name": "volumeup"
						},
						{
							"description": "The volume down key on an American layout.",
							"name": "volumedown"
						},
						{
							"description": "The audio next track key on an American layout.",
							"name": "audionext"
						},
						{
							"description": "The audio previous track key on an American layout.",
							"name": "audioprev"
						},
						{
							"description": "The audio stop key on an American layout.",
							"name": "audiostop"
						},
						{
							"description": "The audio play key on an American layout.",
							"name": "audioplay"
						},
						{
							"description": "The audio mute key on an American layout.",
							"name": "audiomute"
						},
						{
							"description": "The media select key on an American layout.",
							"name": "mediaselect"
						},
						{
							"description": "The 'WWW' key on an American layout.",
							"name": "www"
						},
						{
							"description": "The Mail key on an American layout.",
							"name": "mail"
						},
						{
							"description": "The calculator key on an American layout.",
							"name": "calculator"
						},
						{
							"description": "The 'computer' key on an American layout.",
							"name": "computer"
						},
						{
							"description": "The AC Search key on an American layout.",
							"name": "acsearch"
						},
						{
							"description": "The AC Home key on an American layout.",
							"name": "achome"
						},
						{
							"description": "The AC Back key on an American layout.",
							"name": "acback"
						},
						{
							"description": "The AC Forward key on an American layout.",
							"name": "acforward"
						},
						{
							"description": "Th AC Stop key on an American layout.",
							"name": "acstop"
						},
						{
							"description": "The AC Refresh key on an American layout.",
							"name": "acrefresh"
						},
						{
							"description": "The AC Bookmarks key on an American layout.",
							"name": "acbookmarks"
						},
						{
							"description": "The system power scancode.",
							"name": "power"
						},
						{
							"description": "The brightness-down scancode.",
							"name": "brightnessdown"
						},
						{
							"description": "The brightness-up scancode.",
							"name": "brightnessup"
						},
						{
							"description": "The display switch scancode.",
							"name": "displayswitch"
						},
						{
							"description": "The keyboard illumination toggle scancode.",
							"name": "kbdillumtoggle"
						},
						{
							"description": "The keyboard illumination down scancode.",
							"name": "kbdillumdown"
						},
						{
							"description": "The keyboard illumination up scancode.",
							"name": "kbdillumup"
						},
						{
							"description": "The eject scancode.",
							"name": "eject"
						},
						{
							"description": "The system sleep scancode.",
							"name": "sleep"
						},
						{
							"description": "The alt-erase key on an American layout.",
							"name": "alterase"
						},
						{
							"description": "The sysreq key on an American layout.",
							"name": "sysreq"
						},
						{
							"description": "The 'cancel' key on an American layout.",
							"name": "cancel"
						},
						{
							"description": "The 'clear' key on an American layout.",
							"name": "clear"
						},
						{
							"description": "The 'prior' key on an American layout.",
							"name": "prior"
						},
						{
							"description": "The 'return2' key on an American layout.",
							"name": "return2"
						},
						{
							"description": "The 'separator' key on an American layout.",
							"name": "separator"
						},
						{
							"description": "The 'out' key on an American layout.",
							"name": "out"
						},
						{
							"description": "The 'oper' key on an American layout.",
							"name": "oper"
						},
						{
							"description": "The 'clearagain' key on an American layout.",
							"name": "clearagain"
						},
						{
							"description": "The 'crsel' key on an American layout.",
							"name": "crsel"
						},
						{
							"description": "The 'exsel' key on an American layout.",
							"name": "exsel"
						},
						{
							"description": "The keypad 00 key on an American layout.",
							"name": "kp00"
						},
						{
							"description": "The keypad 000 key on an American layout.",
							"name": "kp000"
						},
						{
							"description": "The thousands-separator key on an American layout.",
							"name": "thsousandsseparator"
						},
						{
							"description": "The decimal separator key on an American layout.",
							"name": "decimalseparator"
						},
						{
							"description": "The currency unit key on an American layout.",
							"name": "currencyunit"
						},
						{
							"description": "The currency sub-unit key on an American layout.",
							"name": "currencysubunit"
						},
						{
							"description": "The 'app1' scancode.",
							"name": "app1"
						},
						{
							"description": "The 'app2' scancode.",
							"name": "app2"
						},
						{
							"description": "An unknown key.",
							"name": "unknown"
						}
					],
					"description": "Keyboard scancodes.\n\nScancodes are keyboard layout-independent, so the scancode \"w\" will be generated if the key in the same place as the \"w\" key on an American QWERTY keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nUsing scancodes, rather than keycodes, is useful because keyboards with layouts differing from the US/UK layout(s) might have keys that generate 'unknown' keycodes, but the scancodes will still be detected. This however would necessitate having a list for each keyboard layout one would choose to support.\n\nOne could use textinput or textedited instead, but those only give back the end result of keys used, i.e. you can't get modifiers on their own from it, only the final symbols that were generated.",
					"name": "Scancode"
				}
			],
			"functions": [
				{
					"description": "Gets the key corresponding to the given hardware scancode.\n\nUnlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems.",
					"name": "getKeyFromScancode",
					"variants": [
						{
							"arguments": [
								{
									"description": "The scancode to get the key from.",
									"name": "scancode",
									"type": "Scancode"
								}
							],
							"returns": [
								{
									"description": "The key corresponding to the given scancode, or 'unknown' if the scancode doesn't map to a KeyConstant on the current system.",
									"name": "key",
									"type": "KeyConstant"
								}
							]
						}
					]
				},
				{
					"description": "Gets the hardware scancode corresponding to the given key.\n\nUnlike key constants, Scancodes are keyboard layout-independent. For example the scancode 'w' will be generated if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.\n\nScancodes are useful for creating default controls that have the same physical locations on on all systems.",
					"name": "getScancodeFromKey",
					"variants": [
						{
							"arguments": [
								{
									"description": "The key to get the scancode from.",
									"name": "key",
									"type": "KeyConstant"
								}
							],
							"returns": [
								{
									"description": "The scancode corresponding to the given key, or 'unknown' if the given key has no known physical representation on the current system.",
									"name": "scancode",
									"type": "Scancode"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether key repeat is enabled.",
					"name": "hasKeyRepeat",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether key repeat is enabled.",
									"name": "enabled",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether screen keyboard is supported.",
					"name": "hasScreenKeyboard",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether screen keyboard is supported.",
									"name": "supported",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether text input events are enabled.",
					"name": "hasTextInput",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether text input events are enabled.",
									"name": "enabled",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks whether a certain key is down. Not to be confused with love.keypressed or love.keyreleased.",
					"name": "isDown",
					"variants": [
						{
							"arguments": [
								{
									"description": "The key to check.",
									"name": "key",
									"type": "KeyConstant"
								}
							],
							"returns": [
								{
									"description": "True if the key is down, false if not.",
									"name": "down",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A key to check.",
									"name": "key",
									"type": "KeyConstant"
								},
								{
									"description": "Additional keys to check.",
									"name": "...",
									"type": "KeyConstant"
								}
							],
							"returns": [
								{
									"description": "True if any supplied key is down, false if not.",
									"name": "anyDown",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks whether the specified Scancodes are pressed. Not to be confused with love.keypressed or love.keyreleased.\n\nUnlike regular KeyConstants, Scancodes are keyboard layout-independent. The scancode 'w' is used if the key in the same place as the 'w' key on an American keyboard is pressed, no matter what the key is labelled or what the user's operating system settings are.",
					"name": "isScancodeDown",
					"variants": [
						{
							"arguments": [
								{
									"description": "A Scancode to check.",
									"name": "scancode",
									"type": "Scancode"
								},
								{
									"description": "Additional Scancodes to check.",
									"name": "...",
									"type": "Scancode"
								}
							],
							"returns": [
								{
									"description": "True if any supplied Scancode is down, false if not.",
									"name": "down",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Enables or disables key repeat for love.keypressed. It is disabled by default.",
					"name": "setKeyRepeat",
					"variants": [
						{
							"arguments": [
								{
									"description": "Whether repeat keypress events should be enabled when a key is held down.",
									"name": "enable",
									"type": "boolean"
								}
							],
							"description": "The interval between repeats depends on the user's system settings. This function doesn't affect whether love.textinput is called multiple times while a key is held down."
						}
					]
				},
				{
					"description": "Enables or disables text input events. It is enabled by default on Windows, Mac, and Linux, and disabled by default on iOS and Android.\n\nOn touch devices, this shows the system's native on-screen keyboard when it's enabled.",
					"name": "setTextInput",
					"variants": [
						{
							"arguments": [
								{
									"description": "Whether text input events should be enabled.",
									"name": "enable",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Whether text input events should be enabled.",
									"name": "enable",
									"type": "boolean"
								},
								{
									"description": "Text rectangle x position.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "Text rectangle y position.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Text rectangle width.",
									"name": "w",
									"type": "number"
								},
								{
									"description": "Text rectangle height.",
									"name": "h",
									"type": "number"
								}
							],
							"description": "On iOS and Android this variant tells the OS that the specified rectangle is where text will show up in the game, which prevents the system on-screen keyboard from covering the text."
						}
					]
				}
			],
			"name": "keyboard",
			"types": []
		},
		{
			"description": "Provides system-independent mathematical functions.",
			"enums": [
				{
					"constants": [
						{
							"description": "The matrix is row-major:",
							"name": "row"
						},
						{
							"description": "The matrix is column-major:",
							"name": "column"
						}
					],
					"description": "The layout of matrix elements (row-major or column-major).",
					"name": "MatrixLayout"
				}
			],
			"functions": [
				{
					"description": "Converts a color from 0..255 to 0..1 range.",
					"name": "colorFromBytes",
					"variants": [
						{
							"arguments": [
								{
									"description": "Red color component in 0..255 range.",
									"name": "rb",
									"type": "number"
								},
								{
									"description": "Green color component in 0..255 range.",
									"name": "gb",
									"type": "number"
								},
								{
									"description": "Blue color component in 0..255 range.",
									"name": "bb",
									"type": "number"
								},
								{
									"default": "nil",
									"description": "Alpha color component in 0..255 range.",
									"name": "ab",
									"type": "number"
								}
							],
							"description": "Here's implementation for 11.2 and earlier.\n\nfunction love.math.colorFromBytes(r, g, b, a)\n\n\tif type(r) == 'table' then\n\n\t\tr, g, b, a = rr[2, rr[4\n\n\tend\n\n\tr = clamp01(floor(r + 0.5) / 255)\n\n\tg = clamp01(floor(g + 0.5) / 255)\n\n\tb = clamp01(floor(b + 0.5) / 255)\n\n\ta = a ~= nil and clamp01(floor(a + 0.5) / 255) or nil\n\n\treturn r, g, b, a\n\nend\n\nWhere clamp01 is defined as follows\n\nlocal function clamp01(x)\n\n\treturn math.min(math.max(x, 0), 1)\n\nend",
							"returns": [
								{
									"description": "Red color component in 0..1 range.",
									"name": "r",
									"type": "number"
								},
								{
									"description": "Green color component in 0..1 range.",
									"name": "g",
									"type": "number"
								},
								{
									"description": "Blue color component in 0..1 range.",
									"name": "b",
									"type": "number"
								},
								{
									"description": "Alpha color component in 0..1 range or nil if alpha is not specified.",
									"name": "a",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Converts a color from 0..1 to 0..255 range.",
					"name": "colorToBytes",
					"variants": [
						{
							"arguments": [
								{
									"description": "Red color component.",
									"name": "r",
									"type": "number"
								},
								{
									"description": "Green color component.",
									"name": "g",
									"type": "number"
								},
								{
									"description": "Blue color component.",
									"name": "b",
									"type": "number"
								},
								{
									"default": "nil",
									"description": "Alpha color component.",
									"name": "a",
									"type": "number"
								}
							],
							"description": "Here's implementation for 11.2 and earlier.\n\nfunction love.math.colorToBytes(r, g, b, a)\n\n\tif type(r) == 'table' then\n\n\t\tr, g, b, a = rr[2, rr[4\n\n\tend\n\n\tr = floor(clamp01(r) * 255 + 0.5)\n\n\tg = floor(clamp01(g) * 255 + 0.5)\n\n\tb = floor(clamp01(b) * 255 + 0.5)\n\n\ta = a ~= nil and floor(clamp01(a) * 255 + 0.5) or nil\n\n\treturn r, g, b, a\n\nend\n\nWhere clamp01 is defined as follows\n\nlocal function clamp01(x)\n\n\treturn math.min(math.max(x, 0), 1)\n\nend",
							"returns": [
								{
									"description": "Red color component in 0..255 range.",
									"name": "rb",
									"type": "number"
								},
								{
									"description": "Green color component in 0..255 range.",
									"name": "gb",
									"type": "number"
								},
								{
									"description": "Blue color component in 0..255 range.",
									"name": "bb",
									"type": "number"
								},
								{
									"description": "Alpha color component in 0..255 range or nil if alpha is not specified.",
									"name": "ab",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Converts a color from gamma-space (sRGB) to linear-space (RGB). This is useful when doing gamma-correct rendering and you need to do math in linear RGB in the few cases where LÖVE doesn't handle conversions automatically.\n\nRead more about gamma-correct rendering here, here, and here.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "gammaToLinear",
					"variants": [
						{
							"arguments": [
								{
									"description": "The red channel of the sRGB color to convert.",
									"name": "r",
									"type": "number"
								},
								{
									"description": "The green channel of the sRGB color to convert.",
									"name": "g",
									"type": "number"
								},
								{
									"description": "The blue channel of the sRGB color to convert.",
									"name": "b",
									"type": "number"
								}
							],
							"description": "An alpha value can be passed into the function as a fourth argument, but it will be returned unchanged because alpha is always linear.",
							"returns": [
								{
									"description": "The red channel of the converted color in linear RGB space.",
									"name": "lr",
									"type": "number"
								},
								{
									"description": "The green channel of the converted color in linear RGB space.",
									"name": "lg",
									"type": "number"
								},
								{
									"description": "The blue channel of the converted color in linear RGB space.",
									"name": "lb",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "An array with the red, green, and blue channels of the sRGB color to convert.",
									"name": "color",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "The red channel of the converted color in linear RGB space.",
									"name": "lr",
									"type": "number"
								},
								{
									"description": "The green channel of the converted color in linear RGB space.",
									"name": "lg",
									"type": "number"
								},
								{
									"description": "The blue channel of the converted color in linear RGB space.",
									"name": "lb",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The value of a color channel in sRGB space to convert.",
									"name": "c",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The value of the color channel in linear RGB space.",
									"name": "lc",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the seed of the random number generator.\n\nThe seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed can be an integer value up to 2^64.",
					"name": "getRandomSeed",
					"variants": [
						{
							"returns": [
								{
									"description": "Integer number representing the lower 32 bits of the random number generator's 64 bit seed value.",
									"name": "low",
									"type": "number"
								},
								{
									"description": "Integer number representing the higher 32 bits of the random number generator's 64 bit seed value.",
									"name": "high",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current state of the random number generator. This returns an opaque implementation-dependent string which is only useful for later use with love.math.setRandomState or RandomGenerator:setState.\n\nThis is different from love.math.getRandomSeed in that getRandomState gets the random number generator's current state, whereas getRandomSeed gets the previously set seed number.",
					"name": "getRandomState",
					"variants": [
						{
							"description": "The value of the state string does not depend on the current operating system.",
							"returns": [
								{
									"description": "The current state of the random number generator, represented as a string.",
									"name": "state",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Checks whether a polygon is convex.\n\nPolygonShapes in love.physics, some forms of Meshes, and polygons drawn with love.graphics.polygon must be simple convex polygons.",
					"name": "isConvex",
					"variants": [
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "The vertices of the polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}.",
									"name": "vertices",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "Whether the given polygon is convex.",
									"name": "convex",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The position of the first vertex of the polygon on the x-axis.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The position of the first vertex of the polygon on the y-axis.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The position of the second vertex of the polygon on the x-axis.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The position of the second vertex of the polygon on the y-axis.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "Additional position of the vertex of the polygon on the x-axis and y-axis.",
									"name": "...",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "Whether the given polygon is convex.",
									"name": "convex",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Converts a color from linear-space (RGB) to gamma-space (sRGB). This is useful when storing linear RGB color values in an image, because the linear RGB color space has less precision than sRGB for dark colors, which can result in noticeable color banding when drawing.\n\nIn general, colors chosen based on what they look like on-screen are already in gamma-space and should not be double-converted. Colors calculated using math are often in the linear RGB space.\n\nRead more about gamma-correct rendering here, here, and here.\n\nIn versions prior to 11.0, color component values were within the range of 0 to 255 instead of 0 to 1.",
					"name": "linearToGamma",
					"variants": [
						{
							"arguments": [
								{
									"description": "The red channel of the linear RGB color to convert.",
									"name": "lr",
									"type": "number"
								},
								{
									"description": "The green channel of the linear RGB color to convert.",
									"name": "lg",
									"type": "number"
								},
								{
									"description": "The blue channel of the linear RGB color to convert.",
									"name": "lb",
									"type": "number"
								}
							],
							"description": "An alpha value can be passed into the function as a fourth argument, but it will be returned unchanged because alpha is always linear.",
							"returns": [
								{
									"description": "The red channel of the converted color in gamma sRGB space.",
									"name": "cr",
									"type": "number"
								},
								{
									"description": "The green channel of the converted color in gamma sRGB space.",
									"name": "cg",
									"type": "number"
								},
								{
									"description": "The blue channel of the converted color in gamma sRGB space.",
									"name": "cb",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "An array with the red, green, and blue channels of the linear RGB color to convert.",
									"name": "color",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "The red channel of the converted color in gamma sRGB space.",
									"name": "cr",
									"type": "number"
								},
								{
									"description": "The green channel of the converted color in gamma sRGB space.",
									"name": "cg",
									"type": "number"
								},
								{
									"description": "The blue channel of the converted color in gamma sRGB space.",
									"name": "cb",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The value of a color channel in linear RGB space to convert.",
									"name": "lc",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The value of the color channel in gamma sRGB space.",
									"name": "c",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new BezierCurve object.\n\nThe number of vertices in the control polygon determines the degree of the curve, e.g. three vertices define a quadratic (degree 2) Bézier curve, four vertices define a cubic (degree 3) Bézier curve, etc.",
					"name": "newBezierCurve",
					"variants": [
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "The vertices of the control polygon as a table in the form of {x1, y1, x2, y2, x3, y3, ...}.",
									"name": "vertices",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A Bézier curve object.",
									"name": "curve",
									"type": "BezierCurve"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The position of the first vertex of the control polygon on the x-axis.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The position of the first vertex of the control polygon on the y-axis.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The position of the second vertex of the control polygon on the x-axis.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The position of the second vertex of the control polygon on the y-axis.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "Additional position of the vertex of the control polygon on the x-axis and y-axis.",
									"name": "...",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A Bézier curve object.",
									"name": "curve",
									"type": "BezierCurve"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new RandomGenerator object which is completely independent of other RandomGenerator objects and random functions.",
					"name": "newRandomGenerator",
					"variants": [
						{
							"returns": [
								{
									"description": "The new Random Number Generator object.",
									"name": "rng",
									"type": "RandomGenerator"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The initial seed number to use for this object.",
									"name": "seed",
									"type": "number"
								}
							],
							"description": "See RandomGenerator:setSeed.",
							"returns": [
								{
									"description": "The new Random Number Generator object.",
									"name": "rng",
									"type": "RandomGenerator"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The lower 32 bits of the seed number to use for this object.",
									"name": "low",
									"type": "number"
								},
								{
									"description": "The higher 32 bits of the seed number to use for this object.",
									"name": "high",
									"type": "number"
								}
							],
							"description": "See RandomGenerator:setSeed.",
							"returns": [
								{
									"description": "The new Random Number Generator object.",
									"name": "rng",
									"type": "RandomGenerator"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Transform object.",
					"name": "newTransform",
					"variants": [
						{
							"description": "Creates a Transform with no transformations applied. Call methods on the returned object to apply transformations.",
							"returns": [
								{
									"description": "The new Transform object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The position of the new Transform on the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the new Transform on the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The orientation of the new Transform in radians.",
									"name": "angle",
									"type": "number"
								},
								{
									"default": "1",
									"description": "Scale factor on the x-axis.",
									"name": "sx",
									"type": "number"
								},
								{
									"default": "sx",
									"description": "Scale factor on the y-axis.",
									"name": "sy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset on the x-axis.",
									"name": "ox",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Origin offset on the y-axis.",
									"name": "oy",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing / skew factor on the x-axis.",
									"name": "kx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "Shearing / skew factor on the y-axis.",
									"name": "ky",
									"type": "number"
								}
							],
							"description": "Creates a Transform with the specified transformation applied on creation.",
							"returns": [
								{
									"description": "The new Transform object.",
									"name": "transform",
									"type": "Transform"
								}
							]
						}
					]
				},
				{
					"description": "Generates a Simplex or Perlin noise value in 1-4 dimensions. The return value will always be the same, given the same arguments.\n\nSimplex noise is closely related to Perlin noise. It is widely used for procedural content generation.\n\nThere are many webpages which discuss Perlin and Simplex noise in detail.",
					"name": "noise",
					"variants": [
						{
							"arguments": [
								{
									"description": "The number used to generate the noise value.",
									"name": "x",
									"type": "number"
								}
							],
							"description": "Generates Simplex noise from 1 dimension.",
							"returns": [
								{
									"description": "The noise value in the range of 1.",
									"name": "value",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first value of the 2-dimensional vector used to generate the noise value.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The second value of the 2-dimensional vector used to generate the noise value.",
									"name": "y",
									"type": "number"
								}
							],
							"description": "Generates Simplex noise from 2 dimensions.",
							"returns": [
								{
									"description": "The noise value in the range of 1.",
									"name": "value",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first value of the 3-dimensional vector used to generate the noise value.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The second value of the 3-dimensional vector used to generate the noise value.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The third value of the 3-dimensional vector used to generate the noise value.",
									"name": "z",
									"type": "number"
								}
							],
							"description": "Generates Perlin noise (Simplex noise in version 0.9.2 and older) from 3 dimensions.",
							"returns": [
								{
									"description": "The noise value in the range of 1.",
									"name": "value",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first value of the 4-dimensional vector used to generate the noise value.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The second value of the 4-dimensional vector used to generate the noise value.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The third value of the 4-dimensional vector used to generate the noise value.",
									"name": "z",
									"type": "number"
								},
								{
									"description": "The fourth value of the 4-dimensional vector used to generate the noise value.",
									"name": "w",
									"type": "number"
								}
							],
							"description": "Generates Perlin noise (Simplex noise in version 0.9.2 and older) from 4 dimensions.",
							"returns": [
								{
									"description": "The noise value in the range of 1.",
									"name": "value",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Generates a pseudo-random number in a platform independent manner. The default love.run seeds this function at startup, so you generally don't need to seed it yourself.",
					"name": "random",
					"variants": [
						{
							"description": "Get uniformly distributed pseudo-random real number within 1.",
							"returns": [
								{
									"description": "The pseudo-random number.",
									"name": "number",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The maximum possible value it should return.",
									"name": "max",
									"type": "number"
								}
							],
							"description": "Get a uniformly distributed pseudo-random integer within max.",
							"returns": [
								{
									"description": "The pseudo-random integer number.",
									"name": "number",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The minimum possible value it should return.",
									"name": "min",
									"type": "number"
								},
								{
									"description": "The maximum possible value it should return.",
									"name": "max",
									"type": "number"
								}
							],
							"description": "Get uniformly distributed pseudo-random integer within max.",
							"returns": [
								{
									"description": "The pseudo-random integer number.",
									"name": "number",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Get a normally distributed pseudo random number.",
					"name": "randomNormal",
					"variants": [
						{
							"arguments": [
								{
									"default": "1",
									"description": "Standard deviation of the distribution.",
									"name": "stddev",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The mean of the distribution.",
									"name": "mean",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "Normally distributed random number with variance (stddev)² and the specified mean.",
									"name": "number",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the seed of the random number generator using the specified integer number. This is called internally at startup, so you generally don't need to call it yourself.",
					"name": "setRandomSeed",
					"variants": [
						{
							"arguments": [
								{
									"description": "The integer number with which you want to seed the randomization. Must be within the range of 2^53 - 1.",
									"name": "seed",
									"type": "number"
								}
							],
							"description": "Due to Lua's use of double-precision floating point numbers, integer values above 2^53 cannot be accurately represented. Use the other variant of the function if you want to use a larger number."
						},
						{
							"arguments": [
								{
									"description": "The lower 32 bits of the seed value. Must be within the range of 2^32 - 1.",
									"name": "low",
									"type": "number"
								},
								{
									"description": "The higher 32 bits of the seed value. Must be within the range of 2^32 - 1.",
									"name": "high",
									"type": "number"
								}
							],
							"description": "Combines two 32-bit integer numbers into a 64-bit integer value and sets the seed of the random number generator using the value."
						}
					]
				},
				{
					"description": "Sets the current state of the random number generator. The value used as an argument for this function is an opaque implementation-dependent string and should only originate from a previous call to love.math.getRandomState.\n\nThis is different from love.math.setRandomSeed in that setRandomState directly sets the random number generator's current implementation-dependent state, whereas setRandomSeed gives it a new seed value.",
					"name": "setRandomState",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new state of the random number generator, represented as a string. This should originate from a previous call to love.math.getRandomState.",
									"name": "state",
									"type": "string"
								}
							],
							"description": "The effect of the state string does not depend on the current operating system."
						}
					]
				},
				{
					"description": "Decomposes a simple convex or concave polygon into triangles.",
					"name": "triangulate",
					"variants": [
						{
							"arguments": [
								{
									"description": "Polygon to triangulate. Must not intersect itself.",
									"name": "polygon",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "List of triangles the polygon is composed of, in the form of {{x1, y1, x2, y2, x3, y3},  {x1, y1, x2, y2, x3, y3}, ...}.",
									"name": "triangles",
									"type": "table"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The position of the first vertex of the polygon on the x-axis.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The position of the first vertex of the polygon on the y-axis.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The position of the second vertex of the polygon on the x-axis.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The position of the second vertex of the polygon on the y-axis.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "The position of the third vertex of the polygon on the x-axis.",
									"name": "x3",
									"type": "number"
								},
								{
									"description": "The position of the third vertex of the polygon on the y-axis.",
									"name": "y3",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "List of triangles the polygon is composed of, in the form of {{x1, y1, x2, y2, x3, y3},  {x1, y1, x2, y2, x3, y3}, ...}.",
									"name": "triangles",
									"type": "table"
								}
							]
						}
					]
				}
			],
			"name": "math",
			"types": [
				{
					"constructors": [
						"newBezierCurve"
					],
					"description": "A Bézier curve object that can evaluate and render Bézier curves of arbitrary degree.\n\nFor more information on Bézier curves check this great article on Wikipedia.",
					"functions": [
						{
							"description": "Evaluate Bézier curve at parameter t. The parameter must be between 0 and 1 (inclusive).\n\nThis function can be used to move objects along paths or tween parameters. However it should not be used to render the curve, see BezierCurve:render for that purpose.",
							"name": "evaluate",
							"variants": [
								{
									"arguments": [
										{
											"description": "Where to evaluate the curve.",
											"name": "t",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "x coordinate of the curve at parameter t.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "y coordinate of the curve at parameter t.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get coordinates of the i-th control point. Indices start with 1.",
							"name": "getControlPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "Index of the control point.",
											"name": "i",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Position of the control point along the x axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Position of the control point along the y axis.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the number of control points in the Bézier curve.",
							"name": "getControlPointCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of control points.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get degree of the Bézier curve. The degree is equal to number-of-control-points - 1.",
							"name": "getDegree",
							"variants": [
								{
									"returns": [
										{
											"description": "Degree of the Bézier curve.",
											"name": "degree",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the derivative of the Bézier curve.\n\nThis function can be used to rotate sprites moving along a curve in the direction of the movement and compute the direction perpendicular to the curve at some parameter t.",
							"name": "getDerivative",
							"variants": [
								{
									"returns": [
										{
											"description": "The derivative curve.",
											"name": "derivative",
											"type": "BezierCurve"
										}
									]
								}
							]
						},
						{
							"description": "Gets a BezierCurve that corresponds to the specified segment of this BezierCurve.",
							"name": "getSegment",
							"variants": [
								{
									"arguments": [
										{
											"description": "The starting point along the curve. Must be between 0 and 1.",
											"name": "startpoint",
											"type": "number"
										},
										{
											"description": "The end of the segment. Must be between 0 and 1.",
											"name": "endpoint",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "A BezierCurve that corresponds to the specified segment.",
											"name": "curve",
											"type": "BezierCurve"
										}
									]
								}
							]
						},
						{
							"description": "Insert control point as the new i-th control point. Existing control points from i onwards are pushed back by 1. Indices start with 1. Negative indices wrap around: -1 is the last control point, -2 the one before the last, etc.",
							"name": "insertControlPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "Position of the control point along the x axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Position of the control point along the y axis.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "-1",
											"description": "Index of the control point.",
											"name": "i",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Removes the specified control point.",
							"name": "removeControlPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the control point to remove.",
											"name": "index",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get a list of coordinates to be used with love.graphics.line.\n\nThis function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.\n\nIf you are just interested to know the position on the curve given a parameter, use BezierCurve:evaluate.",
							"name": "render",
							"variants": [
								{
									"arguments": [
										{
											"default": "5",
											"description": "Number of recursive subdivision steps.",
											"name": "depth",
											"type": "number"
										}
									],
									"returns": [
										{
											"arraytype": "number",
											"description": "List of x,y-coordinate pairs of points on the curve.",
											"name": "coordinates",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Get a list of coordinates on a specific part of the curve, to be used with love.graphics.line.\n\nThis function samples the Bézier curve using recursive subdivision. You can control the recursion depth using the depth parameter.\n\nIf you are just need to know the position on the curve given a parameter, use BezierCurve:evaluate.",
							"name": "renderSegment",
							"variants": [
								{
									"arguments": [
										{
											"description": "The starting point along the curve. Must be between 0 and 1.",
											"name": "startpoint",
											"type": "number"
										},
										{
											"description": "The end of the segment to render. Must be between 0 and 1.",
											"name": "endpoint",
											"type": "number"
										},
										{
											"default": "5",
											"description": "Number of recursive subdivision steps.",
											"name": "depth",
											"type": "number"
										}
									],
									"returns": [
										{
											"arraytype": "number",
											"description": "List of x,y-coordinate pairs of points on the specified part of the curve.",
											"name": "coordinates",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Rotate the Bézier curve by an angle.",
							"name": "rotate",
							"variants": [
								{
									"arguments": [
										{
											"description": "Rotation angle in radians.",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "0",
											"description": "X coordinate of the rotation center.",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Y coordinate of the rotation center.",
											"name": "oy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Scale the Bézier curve by a factor.",
							"name": "scale",
							"variants": [
								{
									"arguments": [
										{
											"description": "Scale factor.",
											"name": "s",
											"type": "number"
										},
										{
											"default": "0",
											"description": "X coordinate of the scaling center.",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Y coordinate of the scaling center.",
											"name": "oy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set coordinates of the i-th control point. Indices start with 1.",
							"name": "setControlPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "Index of the control point.",
											"name": "i",
											"type": "number"
										},
										{
											"description": "Position of the control point along the x axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "Position of the control point along the y axis.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Move the Bézier curve by an offset.",
							"name": "translate",
							"variants": [
								{
									"arguments": [
										{
											"description": "Offset along the x axis.",
											"name": "dx",
											"type": "number"
										},
										{
											"description": "Offset along the y axis.",
											"name": "dy",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "BezierCurve",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newRandomGenerator"
					],
					"description": "A random number generation object which has its own random state.",
					"functions": [
						{
							"description": "Gets the seed of the random number generator object.\n\nThe seed is split into two numbers due to Lua's use of doubles for all number values - doubles can't accurately represent integer  values above 2^53, but the seed value is an integer number in the range of 2^64 - 1.",
							"name": "getSeed",
							"variants": [
								{
									"returns": [
										{
											"description": "Integer number representing the lower 32 bits of the RandomGenerator's 64 bit seed value.",
											"name": "low",
											"type": "number"
										},
										{
											"description": "Integer number representing the higher 32 bits of the RandomGenerator's 64 bit seed value.",
											"name": "high",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current state of the random number generator. This returns an opaque string which is only useful for later use with RandomGenerator:setState in the same major version of LÖVE.\n\nThis is different from RandomGenerator:getSeed in that getState gets the RandomGenerator's current state, whereas getSeed gets the previously set seed number.",
							"name": "getState",
							"variants": [
								{
									"description": "The value of the state string does not depend on the current operating system.",
									"returns": [
										{
											"description": "The current state of the RandomGenerator object, represented as a string.",
											"name": "state",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Generates a pseudo-random number in a platform independent manner.",
							"name": "random",
							"variants": [
								{
									"description": "Get uniformly distributed pseudo-random number within 1.",
									"returns": [
										{
											"description": "The pseudo-random number.",
											"name": "number",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The maximum possible value it should return.",
											"name": "max",
											"type": "number"
										}
									],
									"description": "Get uniformly distributed pseudo-random integer number within max.",
									"returns": [
										{
											"description": "The pseudo-random integer number.",
											"name": "number",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The minimum possible value it should return.",
											"name": "min",
											"type": "number"
										},
										{
											"description": "The maximum possible value it should return.",
											"name": "max",
											"type": "number"
										}
									],
									"description": "Get uniformly distributed pseudo-random integer number within max.",
									"returns": [
										{
											"description": "The pseudo-random integer number.",
											"name": "number",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get a normally distributed pseudo random number.",
							"name": "randomNormal",
							"variants": [
								{
									"arguments": [
										{
											"default": "1",
											"description": "Standard deviation of the distribution.",
											"name": "stddev",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The mean of the distribution.",
											"name": "mean",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Normally distributed random number with variance (stddev)² and the specified mean.",
											"name": "number",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the seed of the random number generator using the specified integer number.",
							"name": "setSeed",
							"variants": [
								{
									"arguments": [
										{
											"description": "The integer number with which you want to seed the randomization. Must be within the range of 2^53.",
											"name": "seed",
											"type": "number"
										}
									],
									"description": "Due to Lua's use of double-precision floating point numbers, values above 2^53 cannot be accurately represented. Use the other variant of this function if your seed will have a larger value."
								},
								{
									"arguments": [
										{
											"description": "The lower 32 bits of the seed value. Must be within the range of 2^32 - 1.",
											"name": "low",
											"type": "number"
										},
										{
											"description": "The higher 32 bits of the seed value. Must be within the range of 2^32 - 1.",
											"name": "high",
											"type": "number"
										}
									],
									"description": "Combines two 32-bit integer numbers into a 64-bit integer value and sets the seed of the random number generator using the value."
								}
							]
						},
						{
							"description": "Sets the current state of the random number generator. The value used as an argument for this function is an opaque string and should only originate from a previous call to RandomGenerator:getState in the same major version of LÖVE.\n\nThis is different from RandomGenerator:setSeed in that setState directly sets the RandomGenerator's current implementation-dependent state, whereas setSeed gives it a new seed value.",
							"name": "setState",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new state of the RandomGenerator object, represented as a string. This should originate from a previous call to RandomGenerator:getState.",
											"name": "state",
											"type": "string"
										}
									],
									"description": "The effect of the state string does not depend on the current operating system."
								}
							]
						}
					],
					"name": "RandomGenerator",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newTransform"
					],
					"description": "Object containing a coordinate system transformation.\n\nThe love.graphics module has several functions and function variants which accept Transform objects.",
					"functions": [
						{
							"description": "Applies the given other Transform object to this one.\n\nThis effectively multiplies this Transform's internal transformation matrix with the other Transform's (i.e. self * other), and stores the result in this object.",
							"name": "apply",
							"variants": [
								{
									"arguments": [
										{
											"description": "The other Transform object to apply to this Transform.",
											"name": "other",
											"type": "Transform"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Creates a new copy of this Transform.",
							"name": "clone",
							"variants": [
								{
									"returns": [
										{
											"description": "The copy of this Transform.",
											"name": "clone",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Gets the internal 4x4 transformation matrix stored by this Transform. The matrix is returned in row-major order.",
							"name": "getMatrix",
							"variants": [
								{
									"returns": [
										{
											"description": "The first column of the first row of the matrix.",
											"name": "e1_1",
											"type": "number"
										},
										{
											"description": "The second column of the first row of the matrix.",
											"name": "e1_2",
											"type": "number"
										},
										{
											"description": "The third column of the first row of the matrix.",
											"name": "e1_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the first row of the matrix.",
											"name": "e1_4",
											"type": "number"
										},
										{
											"description": "The first column of the second row of the matrix.",
											"name": "e2_1",
											"type": "number"
										},
										{
											"description": "The second column of the second row of the matrix.",
											"name": "e2_2",
											"type": "number"
										},
										{
											"description": "The third column of the second row of the matrix.",
											"name": "e2_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the second row of the matrix.",
											"name": "e2_4",
											"type": "number"
										},
										{
											"description": "The first column of the third row of the matrix.",
											"name": "e3_1",
											"type": "number"
										},
										{
											"description": "The second column of the third row of the matrix.",
											"name": "e3_2",
											"type": "number"
										},
										{
											"description": "The third column of the third row of the matrix.",
											"name": "e3_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the third row of the matrix.",
											"name": "e3_4",
											"type": "number"
										},
										{
											"description": "The first column of the fourth row of the matrix.",
											"name": "e4_1",
											"type": "number"
										},
										{
											"description": "The second column of the fourth row of the matrix.",
											"name": "e4_2",
											"type": "number"
										},
										{
											"description": "The third column of the fourth row of the matrix.",
											"name": "e4_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the fourth row of the matrix.",
											"name": "e4_4",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Creates a new Transform containing the inverse of this Transform.",
							"name": "inverse",
							"variants": [
								{
									"returns": [
										{
											"description": "A new Transform object representing the inverse of this Transform's matrix.",
											"name": "inverse",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Applies the reverse of the Transform object's transformation to the given 2D position.\n\nThis effectively converts the given position from the local coordinate space of the Transform into global coordinates.\n\nOne use of this method can be to convert a screen-space mouse position into global world coordinates, if the given Transform has transformations applied that are used for a camera system in-game.",
							"name": "inverseTransformPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of the position with the transform applied.",
											"name": "localX",
											"type": "number"
										},
										{
											"description": "The y component of the position with the transform applied.",
											"name": "localY",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x component of the position in global coordinates.",
											"name": "globalX",
											"type": "number"
										},
										{
											"description": "The y component of the position in global coordinates.",
											"name": "globalY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether the Transform is an affine transformation.",
							"name": "isAffine2DTransform",
							"variants": [
								{
									"returns": [
										{
											"description": "true if the transform object is an affine transformation, false otherwise.",
											"name": "affine",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Resets the Transform to an identity state. All previously applied transformations are erased.",
							"name": "reset",
							"variants": [
								{
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Applies a rotation to the Transform's coordinate system. This method does not reset any previously applied transformations.",
							"name": "rotate",
							"variants": [
								{
									"arguments": [
										{
											"description": "The relative angle in radians to rotate this Transform by.",
											"name": "angle",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Scales the Transform's coordinate system. This method does not reset any previously applied transformations.",
							"name": "scale",
							"variants": [
								{
									"arguments": [
										{
											"description": "The relative scale factor along the x-axis.",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "The relative scale factor along the y-axis.",
											"name": "sy",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Directly sets the Transform's internal 4x4 transformation matrix.",
							"name": "setMatrix",
							"variants": [
								{
									"arguments": [
										{
											"description": "The first column of the first row of the matrix.",
											"name": "e1_1",
											"type": "number"
										},
										{
											"description": "The second column of the first row of the matrix.",
											"name": "e1_2",
											"type": "number"
										},
										{
											"description": "The third column of the first row of the matrix.",
											"name": "e1_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the first row of the matrix.",
											"name": "e1_4",
											"type": "number"
										},
										{
											"description": "The first column of the second row of the matrix.",
											"name": "e2_1",
											"type": "number"
										},
										{
											"description": "The second column of the second row of the matrix.",
											"name": "e2_2",
											"type": "number"
										},
										{
											"description": "The third column of the second row of the matrix.",
											"name": "e2_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the second row of the matrix.",
											"name": "e2_4",
											"type": "number"
										},
										{
											"description": "The first column of the third row of the matrix.",
											"name": "e3_1",
											"type": "number"
										},
										{
											"description": "The second column of the third row of the matrix.",
											"name": "e3_2",
											"type": "number"
										},
										{
											"description": "The third column of the third row of the matrix.",
											"name": "e3_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the third row of the matrix.",
											"name": "e3_4",
											"type": "number"
										},
										{
											"description": "The first column of the fourth row of the matrix.",
											"name": "e4_1",
											"type": "number"
										},
										{
											"description": "The second column of the fourth row of the matrix.",
											"name": "e4_2",
											"type": "number"
										},
										{
											"description": "The third column of the fourth row of the matrix.",
											"name": "e4_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the fourth row of the matrix.",
											"name": "e4_4",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "How to interpret the matrix element arguments (row-major or column-major).",
											"name": "layout",
											"type": "MatrixLayout"
										},
										{
											"description": "The first column of the first row of the matrix.",
											"name": "e1_1",
											"type": "number"
										},
										{
											"description": "The second column of the first row or the first column of the second row of the matrix, depending on the specified layout.",
											"name": "e1_2",
											"type": "number"
										},
										{
											"description": "The third column/row of the first row/column of the matrix.",
											"name": "e1_3",
											"type": "number"
										},
										{
											"description": "The fourth column/row of the first row/column of the matrix.",
											"name": "e1_4",
											"type": "number"
										},
										{
											"description": "The first column/row of the second row/column of the matrix.",
											"name": "e2_1",
											"type": "number"
										},
										{
											"description": "The second column/row of the second row/column of the matrix.",
											"name": "e2_2",
											"type": "number"
										},
										{
											"description": "The third column/row of the second row/column of the matrix.",
											"name": "e2_3",
											"type": "number"
										},
										{
											"description": "The fourth column/row of the second row/column of the matrix.",
											"name": "e2_4",
											"type": "number"
										},
										{
											"description": "The first column/row of the third row/column of the matrix.",
											"name": "e3_1",
											"type": "number"
										},
										{
											"description": "The second column/row of the third row/column of the matrix.",
											"name": "e3_2",
											"type": "number"
										},
										{
											"description": "The third column/row of the third row/column of the matrix.",
											"name": "e3_3",
											"type": "number"
										},
										{
											"description": "The fourth column/row of the third row/column of the matrix.",
											"name": "e3_4",
											"type": "number"
										},
										{
											"description": "The first column/row of the fourth row/column of the matrix.",
											"name": "e4_1",
											"type": "number"
										},
										{
											"description": "The second column/row of the fourth row/column of the matrix.",
											"name": "e4_2",
											"type": "number"
										},
										{
											"description": "The third column/row of the fourth row/column of the matrix.",
											"name": "e4_3",
											"type": "number"
										},
										{
											"description": "The fourth column of the fourth row of the matrix.",
											"name": "e4_4",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "How to interpret the matrix element arguments (row-major or column-major).",
											"name": "layout",
											"type": "MatrixLayout"
										},
										{
											"arraytype": "number",
											"description": "A flat table containing the 16 matrix elements.",
											"name": "matrix",
											"type": "table"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "How to interpret the matrix element arguments (row-major or column-major).",
											"name": "layout",
											"type": "MatrixLayout"
										},
										{
											"description": "A table of 4 tables, with each sub-table containing 4 matrix elements.",
											"name": "matrix",
											"type": "table"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Resets the Transform to the specified transformation parameters.",
							"name": "setTransformation",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position of the Transform on the x-axis.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The position of the Transform on the y-axis.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "0",
											"description": "The orientation of the Transform in radians.",
											"name": "angle",
											"type": "number"
										},
										{
											"default": "1",
											"description": "Scale factor on the x-axis.",
											"name": "sx",
											"type": "number"
										},
										{
											"default": "sx",
											"description": "Scale factor on the y-axis.",
											"name": "sy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset on the x-axis.",
											"name": "ox",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Origin offset on the y-axis.",
											"name": "oy",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor on the x-axis.",
											"name": "kx",
											"type": "number"
										},
										{
											"default": "0",
											"description": "Shearing / skew factor on the y-axis.",
											"name": "ky",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Applies a shear factor (skew) to the Transform's coordinate system. This method does not reset any previously applied transformations.",
							"name": "shear",
							"variants": [
								{
									"arguments": [
										{
											"description": "The shear factor along the x-axis.",
											"name": "kx",
											"type": "number"
										},
										{
											"description": "The shear factor along the y-axis.",
											"name": "ky",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						},
						{
							"description": "Applies the Transform object's transformation to the given 2D position.\n\nThis effectively converts the given position from global coordinates into the local coordinate space of the Transform.",
							"name": "transformPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of the position in global coordinates.",
											"name": "globalX",
											"type": "number"
										},
										{
											"description": "The y component of the position in global coordinates.",
											"name": "globalY",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x component of the position with the transform applied.",
											"name": "localX",
											"type": "number"
										},
										{
											"description": "The y component of the position with the transform applied.",
											"name": "localY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Applies a translation to the Transform's coordinate system. This method does not reset any previously applied transformations.",
							"name": "translate",
							"variants": [
								{
									"arguments": [
										{
											"description": "The relative translation along the x-axis.",
											"name": "dx",
											"type": "number"
										},
										{
											"description": "The relative translation along the y-axis.",
											"name": "dy",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The Transform object the method was called on. Allows easily chaining Transform methods.",
											"name": "transform",
											"type": "Transform"
										}
									]
								}
							]
						}
					],
					"name": "Transform",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides an interface to the user's mouse.",
			"enums": [
				{
					"constants": [
						{
							"description": "The cursor is using a custom image.",
							"name": "image"
						},
						{
							"description": "An arrow pointer.",
							"name": "arrow"
						},
						{
							"description": "An I-beam, normally used when mousing over editable or selectable text.",
							"name": "ibeam"
						},
						{
							"description": "Wait graphic.",
							"name": "wait"
						},
						{
							"description": "Small wait cursor with an arrow pointer.",
							"name": "waitarrow"
						},
						{
							"description": "Crosshair symbol.",
							"name": "crosshair"
						},
						{
							"description": "Double arrow pointing to the top-left and bottom-right.",
							"name": "sizenwse"
						},
						{
							"description": "Double arrow pointing to the top-right and bottom-left.",
							"name": "sizenesw"
						},
						{
							"description": "Double arrow pointing left and right.",
							"name": "sizewe"
						},
						{
							"description": "Double arrow pointing up and down.",
							"name": "sizens"
						},
						{
							"description": "Four-pointed arrow pointing up, down, left, and right.",
							"name": "sizeall"
						},
						{
							"description": "Slashed circle or crossbones.",
							"name": "no"
						},
						{
							"description": "Hand symbol.",
							"name": "hand"
						}
					],
					"description": "Types of hardware cursors.",
					"name": "CursorType"
				}
			],
			"functions": [
				{
					"description": "Gets the current Cursor.",
					"name": "getCursor",
					"variants": [
						{
							"returns": [
								{
									"description": "The current cursor, or nil if no cursor is set.",
									"name": "cursor",
									"type": "Cursor"
								}
							]
						}
					]
				},
				{
					"description": "Returns the current position of the mouse.",
					"name": "getPosition",
					"variants": [
						{
							"returns": [
								{
									"description": "The position of the mouse along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position of the mouse along the y-axis.",
									"name": "y",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether relative mode is enabled for the mouse.\n\nIf relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode is enabled, even when relative mouse motion events are generated.",
					"name": "getRelativeMode",
					"variants": [
						{
							"returns": [
								{
									"description": "True if relative mode is enabled, false if it's disabled.",
									"name": "enabled",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets a Cursor object representing a system-native hardware cursor.\n\nHardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.",
					"name": "getSystemCursor",
					"variants": [
						{
							"arguments": [
								{
									"description": "The type of system cursor to get. ",
									"name": "ctype",
									"type": "CursorType"
								}
							],
							"description": "The 'image' CursorType is not a valid argument. Use love.mouse.newCursor to create a hardware cursor using a custom image.",
							"returns": [
								{
									"description": "The Cursor object representing the system cursor type.",
									"name": "cursor",
									"type": "Cursor"
								}
							]
						}
					]
				},
				{
					"description": "Returns the current x-position of the mouse.",
					"name": "getX",
					"variants": [
						{
							"returns": [
								{
									"description": "The position of the mouse along the x-axis.",
									"name": "x",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the current y-position of the mouse.",
					"name": "getY",
					"variants": [
						{
							"returns": [
								{
									"description": "The position of the mouse along the y-axis.",
									"name": "y",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether cursor functionality is supported.\n\nIf it isn't supported, calling love.mouse.newCursor and love.mouse.getSystemCursor will cause an error. Mobile devices do not support cursors.",
					"name": "isCursorSupported",
					"variants": [
						{
							"returns": [
								{
									"description": "Whether the system has cursor functionality.",
									"name": "supported",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks whether a certain mouse button is down.\n\nThis function does not detect mouse wheel scrolling; you must use the love.wheelmoved (or love.mousepressed in version 0.9.2 and older) callback for that. ",
					"name": "isDown",
					"variants": [
						{
							"arguments": [
								{
									"description": "The index of a button to check. 1 is the primary mouse button, 2 is the secondary mouse button and 3 is the middle button. Further buttons are mouse dependant.",
									"name": "button",
									"type": "number"
								},
								{
									"description": "Additional button numbers to check.",
									"name": "...",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "True if any specified button is down.",
									"name": "down",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks if the mouse is grabbed.",
					"name": "isGrabbed",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the cursor is grabbed, false if it is not.",
									"name": "grabbed",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks if the cursor is visible.",
					"name": "isVisible",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the cursor to visible, false if the cursor is hidden.",
									"name": "visible",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new hardware Cursor object from an image file or ImageData.\n\nHardware cursors are framerate-independent and work the same way as normal operating system cursors. Unlike drawing an image at the mouse's current coordinates, hardware cursors never have visible lag between when the mouse is moved and when the cursor position updates, even at low framerates.\n\nThe hot spot is the point the operating system uses to determine what was clicked and at what position the mouse cursor is. For example, the normal arrow pointer normally has its hot spot at the top left of the image, but a crosshair cursor might have it in the middle.",
					"name": "newCursor",
					"variants": [
						{
							"arguments": [
								{
									"description": "The ImageData to use for the new Cursor.",
									"name": "imageData",
									"type": "ImageData"
								},
								{
									"default": "0",
									"description": "The x-coordinate in the ImageData of the cursor's hot spot.",
									"name": "hotx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The y-coordinate in the ImageData of the cursor's hot spot.",
									"name": "hoty",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new Cursor object.",
									"name": "cursor",
									"type": "Cursor"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Path to the image to use for the new Cursor.",
									"name": "filename",
									"type": "string"
								},
								{
									"default": "0",
									"description": "The x-coordinate in the image of the cursor's hot spot.",
									"name": "hotx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The y-coordinate in the image of the cursor's hot spot.",
									"name": "hoty",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new Cursor object.",
									"name": "cursor",
									"type": "Cursor"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Data representing the image to use for the new Cursor.",
									"name": "fileData",
									"type": "FileData"
								},
								{
									"default": "0",
									"description": "The x-coordinate in the image of the cursor's hot spot.",
									"name": "hotx",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The y-coordinate in the image of the cursor's hot spot.",
									"name": "hoty",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new Cursor object.",
									"name": "cursor",
									"type": "Cursor"
								}
							]
						}
					]
				},
				{
					"description": "Sets the current mouse cursor.",
					"name": "setCursor",
					"variants": [
						{
							"arguments": [
								{
									"description": "The Cursor object to use as the current mouse cursor.",
									"name": "cursor",
									"type": "Cursor"
								}
							]
						},
						{
							"description": "Resets the current mouse cursor to the default."
						}
					]
				},
				{
					"description": "Grabs the mouse and confines it to the window.",
					"name": "setGrabbed",
					"variants": [
						{
							"arguments": [
								{
									"description": "True to confine the mouse, false to let it leave the window.",
									"name": "grab",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the current position of the mouse. Non-integer values are floored.",
					"name": "setPosition",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new position of the mouse along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The new position of the mouse along the y-axis.",
									"name": "y",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets whether relative mode is enabled for the mouse.\n\nWhen relative mode is enabled, the cursor is hidden and doesn't move when the mouse does, but relative mouse motion events are still generated via love.mousemoved. This lets the mouse move in any direction indefinitely without the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse may not be updated while relative mode is enabled, even when relative mouse motion events are generated.",
					"name": "setRelativeMode",
					"variants": [
						{
							"arguments": [
								{
									"description": "True to enable relative mode, false to disable it.",
									"name": "enable",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the current visibility of the cursor.",
					"name": "setVisible",
					"variants": [
						{
							"arguments": [
								{
									"description": "True to set the cursor to visible, false to hide the cursor.",
									"name": "visible",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the current X position of the mouse.\n\nNon-integer values are floored.",
					"name": "setX",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new position of the mouse along the x-axis.",
									"name": "x",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the current Y position of the mouse.\n\nNon-integer values are floored.",
					"name": "setY",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new position of the mouse along the y-axis.",
									"name": "y",
									"type": "number"
								}
							]
						}
					]
				}
			],
			"name": "mouse",
			"types": [
				{
					"constructors": [
						"getCursor",
						"newCursor",
						"getSystemCursor"
					],
					"description": "Represents a hardware cursor.",
					"functions": [
						{
							"description": "Gets the type of the Cursor.",
							"name": "getType",
							"variants": [
								{
									"returns": [
										{
											"description": "The type of the Cursor.",
											"name": "ctype",
											"type": "CursorType"
										}
									]
								}
							]
						}
					],
					"name": "Cursor",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "Can simulate 2D rigid body physics in a realistic manner. This module is based on Box2D, and this API corresponds to the Box2D API as closely as possible.",
			"enums": [
				{
					"constants": [
						{
							"description": "Static bodies do not move.",
							"name": "static"
						},
						{
							"description": "Dynamic bodies collide with all bodies.",
							"name": "dynamic"
						},
						{
							"description": "Kinematic bodies only collide with dynamic bodies.",
							"name": "kinematic"
						}
					],
					"description": "The types of a Body. ",
					"name": "BodyType"
				},
				{
					"constants": [
						{
							"description": "A DistanceJoint.",
							"name": "distance"
						},
						{
							"description": "A FrictionJoint.",
							"name": "friction"
						},
						{
							"description": "A GearJoint.",
							"name": "gear"
						},
						{
							"description": "A MouseJoint.",
							"name": "mouse"
						},
						{
							"description": "A PrismaticJoint.",
							"name": "prismatic"
						},
						{
							"description": "A PulleyJoint.",
							"name": "pulley"
						},
						{
							"description": "A RevoluteJoint.",
							"name": "revolute"
						},
						{
							"description": "A RopeJoint.",
							"name": "rope"
						},
						{
							"description": "A WeldJoint.",
							"name": "weld"
						}
					],
					"description": "Different types of joints.",
					"name": "JointType"
				},
				{
					"constants": [
						{
							"description": "The Shape is a CircleShape.",
							"name": "circle"
						},
						{
							"description": "The Shape is a PolygonShape.",
							"name": "polygon"
						},
						{
							"description": "The Shape is a EdgeShape.",
							"name": "edge"
						},
						{
							"description": "The Shape is a ChainShape.",
							"name": "chain"
						}
					],
					"description": "The different types of Shapes, as returned by Shape:getType.",
					"name": "ShapeType"
				}
			],
			"functions": [
				{
					"description": "Returns the two closest points between two fixtures and their distance.",
					"name": "getDistance",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first fixture.",
									"name": "fixture1",
									"type": "Fixture"
								},
								{
									"description": "The second fixture.",
									"name": "fixture2",
									"type": "Fixture"
								}
							],
							"returns": [
								{
									"description": "The distance of the two points.",
									"name": "distance",
									"type": "number"
								},
								{
									"description": "The x-coordinate of the first point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y-coordinate of the first point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x-coordinate of the second point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y-coordinate of the second point.",
									"name": "y2",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the meter scale factor.\n\nAll coordinates in the physics module are divided by this number, creating a convenient way to draw the objects directly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters.",
					"name": "getMeter",
					"variants": [
						{
							"returns": [
								{
									"description": "The scale factor as an integer.",
									"name": "scale",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new body.\n\nThere are three types of bodies. \n\n* Static bodies do not move, have a infinite mass, and can be used for level boundaries. \n\n* Dynamic bodies are the main actors in the simulation, they collide with everything. \n\n* Kinematic bodies do not react to forces and only collide with dynamic bodies.\n\nThe mass of the body gets calculated when a Fixture is attached or removed, but can be changed at any time with Body:setMass or Body:resetMassData.",
					"name": "newBody",
					"variants": [
						{
							"arguments": [
								{
									"description": "The world to create the body in.",
									"name": "world",
									"type": "World"
								},
								{
									"default": "0",
									"description": "The x position of the body.",
									"name": "x",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The y position of the body.",
									"name": "y",
									"type": "number"
								},
								{
									"default": "'static'",
									"description": "The type of the body.",
									"name": "type",
									"type": "BodyType"
								}
							],
							"returns": [
								{
									"description": "A new body.",
									"name": "body",
									"type": "Body"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new ChainShape.",
					"name": "newChainShape",
					"variants": [
						{
							"arguments": [
								{
									"description": "If the chain should loop back to the first point.",
									"name": "loop",
									"type": "boolean"
								},
								{
									"description": "The x position of the first point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second point.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "Additional point positions.",
									"name": "...",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new shape.",
									"name": "shape",
									"type": "ChainShape"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "If the chain should loop back to the first point.",
									"name": "loop",
									"type": "boolean"
								},
								{
									"arraytype": "number",
									"description": "A list of points to construct the ChainShape, in the form of {x1, y1, x2, y2, ...}.",
									"name": "points",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "The new shape.",
									"name": "shape",
									"type": "ChainShape"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new CircleShape.",
					"name": "newCircleShape",
					"variants": [
						{
							"arguments": [
								{
									"description": "The radius of the circle.",
									"name": "radius",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new shape.",
									"name": "shape",
									"type": "CircleShape"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The x position of the circle.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the circle.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The radius of the circle.",
									"name": "radius",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new shape.",
									"name": "shape",
									"type": "CircleShape"
								}
							]
						}
					]
				},
				{
					"description": "Creates a DistanceJoint between two bodies.\n\nThis joint constrains the distance between two points on two bodies to be constant. These two points are specified in world coordinates and the two bodies are assumed to be in place when this joint is created. The first anchor point is connected to the first body and the second to the second body, and the points define the length of the distance joint.",
					"name": "newDistanceJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first anchor point (world space).",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first anchor point (world space).",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second anchor point (world space).",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second anchor point (world space).",
									"name": "y2",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new distance joint.",
									"name": "joint",
									"type": "DistanceJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new EdgeShape.",
					"name": "newEdgeShape",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x position of the first point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second point.",
									"name": "y2",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new shape.",
									"name": "shape",
									"type": "EdgeShape"
								}
							]
						}
					]
				},
				{
					"description": "Creates and attaches a Fixture to a body.\n\nNote that the Shape object is copied rather than kept as a reference when the Fixture is created. To get the Shape object that the Fixture owns, use Fixture:getShape.",
					"name": "newFixture",
					"variants": [
						{
							"arguments": [
								{
									"description": "The body which gets the fixture attached.",
									"name": "body",
									"type": "Body"
								},
								{
									"description": "The shape to be copied to the fixture.",
									"name": "shape",
									"type": "Shape"
								},
								{
									"default": "1",
									"description": "The density of the fixture.",
									"name": "density",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new fixture.",
									"name": "fixture",
									"type": "Fixture"
								}
							]
						}
					]
				},
				{
					"description": "Create a friction joint between two bodies. A FrictionJoint applies friction to a body.",
					"name": "newFrictionJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the anchor point.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the anchor point.",
									"name": "y",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new FrictionJoint.",
									"name": "joint",
									"type": "FrictionJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first anchor point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first anchor point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second anchor point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second anchor point.",
									"name": "y2",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new FrictionJoint.",
									"name": "joint",
									"type": "FrictionJoint"
								}
							]
						}
					]
				},
				{
					"description": "Create a GearJoint connecting two Joints.\n\nThe gear joint connects two joints that must be either  prismatic or  revolute joints. Using this joint requires that the joints it uses connect their respective bodies to the ground and have the ground as the first body. When destroying the bodies and joints you must make sure you destroy the gear joint before the other joints.\n\nThe gear joint has a ratio the determines how the angular or distance values of the connected joints relate to each other. The formula coordinate1 + ratio * coordinate2 always has a constant value that is set when the gear joint is created.",
					"name": "newGearJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first joint to connect with a gear joint.",
									"name": "joint1",
									"type": "Joint"
								},
								{
									"description": "The second joint to connect with a gear joint.",
									"name": "joint2",
									"type": "Joint"
								},
								{
									"default": "1",
									"description": "The gear ratio.",
									"name": "ratio",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new gear joint.",
									"name": "joint",
									"type": "GearJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a joint between two bodies which controls the relative motion between them.\n\nPosition and rotation offsets can be specified once the MotorJoint has been created, as well as the maximum motor force and torque that will be be applied to reach the target offsets.",
					"name": "newMotorJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"default": "0.3",
									"description": "The joint's initial position correction factor, in the range of 1.",
									"name": "correctionFactor",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new MotorJoint.",
									"name": "joint",
									"type": "MotorJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"default": "0.3",
									"description": "The joint's initial position correction factor, in the range of 1.",
									"name": "correctionFactor",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new MotorJoint.",
									"name": "joint",
									"type": "MotorJoint"
								}
							]
						}
					]
				},
				{
					"description": "Create a joint between a body and the mouse.\n\nThis joint actually connects the body to a fixed point in the world. To make it follow the mouse, the fixed point must be updated every timestep (example below).\n\nThe advantage of using a MouseJoint instead of just changing a body position directly is that collisions and reactions to other joints are handled by the physics engine. ",
					"name": "newMouseJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The body to attach to the mouse.",
									"name": "body",
									"type": "Body"
								},
								{
									"description": "The x position of the connecting point.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the connecting point.",
									"name": "y",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new mouse joint.",
									"name": "joint",
									"type": "MouseJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new PolygonShape.\n\nThis shape can have 8 vertices at most, and must form a convex shape.",
					"name": "newPolygonShape",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x position of the first point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second point.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "The x position of the third point.",
									"name": "x3",
									"type": "number"
								},
								{
									"description": "The y position of the third point.",
									"name": "y3",
									"type": "number"
								},
								{
									"description": "You can continue passing more point positions to create the PolygonShape.",
									"name": "...",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new PolygonShape.",
									"name": "shape",
									"type": "PolygonShape"
								}
							]
						},
						{
							"arguments": [
								{
									"arraytype": "number",
									"description": "A list of vertices to construct the polygon, in the form of {x1, y1, x2, y2, x3, y3, ...}.",
									"name": "vertices",
									"type": "table"
								}
							],
							"returns": [
								{
									"description": "A new PolygonShape.",
									"name": "shape",
									"type": "PolygonShape"
								}
							]
						}
					]
				},
				{
					"description": "Creates a PrismaticJoint between two bodies.\n\nA prismatic joint constrains two bodies to move relatively to each other on a specified axis. It does not allow for relative rotation. Its definition and operation are similar to a  revolute joint, but with translation and force substituted for angle and torque.",
					"name": "newPrismaticJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to connect with a prismatic joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to connect with a prismatic joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x coordinate of the anchor point.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y coordinate of the anchor point.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The x coordinate of the axis vector.",
									"name": "ax",
									"type": "number"
								},
								{
									"description": "The y coordinate of the axis vector.",
									"name": "ay",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new prismatic joint.",
									"name": "joint",
									"type": "PrismaticJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body to connect with a prismatic joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to connect with a prismatic joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x coordinate of the first anchor point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y coordinate of the first anchor point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x coordinate of the second anchor point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y coordinate of the second anchor point.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "The x coordinate of the axis unit vector.",
									"name": "ax",
									"type": "number"
								},
								{
									"description": "The y coordinate of the axis unit vector.",
									"name": "ay",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new prismatic joint.",
									"name": "joint",
									"type": "PrismaticJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body to connect with a prismatic joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to connect with a prismatic joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x coordinate of the first anchor point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y coordinate of the first anchor point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x coordinate of the second anchor point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y coordinate of the second anchor point.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "The x coordinate of the axis unit vector.",
									"name": "ax",
									"type": "number"
								},
								{
									"description": "The y coordinate of the axis unit vector.",
									"name": "ay",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								},
								{
									"default": "0",
									"description": "The reference angle between body1 and body2, in radians.",
									"name": "referenceAngle",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new prismatic joint.",
									"name": "joint",
									"type": "PrismaticJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a PulleyJoint to join two bodies to each other and the ground.\n\nThe pulley joint simulates a pulley with an optional block and tackle. If the ratio parameter has a value different from one, then the simulated rope extends faster on one side than the other. In a pulley joint the total length of the simulated rope is the constant length1 + ratio * length2, which is set when the pulley joint is created.\n\nPulley joints can behave unpredictably if one side is fully extended. It is recommended that the method  setMaxLengths  be used to constrain the maximum lengths each side can attain.",
					"name": "newPulleyJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to connect with a pulley joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to connect with a pulley joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x coordinate of the first body's ground anchor.",
									"name": "gx1",
									"type": "number"
								},
								{
									"description": "The y coordinate of the first body's ground anchor.",
									"name": "gy1",
									"type": "number"
								},
								{
									"description": "The x coordinate of the second body's ground anchor.",
									"name": "gx2",
									"type": "number"
								},
								{
									"description": "The y coordinate of the second body's ground anchor.",
									"name": "gy2",
									"type": "number"
								},
								{
									"description": "The x coordinate of the pulley joint anchor in the first body.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y coordinate of the pulley joint anchor in the first body.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x coordinate of the pulley joint anchor in the second body.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y coordinate of the pulley joint anchor in the second body.",
									"name": "y2",
									"type": "number"
								},
								{
									"default": "1",
									"description": "The joint ratio.",
									"name": "ratio",
									"type": "number"
								},
								{
									"default": "true",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new pulley joint.",
									"name": "joint",
									"type": "PulleyJoint"
								}
							]
						}
					]
				},
				{
					"description": "Shorthand for creating rectangular PolygonShapes. \n\nBy default, the local origin is located at the '''center''' of the rectangle as opposed to the top left for graphics.",
					"name": "newRectangleShape",
					"variants": [
						{
							"arguments": [
								{
									"description": "The width of the rectangle.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the rectangle.",
									"name": "height",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new PolygonShape.",
									"name": "shape",
									"type": "PolygonShape"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The offset along the x-axis.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The offset along the y-axis.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The width of the rectangle.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the rectangle.",
									"name": "height",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The initial angle of the rectangle.",
									"name": "angle",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new PolygonShape.",
									"name": "shape",
									"type": "PolygonShape"
								}
							]
						}
					]
				},
				{
					"description": "Creates a pivot joint between two bodies.\n\nThis joint connects two bodies to a point around which they can pivot.",
					"name": "newRevoluteJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the connecting point.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the connecting point.",
									"name": "y",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new revolute joint.",
									"name": "joint",
									"type": "RevoluteJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first connecting point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first connecting point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second connecting point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second connecting point.",
									"name": "y2",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								},
								{
									"default": "0",
									"description": "The reference angle between body1 and body2, in radians.",
									"name": "referenceAngle",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new revolute joint.",
									"name": "joint",
									"type": "RevoluteJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a joint between two bodies. Its only function is enforcing a max distance between these bodies.",
					"name": "newRopeJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first anchor point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first anchor point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second anchor point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second anchor point.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "The maximum distance for the bodies.",
									"name": "maxLength",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new RopeJoint.",
									"name": "joint",
									"type": "RopeJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a constraint joint between two bodies. A WeldJoint essentially glues two bodies together. The constraint is a bit soft, however, due to Box2D's iterative solver.",
					"name": "newWeldJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the anchor point (world space).",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the anchor point (world space).",
									"name": "y",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new WeldJoint.",
									"name": "joint",
									"type": "WeldJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first anchor point (world space).",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first anchor point (world space).",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second anchor point (world space).",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second anchor point (world space).",
									"name": "y2",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new WeldJoint.",
									"name": "joint",
									"type": "WeldJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body to attach to the joint.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body to attach to the joint.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first anchor point (world space).",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first anchor point  (world space).",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second anchor point (world space).",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second anchor point (world space).",
									"name": "y2",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								},
								{
									"default": "0",
									"description": "The reference angle between body1 and body2, in radians.",
									"name": "referenceAngle",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The new WeldJoint.",
									"name": "joint",
									"type": "WeldJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a wheel joint.",
					"name": "newWheelJoint",
					"variants": [
						{
							"arguments": [
								{
									"description": "The first body.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the anchor point.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y position of the anchor point.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The x position of the axis unit vector.",
									"name": "ax",
									"type": "number"
								},
								{
									"description": "The y position of the axis unit vector.",
									"name": "ay",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new WheelJoint.",
									"name": "joint",
									"type": "WheelJoint"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The first body.",
									"name": "body1",
									"type": "Body"
								},
								{
									"description": "The second body.",
									"name": "body2",
									"type": "Body"
								},
								{
									"description": "The x position of the first anchor point.",
									"name": "x1",
									"type": "number"
								},
								{
									"description": "The y position of the first anchor point.",
									"name": "y1",
									"type": "number"
								},
								{
									"description": "The x position of the second anchor point.",
									"name": "x2",
									"type": "number"
								},
								{
									"description": "The y position of the second anchor point.",
									"name": "y2",
									"type": "number"
								},
								{
									"description": "The x position of the axis unit vector.",
									"name": "ax",
									"type": "number"
								},
								{
									"description": "The y position of the axis unit vector.",
									"name": "ay",
									"type": "number"
								},
								{
									"default": "false",
									"description": "Specifies whether the two bodies should collide with each other.",
									"name": "collideConnected",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "The new WheelJoint.",
									"name": "joint",
									"type": "WheelJoint"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new World.",
					"name": "newWorld",
					"variants": [
						{
							"arguments": [
								{
									"default": "0",
									"description": "The x component of gravity.",
									"name": "xg",
									"type": "number"
								},
								{
									"default": "0",
									"description": "The y component of gravity.",
									"name": "yg",
									"type": "number"
								},
								{
									"default": "true",
									"description": "Whether the bodies in this world are allowed to sleep.",
									"name": "sleep",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "A brave new World.",
									"name": "world",
									"type": "World"
								}
							]
						}
					]
				},
				{
					"description": "Sets the pixels to meter scale factor.\n\nAll coordinates in the physics module are divided by this number and converted to meters, and it creates a convenient way to draw the objects directly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This is important because Box2D is tuned to work well with shape sizes from 0.1 to 10 meters. The default meter scale is 30.",
					"name": "setMeter",
					"variants": [
						{
							"arguments": [
								{
									"description": "The scale factor as an integer.",
									"name": "scale",
									"type": "number"
								}
							]
						}
					]
				}
			],
			"name": "physics",
			"types": [
				{
					"constructors": [
						"newBody"
					],
					"description": "Bodies are objects with velocity and position.",
					"functions": [
						{
							"description": "Applies an angular impulse to a body. This makes a single, instantaneous addition to the body momentum.\n\nA body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.",
							"name": "applyAngularImpulse",
							"variants": [
								{
									"arguments": [
										{
											"description": "The impulse in kilogram-square meter per second.",
											"name": "impulse",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Apply force to a Body.\n\nA force pushes a body in a direction. A body with with a larger mass will react less. The reaction also depends on how long a force is applied: since the force acts continuously over the entire timestep, a short timestep will only push the body for a short time. Thus forces are best used for many timesteps to give a continuous push to a body (like gravity). For a single push that is independent of timestep, it is better to use Body:applyLinearImpulse.\n\nIf the position to apply the force is not given, it will act on the center of mass of the body. The part of the force not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia).\n\nNote that the force components and position must be given in world coordinates.",
							"name": "applyForce",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of force to apply to the center of mass.",
											"name": "fx",
											"type": "number"
										},
										{
											"description": "The y component of force to apply to the center of mass.",
											"name": "fy",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The x component of force to apply.",
											"name": "fx",
											"type": "number"
										},
										{
											"description": "The y component of force to apply.",
											"name": "fy",
											"type": "number"
										},
										{
											"description": "The x position to apply the force.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position to apply the force.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Applies an impulse to a body.\n\nThis makes a single, instantaneous addition to the body momentum.\n\nAn impulse pushes a body in a direction. A body with with a larger mass will react less. The reaction does '''not''' depend on the timestep, and is equivalent to applying a force continuously for 1 second. Impulses are best used to give a single push to a body. For a continuous push to a body it is better to use Body:applyForce.\n\nIf the position to apply the impulse is not given, it will act on the center of mass of the body. The part of the impulse not directed towards the center of mass will cause the body to spin (and depends on the rotational inertia). \n\nNote that the impulse components and position must be given in world coordinates.",
							"name": "applyLinearImpulse",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of the impulse applied to the center of mass.",
											"name": "ix",
											"type": "number"
										},
										{
											"description": "The y component of the impulse applied to the center of mass.",
											"name": "iy",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The x component of the impulse.",
											"name": "ix",
											"type": "number"
										},
										{
											"description": "The y component of the impulse.",
											"name": "iy",
											"type": "number"
										},
										{
											"description": "The x position to apply the impulse.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position to apply the impulse.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Apply torque to a body.\n\nTorque is like a force that will change the angular velocity (spin) of a body. The effect will depend on the rotational inertia a body has.",
							"name": "applyTorque",
							"variants": [
								{
									"arguments": [
										{
											"description": "The torque to apply.",
											"name": "torque",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Explicitly destroys the Body and all fixtures and joints attached to it.\n\nAn error will occur if you attempt to use the object after calling this function. In 0.7.2, when you don't have time to wait for garbage collection, this function may be used to free the object immediately.",
							"name": "destroy",
							"variants": [
								[]
							]
						},
						{
							"description": "Get the angle of the body.\n\nThe angle is measured in radians. If you need to transform it to degrees, use math.deg.\n\nA value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view.",
							"name": "getAngle",
							"variants": [
								{
									"returns": [
										{
											"description": "The angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the Angular damping of the Body\n\nThe angular damping is the ''rate of decrease of the angular velocity over time'': A spinning body with no damping and no external forces will continue spinning indefinitely. A spinning body with damping will gradually stop spinning.\n\nDamping is not the same as friction - they can be modelled together. However, only damping is provided by Box2D (and LOVE).\n\nDamping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 0.1.",
							"name": "getAngularDamping",
							"variants": [
								{
									"returns": [
										{
											"description": "The value of the angular damping.",
											"name": "damping",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the angular velocity of the Body.\n\nThe angular velocity is the ''rate of change of angle over time''.\n\nIt is changed in World:update by applying torques, off centre forces/impulses, and angular damping. It can be set directly with Body:setAngularVelocity.\n\nIf you need the ''rate of change of position over time'', use Body:getLinearVelocity.",
							"name": "getAngularVelocity",
							"variants": [
								{
									"returns": [
										{
											"description": "The angular velocity in radians/second.",
											"name": "w",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets a list of all Contacts attached to the Body.",
							"name": "getContacts",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Contact",
											"description": "A list with all contacts associated with the Body.",
											"name": "contacts",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Returns a table with all fixtures.",
							"name": "getFixtures",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Fixture",
											"description": "A sequence with all fixtures.",
											"name": "fixtures",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Returns the gravity scale factor.",
							"name": "getGravityScale",
							"variants": [
								{
									"returns": [
										{
											"description": "The gravity scale factor.",
											"name": "scale",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the rotational inertia of the body.\n\nThe rotational inertia is how hard is it to make the body spin.",
							"name": "getInertia",
							"variants": [
								{
									"returns": [
										{
											"description": "The rotational inertial of the body.",
											"name": "inertia",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns a table containing the Joints attached to this Body.",
							"name": "getJoints",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Joint",
											"description": "A sequence with the Joints attached to the Body.",
											"name": "joints",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets the linear damping of the Body.\n\nThe linear damping is the ''rate of decrease of the linear velocity over time''. A moving body with no damping and no external forces will continue moving indefinitely, as is the case in space. A moving body with damping will gradually stop moving.\n\nDamping is not the same as friction - they can be modelled together.",
							"name": "getLinearDamping",
							"variants": [
								{
									"returns": [
										{
											"description": "The value of the linear damping.",
											"name": "damping",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the linear velocity of the Body from its center of mass.\n\nThe linear velocity is the ''rate of change of position over time''.\n\nIf you need the ''rate of change of angle over time'', use Body:getAngularVelocity.\n\nIf you need to get the linear velocity of a point different from the center of mass:\n\n*  Body:getLinearVelocityFromLocalPoint allows you to specify the point in local coordinates.\n\n*  Body:getLinearVelocityFromWorldPoint allows you to specify the point in world coordinates.\n\nSee page 136 of 'Essential Mathematics for Games and Interactive Applications' for definitions of local and world coordinates.",
							"name": "getLinearVelocity",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the velocity vector",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the velocity vector",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the linear velocity of a point on the body.\n\nThe linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.\n\nThe point on the body must given in local coordinates. Use Body:getLinearVelocityFromWorldPoint to specify this with world coordinates.",
							"name": "getLinearVelocityFromLocalPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position to measure velocity.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position to measure velocity.",
											"name": "y",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x component of velocity at point (x,y).",
											"name": "vx",
											"type": "number"
										},
										{
											"description": "The y component of velocity at point (x,y).",
											"name": "vy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the linear velocity of a point on the body.\n\nThe linear velocity for a point on the body is the velocity of the body center of mass plus the velocity at that point from the body spinning.\n\nThe point on the body must given in world coordinates. Use Body:getLinearVelocityFromLocalPoint to specify this with local coordinates.",
							"name": "getLinearVelocityFromWorldPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position to measure velocity.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position to measure velocity.",
											"name": "y",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x component of velocity at point (x,y).",
											"name": "vx",
											"type": "number"
										},
										{
											"description": "The y component of velocity at point (x,y).",
											"name": "vy",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the center of mass position in local coordinates.\n\nUse Body:getWorldCenter to get the center of mass in world coordinates.",
							"name": "getLocalCenter",
							"variants": [
								{
									"returns": [
										{
											"description": "The x coordinate of the center of mass.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y coordinate of the center of mass.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transform a point from world coordinates to local coordinates.",
							"name": "getLocalPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position in world coordinates.",
											"name": "worldX",
											"type": "number"
										},
										{
											"description": "The y position in world coordinates.",
											"name": "worldY",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x position in local coordinates.",
											"name": "localX",
											"type": "number"
										},
										{
											"description": "The y position in local coordinates.",
											"name": "localY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transforms multiple points from world coordinates to local coordinates.",
							"name": "getLocalPoints",
							"variants": [
								{
									"arguments": [
										{
											"description": "(Argument) The x position of the first point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "(Argument) The y position of the first point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "(Argument) The x position of the second point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "(Argument) The y position of the second point.",
											"name": "y2",
											"type": "number"
										},
										{
											"description": "(Argument) You can continue passing x and y position of the points.",
											"name": "...",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "(Result) The transformed x position of the first point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "(Result) The transformed y position of the first point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "(Result) The transformed x position of the second point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "(Result) The transformed y position of the second point.",
											"name": "y2",
											"type": "number"
										},
										{
											"description": "(Result) Additional transformed x and y position of the points.",
											"name": "...",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transform a vector from world coordinates to local coordinates.",
							"name": "getLocalVector",
							"variants": [
								{
									"arguments": [
										{
											"description": "The vector x component in world coordinates.",
											"name": "worldX",
											"type": "number"
										},
										{
											"description": "The vector y component in world coordinates.",
											"name": "worldY",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The vector x component in local coordinates.",
											"name": "localX",
											"type": "number"
										},
										{
											"description": "The vector y component in local coordinates.",
											"name": "localY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the mass of the body.\n\nStatic bodies always have a mass of 0.",
							"name": "getMass",
							"variants": [
								{
									"returns": [
										{
											"description": "The mass of the body (in kilograms).",
											"name": "mass",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the mass, its center, and the rotational inertia.",
							"name": "getMassData",
							"variants": [
								{
									"returns": [
										{
											"description": "The x position of the center of mass.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position of the center of mass.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The mass of the body.",
											"name": "mass",
											"type": "number"
										},
										{
											"description": "The rotational inertia.",
											"name": "inertia",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the position of the body.\n\nNote that this may not be the center of mass of the body.",
							"name": "getPosition",
							"variants": [
								{
									"returns": [
										{
											"description": "The x position.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the position and angle of the body.\n\nNote that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view.",
							"name": "getTransform",
							"variants": [
								{
									"returns": [
										{
											"description": "The x component of the position.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of the position.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the type of the body.",
							"name": "getType",
							"variants": [
								{
									"returns": [
										{
											"description": "The body type.",
											"name": "type",
											"type": "BodyType"
										}
									]
								}
							]
						},
						{
							"description": "Returns the Lua value associated with this Body.",
							"name": "getUserData",
							"variants": [
								{
									"returns": [
										{
											"description": "The Lua value associated with the Body.",
											"name": "value",
											"type": "any"
										}
									]
								}
							]
						},
						{
							"description": "Gets the World the body lives in.",
							"name": "getWorld",
							"variants": [
								{
									"returns": [
										{
											"description": "The world the body lives in.",
											"name": "world",
											"type": "World"
										}
									]
								}
							]
						},
						{
							"description": "Get the center of mass position in world coordinates.\n\nUse Body:getLocalCenter to get the center of mass in local coordinates.",
							"name": "getWorldCenter",
							"variants": [
								{
									"returns": [
										{
											"description": "The x coordinate of the center of mass.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y coordinate of the center of mass.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transform a point from local coordinates to world coordinates.",
							"name": "getWorldPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position in local coordinates.",
											"name": "localX",
											"type": "number"
										},
										{
											"description": "The y position in local coordinates.",
											"name": "localY",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x position in world coordinates.",
											"name": "worldX",
											"type": "number"
										},
										{
											"description": "The y position in world coordinates.",
											"name": "worldY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transforms multiple points from local coordinates to world coordinates.",
							"name": "getWorldPoints",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the first point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y position of the first point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x position of the second point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y position of the second point.",
											"name": "y2",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The transformed x position of the first point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The transformed y position of the first point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The transformed x position of the second point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The transformed y position of the second point.",
											"name": "y2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Transform a vector from local coordinates to world coordinates.",
							"name": "getWorldVector",
							"variants": [
								{
									"arguments": [
										{
											"description": "The vector x component in local coordinates.",
											"name": "localX",
											"type": "number"
										},
										{
											"description": "The vector y component in local coordinates.",
											"name": "localY",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The vector x component in world coordinates.",
											"name": "worldX",
											"type": "number"
										},
										{
											"description": "The vector y component in world coordinates.",
											"name": "worldY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the x position of the body in world coordinates.",
							"name": "getX",
							"variants": [
								{
									"returns": [
										{
											"description": "The x position in world coordinates.",
											"name": "x",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the y position of the body in world coordinates.",
							"name": "getY",
							"variants": [
								{
									"returns": [
										{
											"description": "The y position in world coordinates.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the body is actively used in the simulation.",
							"name": "isActive",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the body is active or false if not.",
											"name": "status",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns the sleep status of the body.",
							"name": "isAwake",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the body is awake or false if not.",
											"name": "status",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Get the bullet status of a body.\n\nThere are two methods to check for body collisions:\n\n*  at their location when the world is updated (default)\n\n*  using continuous collision detection (CCD)\n\nThe default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.\n\nNote that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.",
							"name": "isBullet",
							"variants": [
								{
									"returns": [
										{
											"description": "The bullet status of the body.",
											"name": "status",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Body is destroyed. Destroyed bodies cannot be used.",
							"name": "isDestroyed",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Body is destroyed.",
											"name": "destroyed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the body rotation is locked.",
							"name": "isFixedRotation",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the body's rotation is locked or false if not.",
											"name": "fixed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns the sleeping behaviour of the body.",
							"name": "isSleepingAllowed",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the body is allowed to sleep or false if not.",
											"name": "allowed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Body is touching the given other Body.",
							"name": "isTouching",
							"variants": [
								{
									"arguments": [
										{
											"description": "The other body to check.",
											"name": "otherbody",
											"type": "Body"
										}
									],
									"returns": [
										{
											"description": "True if this body is touching the other body, false otherwise.",
											"name": "touching",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Resets the mass of the body by recalculating it from the mass properties of the fixtures.",
							"name": "resetMassData",
							"variants": [
								[]
							]
						},
						{
							"description": "Sets whether the body is active in the world.\n\nAn inactive body does not take part in the simulation. It will not move or cause any collisions.",
							"name": "setActive",
							"variants": [
								{
									"arguments": [
										{
											"description": "If the body is active or not.",
											"name": "active",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Set the angle of the body.\n\nThe angle is measured in radians. If you need to transform it from degrees, use math.rad.\n\nA value of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes ''clockwise'' from our point of view.\n\nIt is possible to cause a collision with another body by changing its angle. ",
							"name": "setAngle",
							"variants": [
								{
									"arguments": [
										{
											"description": "The angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the angular damping of a Body\n\nSee Body:getAngularDamping for a definition of angular damping.\n\nAngular damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will look unrealistic.",
							"name": "setAngularDamping",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new angular damping.",
											"name": "damping",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the angular velocity of a Body.\n\nThe angular velocity is the ''rate of change of angle over time''.\n\nThis function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost. ",
							"name": "setAngularVelocity",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new angular velocity, in radians per second",
											"name": "w",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Wakes the body up or puts it to sleep.",
							"name": "setAwake",
							"variants": [
								{
									"arguments": [
										{
											"description": "The body sleep status.",
											"name": "awake",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Set the bullet status of a body.\n\nThere are two methods to check for body collisions:\n\n*  at their location when the world is updated (default)\n\n*  using continuous collision detection (CCD)\n\nThe default method is efficient, but a body moving very quickly may sometimes jump over another body without producing a collision. A body that is set as a bullet will use CCD. This is less efficient, but is guaranteed not to jump when moving quickly.\n\nNote that static bodies (with zero mass) always use CCD, so your walls will not let a fast moving body pass through even if it is not a bullet.",
							"name": "setBullet",
							"variants": [
								{
									"arguments": [
										{
											"description": "The bullet status of the body.",
											"name": "status",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Set whether a body has fixed rotation.\n\nBodies with fixed rotation don't vary the speed at which they rotate. Calling this function causes the mass to be reset. ",
							"name": "setFixedRotation",
							"variants": [
								{
									"arguments": [
										{
											"description": "Whether the body should have fixed rotation.",
											"name": "isFixed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new gravity scale factor for the body.",
							"name": "setGravityScale",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new gravity scale factor.",
											"name": "scale",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the inertia of a body.",
							"name": "setInertia",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new moment of inertia, in kilograms * pixel squared.",
											"name": "inertia",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the linear damping of a Body\n\nSee Body:getLinearDamping for a definition of linear damping.\n\nLinear damping can take any value from 0 to infinity. It is recommended to stay between 0 and 0.1, though. Other values will make the objects look 'floaty'(if gravity is enabled).",
							"name": "setLinearDamping",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new linear damping",
											"name": "ld",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new linear velocity for the Body.\n\nThis function will not accumulate anything; any impulses previously applied since the last call to World:update will be lost.",
							"name": "setLinearVelocity",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the velocity vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the velocity vector.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new body mass.",
							"name": "setMass",
							"variants": [
								{
									"arguments": [
										{
											"description": "The mass, in kilograms.",
											"name": "mass",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Overrides the calculated mass data.",
							"name": "setMassData",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the center of mass.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position of the center of mass.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The mass of the body.",
											"name": "mass",
											"type": "number"
										},
										{
											"description": "The rotational inertia.",
											"name": "inertia",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the position of the body.\n\nNote that this may not be the center of mass of the body.\n\nThis function cannot wake up the body.",
							"name": "setPosition",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the sleeping behaviour of the body. Should sleeping be allowed, a body at rest will automatically sleep. A sleeping body is not simulated unless it collided with an awake body. Be wary that one can end up with a situation like a floating sleeping body if the floor was removed.",
							"name": "setSleepingAllowed",
							"variants": [
								{
									"arguments": [
										{
											"description": "True if the body is allowed to sleep or false if not.",
											"name": "allowed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Set the position and angle of the body.\n\nNote that the position may not be the center of mass of the body. An angle of 0 radians will mean 'looking to the right'. Although radians increase counter-clockwise, the y axis points down so it becomes clockwise from our point of view.\n\nThis function cannot wake up the body.",
							"name": "setTransform",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of the position.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of the position.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new body type.",
							"name": "setType",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new type.",
											"name": "type",
											"type": "BodyType"
										}
									]
								}
							]
						},
						{
							"description": "Associates a Lua value with the Body.\n\nTo delete the reference, explicitly pass nil.",
							"name": "setUserData",
							"variants": [
								{
									"arguments": [
										{
											"description": "The Lua value to associate with the Body.",
											"name": "value",
											"type": "any"
										}
									]
								}
							]
						},
						{
							"description": "Set the x position of the body.\n\nThis function cannot wake up the body. ",
							"name": "setX",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position.",
											"name": "x",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the y position of the body.\n\nThis function cannot wake up the body. ",
							"name": "setY",
							"variants": [
								{
									"arguments": [
										{
											"description": "The y position.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Body",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newChainShape"
					],
					"description": "A ChainShape consists of multiple line segments. It can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.\n\nUnlike the PolygonShape, the ChainShape does not have a vertices limit or has to form a convex shape, but self intersections are not supported.",
					"functions": [
						{
							"description": "Returns a child of the shape as an EdgeShape.",
							"name": "getChildEdge",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the child.",
											"name": "index",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The child as an EdgeShape.",
											"name": "shape",
											"type": "EdgeShape"
										}
									]
								}
							]
						},
						{
							"description": "Gets the vertex that establishes a connection to the next shape.\n\nSetting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "getNextVertex",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the vertex, or nil if ChainShape:setNextVertex hasn't been called.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex, or nil if ChainShape:setNextVertex hasn't been called.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns a point of the shape.",
							"name": "getPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The index of the point to return.",
											"name": "index",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x-coordinate of the point.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-coordinate of the point.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns all points of the shape.",
							"name": "getPoints",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-coordinate of the first point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y-coordinate of the first point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x-coordinate of the second point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y-coordinate of the second point.",
											"name": "y2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the vertex that establishes a connection to the previous shape.\n\nSetting next and previous ChainShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "getPreviousVertex",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the vertex, or nil if ChainShape:setPreviousVertex hasn't been called.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex, or nil if ChainShape:setPreviousVertex hasn't been called.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of vertices the shape has.",
							"name": "getVertexCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of vertices.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a vertex that establishes a connection to the next shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "setNextVertex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the vertex.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a vertex that establishes a connection to the previous shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "setPreviousVertex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the vertex.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "ChainShape",
					"supertypes": [
						"Shape",
						"Object"
					]
				},
				{
					"constructors": [
						"newCircleShape"
					],
					"description": "Circle extends Shape and adds a radius and a local position.",
					"functions": [
						{
							"description": "Gets the center point of the circle shape.",
							"name": "getPoint",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the center point of the circle.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the center point of the circle.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the radius of the circle shape.",
							"name": "getRadius",
							"variants": [
								{
									"returns": [
										{
											"description": "The radius of the circle",
											"name": "radius",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the location of the center of the circle shape.",
							"name": "setPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the new center point of the circle.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the new center point of the circle.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the radius of the circle.",
							"name": "setRadius",
							"variants": [
								{
									"arguments": [
										{
											"description": "The radius of the circle",
											"name": "radius",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "CircleShape",
					"supertypes": [
						"Shape",
						"Object"
					]
				},
				{
					"description": "Contacts are objects created to manage collisions in worlds.",
					"functions": [
						{
							"description": "Gets the child indices of the shapes of the two colliding fixtures. For ChainShapes, an index of 1 is the first edge in the chain.\nUsed together with Fixture:rayCast or ChainShape:getChildEdge.",
							"name": "getChildren",
							"variants": [
								{
									"returns": [
										{
											"description": "The child index of the first fixture's shape.",
											"name": "indexA",
											"type": "number"
										},
										{
											"description": "The child index of the second fixture's shape.",
											"name": "indexB",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the two Fixtures that hold the shapes that are in contact.",
							"name": "getFixtures",
							"variants": [
								{
									"returns": [
										{
											"description": "The first Fixture.",
											"name": "fixtureA",
											"type": "Fixture"
										},
										{
											"description": "The second Fixture.",
											"name": "fixtureB",
											"type": "Fixture"
										}
									]
								}
							]
						},
						{
							"description": "Get the friction between two shapes that are in contact.",
							"name": "getFriction",
							"variants": [
								{
									"returns": [
										{
											"description": "The friction of the contact.",
											"name": "friction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the normal vector between two shapes that are in contact.\n\nThis function returns the coordinates of a unit vector that points from the first shape to the second.",
							"name": "getNormal",
							"variants": [
								{
									"returns": [
										{
											"description": "The x component of the normal vector.",
											"name": "nx",
											"type": "number"
										},
										{
											"description": "The y component of the normal vector.",
											"name": "ny",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the contact points of the two colliding fixtures. There can be one or two points.",
							"name": "getPositions",
							"variants": [
								{
									"returns": [
										{
											"description": "The x coordinate of the first contact point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y coordinate of the first contact point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x coordinate of the second contact point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y coordinate of the second contact point.",
											"name": "y2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the restitution between two shapes that are in contact.",
							"name": "getRestitution",
							"variants": [
								{
									"returns": [
										{
											"description": "The restitution between the two shapes.",
											"name": "restitution",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the contact is enabled. The collision will be ignored if a contact gets disabled in the preSolve callback.",
							"name": "isEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false otherwise.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the two colliding fixtures are touching each other.",
							"name": "isTouching",
							"variants": [
								{
									"returns": [
										{
											"description": "True if they touch or false if not.",
											"name": "touching",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Resets the contact friction to the mixture value of both fixtures.",
							"name": "resetFriction",
							"variants": [
								[]
							]
						},
						{
							"description": "Resets the contact restitution to the mixture value of both fixtures.",
							"name": "resetRestitution",
							"variants": [
								[]
							]
						},
						{
							"description": "Enables or disables the contact.",
							"name": "setEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "True to enable or false to disable.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the contact friction.",
							"name": "setFriction",
							"variants": [
								{
									"arguments": [
										{
											"description": "The contact friction.",
											"name": "friction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the contact restitution.",
							"name": "setRestitution",
							"variants": [
								{
									"arguments": [
										{
											"description": "The contact restitution.",
											"name": "restitution",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Contact",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newDistanceJoint"
					],
					"description": "Keeps two bodies at the same distance.",
					"functions": [
						{
							"description": "Gets the damping ratio.",
							"name": "getDampingRatio",
							"variants": [
								{
									"returns": [
										{
											"description": "The damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the response speed.",
							"name": "getFrequency",
							"variants": [
								{
									"returns": [
										{
											"description": "The response speed.",
											"name": "Hz",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the equilibrium distance between the two Bodies.",
							"name": "getLength",
							"variants": [
								{
									"returns": [
										{
											"description": "The length between the two Bodies.",
											"name": "l",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the damping ratio.",
							"name": "setDampingRatio",
							"variants": [
								{
									"arguments": [
										{
											"description": "The damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the response speed.",
							"name": "setFrequency",
							"variants": [
								{
									"arguments": [
										{
											"description": "The response speed.",
											"name": "Hz",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the equilibrium distance between the two Bodies.",
							"name": "setLength",
							"variants": [
								{
									"arguments": [
										{
											"description": "The length between the two Bodies.",
											"name": "l",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "DistanceJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newEdgeShape"
					],
					"description": "A EdgeShape is a line segment. They can be used to create the boundaries of your terrain. The shape does not have volume and can only collide with PolygonShape and CircleShape.",
					"functions": [
						{
							"description": "Gets the vertex that establishes a connection to the next shape.\n\nSetting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "getNextVertex",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the vertex, or nil if EdgeShape:setNextVertex hasn't been called.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex, or nil if EdgeShape:setNextVertex hasn't been called.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the local coordinates of the edge points.",
							"name": "getPoints",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the first vertex.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y-component of the first vertex.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x-component of the second vertex.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y-component of the second vertex.",
											"name": "y2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the vertex that establishes a connection to the previous shape.\n\nSetting next and previous EdgeShape vertices can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "getPreviousVertex",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the vertex, or nil if EdgeShape:setPreviousVertex hasn't been called.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex, or nil if EdgeShape:setPreviousVertex hasn't been called.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a vertex that establishes a connection to the next shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "setNextVertex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the vertex.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a vertex that establishes a connection to the previous shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along the edge and moves over to the new shape.",
							"name": "setPreviousVertex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the vertex.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the vertex.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "EdgeShape",
					"supertypes": [
						"Shape",
						"Object"
					]
				},
				{
					"constructors": [
						"newFixture"
					],
					"description": "Fixtures attach shapes to bodies.",
					"functions": [
						{
							"description": "Destroys the fixture.",
							"name": "destroy",
							"variants": [
								[]
							]
						},
						{
							"description": "Returns the body to which the fixture is attached.",
							"name": "getBody",
							"variants": [
								{
									"returns": [
										{
											"description": "The parent body.",
											"name": "body",
											"type": "Body"
										}
									]
								}
							]
						},
						{
							"description": "Returns the points of the fixture bounding box. In case the fixture has multiple children a 1-based index can be specified. For example, a fixture will have multiple children with a chain shape.",
							"name": "getBoundingBox",
							"variants": [
								{
									"arguments": [
										{
											"default": "1",
											"description": "A bounding box of the fixture.",
											"name": "index",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x position of the top-left point.",
											"name": "topLeftX",
											"type": "number"
										},
										{
											"description": "The y position of the top-left point.",
											"name": "topLeftY",
											"type": "number"
										},
										{
											"description": "The x position of the bottom-right point.",
											"name": "bottomRightX",
											"type": "number"
										},
										{
											"description": "The y position of the bottom-right point.",
											"name": "bottomRightY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the categories the fixture belongs to.",
							"name": "getCategory",
							"variants": [
								{
									"returns": [
										{
											"description": "The categories.",
											"name": "...",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the density of the fixture.",
							"name": "getDensity",
							"variants": [
								{
									"returns": [
										{
											"description": "The fixture density in kilograms per square meter.",
											"name": "density",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the filter data of the fixture.\n\nCategories and masks are encoded as the bits of a 16-bit integer.",
							"name": "getFilterData",
							"variants": [
								{
									"returns": [
										{
											"description": "The categories as an integer from 0 to 65535.",
											"name": "categories",
											"type": "number"
										},
										{
											"description": "The mask as an integer from 0 to 65535.",
											"name": "mask",
											"type": "number"
										},
										{
											"description": "The group as an integer from -32768 to 32767.",
											"name": "group",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the friction of the fixture.",
							"name": "getFriction",
							"variants": [
								{
									"returns": [
										{
											"description": "The fixture friction.",
											"name": "friction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.\n\nThe groups range from -32768 to 32767.",
							"name": "getGroupIndex",
							"variants": [
								{
									"returns": [
										{
											"description": "The group of the fixture.",
											"name": "group",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns which categories this fixture should '''NOT''' collide with.",
							"name": "getMask",
							"variants": [
								{
									"returns": [
										{
											"description": "The masks.",
											"name": "...",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the mass, its center and the rotational inertia.",
							"name": "getMassData",
							"variants": [
								{
									"returns": [
										{
											"description": "The x position of the center of mass.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position of the center of mass.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The mass of the fixture.",
											"name": "mass",
											"type": "number"
										},
										{
											"description": "The rotational inertia.",
											"name": "inertia",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the restitution of the fixture.",
							"name": "getRestitution",
							"variants": [
								{
									"returns": [
										{
											"description": "The fixture restitution.",
											"name": "restitution",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the shape of the fixture. This shape is a reference to the actual data used in the simulation. It's possible to change its values between timesteps.",
							"name": "getShape",
							"variants": [
								{
									"returns": [
										{
											"description": "The fixture's shape.",
											"name": "shape",
											"type": "Shape"
										}
									]
								}
							]
						},
						{
							"description": "Returns the Lua value associated with this fixture.",
							"name": "getUserData",
							"variants": [
								{
									"returns": [
										{
											"description": "The Lua value associated with the fixture.",
											"name": "value",
											"type": "any"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Fixture is destroyed. Destroyed fixtures cannot be used.",
							"name": "isDestroyed",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Fixture is destroyed.",
											"name": "destroyed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the fixture is a sensor.",
							"name": "isSensor",
							"variants": [
								{
									"returns": [
										{
											"description": "If the fixture is a sensor.",
											"name": "sensor",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Casts a ray against the shape of the fixture and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned.\n\nThe ray starts on the first point of the input line and goes towards the second point of the line. The fifth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.\n\nThe childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.\n\nThe world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.\n\nhitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction",
							"name": "rayCast",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the input line starting point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y position of the input line starting point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x position of the input line end point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y position of the input line end point.",
											"name": "y2",
											"type": "number"
										},
										{
											"description": "Ray length parameter.",
											"name": "maxFraction",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The index of the child the ray gets cast against.",
											"name": "childIndex",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x component of the normal vector of the edge where the ray hit the shape.",
											"name": "xn",
											"type": "number"
										},
										{
											"description": "The y component of the normal vector of the edge where the ray hit the shape.",
											"name": "yn",
											"type": "number"
										},
										{
											"description": "The position on the input line where the intersection happened as a factor of the line length.",
											"name": "fraction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the categories the fixture belongs to. There can be up to 16 categories represented as a number from 1 to 16.\n\nAll fixture's default category is 1.",
							"name": "setCategory",
							"variants": [
								{
									"arguments": [
										{
											"description": "The categories.",
											"name": "...",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the density of the fixture. Call Body:resetMassData if this needs to take effect immediately.",
							"name": "setDensity",
							"variants": [
								{
									"arguments": [
										{
											"description": "The fixture density in kilograms per square meter.",
											"name": "density",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the filter data of the fixture.\n\nGroups, categories, and mask can be used to define the collision behaviour of the fixture.\n\nIf two fixtures are in the same group they either always collide if the group is positive, or never collide if it's negative. If the group is zero or they do not match, then the contact filter checks if the fixtures select a category of the other fixture with their masks. The fixtures do not collide if that's not the case. If they do have each other's categories selected, the return value of the custom contact filter will be used. They always collide if none was set.\n\nThere can be up to 16 categories. Categories and masks are encoded as the bits of a 16-bit integer.\n\nWhen created, prior to calling this function, all fixtures have category set to 1, mask set to 65535 (all categories) and group set to 0.\n\nThis function allows setting all filter data for a fixture at once. To set only the categories, the mask or the group, you can use Fixture:setCategory, Fixture:setMask or Fixture:setGroupIndex respectively.",
							"name": "setFilterData",
							"variants": [
								{
									"arguments": [
										{
											"description": "The categories as an integer from 0 to 65535.",
											"name": "categories",
											"type": "number"
										},
										{
											"description": "The mask as an integer from 0 to 65535.",
											"name": "mask",
											"type": "number"
										},
										{
											"description": "The group as an integer from -32768 to 32767.",
											"name": "group",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the friction of the fixture.\n\nFriction determines how shapes react when they 'slide' along other shapes. Low friction indicates a slippery surface, like ice, while high friction indicates a rough surface, like concrete. Range: 0.0 - 1.0.",
							"name": "setFriction",
							"variants": [
								{
									"arguments": [
										{
											"description": "The fixture friction.",
											"name": "friction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the group the fixture belongs to. Fixtures with the same group will always collide if the group is positive or never collide if it's negative. The group zero means no group.\n\nThe groups range from -32768 to 32767.",
							"name": "setGroupIndex",
							"variants": [
								{
									"arguments": [
										{
											"description": "The group as an integer from -32768 to 32767.",
											"name": "group",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the category mask of the fixture. There can be up to 16 categories represented as a number from 1 to 16.\n\nThis fixture will '''NOT''' collide with the fixtures that are in the selected categories if the other fixture also has a category of this fixture selected.",
							"name": "setMask",
							"variants": [
								{
									"arguments": [
										{
											"description": "The masks.",
											"name": "...",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the restitution of the fixture.",
							"name": "setRestitution",
							"variants": [
								{
									"arguments": [
										{
											"description": "The fixture restitution.",
											"name": "restitution",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets whether the fixture should act as a sensor.\n\nSensors do not cause collision responses, but the begin-contact and end-contact World callbacks will still be called for this fixture.",
							"name": "setSensor",
							"variants": [
								{
									"arguments": [
										{
											"description": "The sensor status.",
											"name": "sensor",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Associates a Lua value with the fixture.\n\nTo delete the reference, explicitly pass nil.",
							"name": "setUserData",
							"variants": [
								{
									"arguments": [
										{
											"description": "The Lua value to associate with the fixture.",
											"name": "value",
											"type": "any"
										}
									]
								}
							]
						},
						{
							"description": "Checks if a point is inside the shape of the fixture.",
							"name": "testPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the point.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y position of the point.",
											"name": "y",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "True if the point is inside or false if it is outside.",
											"name": "isInside",
											"type": "boolean"
										}
									]
								}
							]
						}
					],
					"name": "Fixture",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newFrictionJoint"
					],
					"description": "A FrictionJoint applies friction to a body.",
					"functions": [
						{
							"description": "Gets the maximum friction force in Newtons.",
							"name": "getMaxForce",
							"variants": [
								{
									"returns": [
										{
											"description": "Maximum force in Newtons.",
											"name": "force",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the maximum friction torque in Newton-meters.",
							"name": "getMaxTorque",
							"variants": [
								{
									"returns": [
										{
											"description": "Maximum torque in Newton-meters.",
											"name": "torque",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the maximum friction force in Newtons.",
							"name": "setMaxForce",
							"variants": [
								{
									"arguments": [
										{
											"description": "Max force in Newtons.",
											"name": "maxForce",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the maximum friction torque in Newton-meters.",
							"name": "setMaxTorque",
							"variants": [
								{
									"arguments": [
										{
											"description": "Maximum torque in Newton-meters.",
											"name": "torque",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "FrictionJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newGearJoint"
					],
					"description": "Keeps bodies together in such a way that they act like gears.",
					"functions": [
						{
							"description": "Get the Joints connected by this GearJoint.",
							"name": "getJoints",
							"variants": [
								{
									"returns": [
										{
											"description": "The first connected Joint.",
											"name": "joint1",
											"type": "Joint"
										},
										{
											"description": "The second connected Joint.",
											"name": "joint2",
											"type": "Joint"
										}
									]
								}
							]
						},
						{
							"description": "Get the ratio of a gear joint.",
							"name": "getRatio",
							"variants": [
								{
									"returns": [
										{
											"description": "The ratio of the joint.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the ratio of a gear joint.",
							"name": "setRatio",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new ratio of the joint.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "GearJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"description": "Attach multiple bodies together to interact in unique ways.",
					"functions": [
						{
							"description": "Explicitly destroys the Joint. An error will occur if you attempt to use the object after calling this function.\n\nIn 0.7.2, when you don't have time to wait for garbage collection, this function \n\nmay be used to free the object immediately.",
							"name": "destroy",
							"variants": [
								[]
							]
						},
						{
							"description": "Get the anchor points of the joint.",
							"name": "getAnchors",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the anchor on Body 1.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y-component of the anchor on Body 1.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x-component of the anchor on Body 2.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y-component of the anchor on Body 2.",
											"name": "y2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the bodies that the Joint is attached to.",
							"name": "getBodies",
							"variants": [
								{
									"returns": [
										{
											"description": "The first Body.",
											"name": "bodyA",
											"type": "Body"
										},
										{
											"description": "The second Body.",
											"name": "bodyB",
											"type": "Body"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the connected Bodies collide.",
							"name": "getCollideConnected",
							"variants": [
								{
									"returns": [
										{
											"description": "True if they collide, false otherwise.",
											"name": "c",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns the reaction force in newtons on the second body",
							"name": "getReactionForce",
							"variants": [
								{
									"arguments": [
										{
											"description": "How long the force applies. Usually the inverse time step or 1/dt.",
											"name": "x",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x-component of the force.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the force.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the reaction torque on the second body.",
							"name": "getReactionTorque",
							"variants": [
								{
									"arguments": [
										{
											"description": "How long the force applies. Usually the inverse time step or 1/dt.",
											"name": "invdt",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The reaction torque on the second body.",
											"name": "torque",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets a string representing the type.",
							"name": "getType",
							"variants": [
								{
									"returns": [
										{
											"description": "A string with the name of the Joint type.",
											"name": "type",
											"type": "JointType"
										}
									]
								}
							]
						},
						{
							"description": "Returns the Lua value associated with this Joint.",
							"name": "getUserData",
							"variants": [
								{
									"returns": [
										{
											"description": "The Lua value associated with the Joint.",
											"name": "value",
											"type": "any"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the Joint is destroyed. Destroyed joints cannot be used.",
							"name": "isDestroyed",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the Joint is destroyed.",
											"name": "destroyed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Associates a Lua value with the Joint.\n\nTo delete the reference, explicitly pass nil.",
							"name": "setUserData",
							"variants": [
								{
									"arguments": [
										{
											"description": "The Lua value to associate with the Joint.",
											"name": "value",
											"type": "any"
										}
									]
								}
							]
						}
					],
					"name": "Joint",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newMotorJoint"
					],
					"description": "Controls the relative motion between two Bodies. Position and rotation offsets can be specified, as well as the maximum motor force and torque that will be applied to reach the target offsets.",
					"functions": [
						{
							"description": "Gets the target angular offset between the two Bodies the Joint is attached to.",
							"name": "getAngularOffset",
							"variants": [
								{
									"returns": [
										{
											"description": "The target angular offset in radians: the second body's angle minus the first body's angle.",
											"name": "angleoffset",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the target linear offset between the two Bodies the Joint is attached to.",
							"name": "getLinearOffset",
							"variants": [
								{
									"returns": [
										{
											"description": "The x component of the target linear offset, relative to the first Body.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of the target linear offset, relative to the first Body.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the target angluar offset between the two Bodies the Joint is attached to.",
							"name": "setAngularOffset",
							"variants": [
								{
									"arguments": [
										{
											"description": "The target angular offset in radians: the second body's angle minus the first body's angle.",
											"name": "angleoffset",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the target linear offset between the two Bodies the Joint is attached to.",
							"name": "setLinearOffset",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of the target linear offset, relative to the first Body.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of the target linear offset, relative to the first Body.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "MotorJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newMouseJoint"
					],
					"description": "For controlling objects with the mouse.",
					"functions": [
						{
							"description": "Returns the damping ratio.",
							"name": "getDampingRatio",
							"variants": [
								{
									"returns": [
										{
											"description": "The new damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the frequency.",
							"name": "getFrequency",
							"variants": [
								{
									"returns": [
										{
											"description": "The frequency in hertz.",
											"name": "freq",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the highest allowed force.",
							"name": "getMaxForce",
							"variants": [
								{
									"returns": [
										{
											"description": "The max allowed force.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the target point.",
							"name": "getTarget",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the target.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The x-component of the target.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new damping ratio.",
							"name": "setDampingRatio",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new frequency.",
							"name": "setFrequency",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new frequency in hertz.",
											"name": "freq",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the highest allowed force.",
							"name": "setMaxForce",
							"variants": [
								{
									"arguments": [
										{
											"description": "The max allowed force.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the target point.",
							"name": "setTarget",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x-component of the target.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the target.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "MouseJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newPolygonShape",
						"newRectangleShape"
					],
					"description": "A PolygonShape is a convex polygon with up to 8 vertices.",
					"functions": [
						{
							"description": "Get the local coordinates of the polygon's vertices.\n\nThis function has a variable number of return values. It can be used in a nested fashion with love.graphics.polygon.",
							"name": "getPoints",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-component of the first vertex.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y-component of the first vertex.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x-component of the second vertex.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y-component of the second vertex.",
											"name": "y2",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "PolygonShape",
					"supertypes": [
						"Shape",
						"Object"
					]
				},
				{
					"constructors": [
						"newPrismaticJoint"
					],
					"description": "Restricts relative motion between Bodies to one shared axis.",
					"functions": [
						{
							"description": "Checks whether the limits are enabled.",
							"name": "areLimitsEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false otherwise.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets the world-space axis vector of the Prismatic Joint.",
							"name": "getAxis",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-axis coordinate of the world-space axis vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-axis coordinate of the world-space axis vector.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the current joint angle speed.",
							"name": "getJointSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "Joint angle speed in meters/second.",
											"name": "s",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the current joint translation.",
							"name": "getJointTranslation",
							"variants": [
								{
									"returns": [
										{
											"description": "Joint translation, usually in meters..",
											"name": "t",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the joint limits.",
							"name": "getLimits",
							"variants": [
								{
									"returns": [
										{
											"description": "The lower limit, usually in meters.",
											"name": "lower",
											"type": "number"
										},
										{
											"description": "The upper limit, usually in meters.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the lower limit.",
							"name": "getLowerLimit",
							"variants": [
								{
									"returns": [
										{
											"description": "The lower limit, usually in meters.",
											"name": "lower",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the maximum motor force.",
							"name": "getMaxMotorForce",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum motor force, usually in N.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the current motor force.",
							"name": "getMotorForce",
							"variants": [
								{
									"arguments": [
										{
											"description": "How long the force applies. Usually the inverse time step or 1/dt.",
											"name": "invdt",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The force on the motor in newtons.",
											"name": "force",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the motor speed.",
							"name": "getMotorSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "The motor speed, usually in meters per second.",
											"name": "s",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the reference angle.",
							"name": "getReferenceAngle",
							"variants": [
								{
									"returns": [
										{
											"description": "The reference angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the upper limit.",
							"name": "getUpperLimit",
							"variants": [
								{
									"returns": [
										{
											"description": "The upper limit, usually in meters.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether the motor is enabled.",
							"name": "isMotorEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false if disabled.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the limits.",
							"name": "setLimits",
							"variants": [
								{
									"arguments": [
										{
											"description": "The lower limit, usually in meters.",
											"name": "lower",
											"type": "number"
										},
										{
											"description": "The upper limit, usually in meters.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Enables/disables the joint limit.",
							"name": "setLimitsEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false if disabled.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the lower limit.",
							"name": "setLowerLimit",
							"variants": [
								{
									"arguments": [
										{
											"description": "The lower limit, usually in meters.",
											"name": "lower",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the maximum motor force.",
							"name": "setMaxMotorForce",
							"variants": [
								{
									"arguments": [
										{
											"description": "The maximum motor force, usually in N.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Enables/disables the joint motor.",
							"name": "setMotorEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "True to enable, false to disable.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the motor speed.",
							"name": "setMotorSpeed",
							"variants": [
								{
									"arguments": [
										{
											"description": "The motor speed, usually in meters per second.",
											"name": "s",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the upper limit.",
							"name": "setUpperLimit",
							"variants": [
								{
									"arguments": [
										{
											"description": "The upper limit, usually in meters.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "PrismaticJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newPulleyJoint"
					],
					"description": "Allows you to simulate bodies connected through pulleys.",
					"functions": [
						{
							"description": "Get the total length of the rope.",
							"name": "getConstant",
							"variants": [
								{
									"returns": [
										{
											"description": "The length of the rope in the joint.",
											"name": "length",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the ground anchor positions in world coordinates.",
							"name": "getGroundAnchors",
							"variants": [
								{
									"returns": [
										{
											"description": "The x coordinate of the first anchor.",
											"name": "a1x",
											"type": "number"
										},
										{
											"description": "The y coordinate of the first anchor.",
											"name": "a1y",
											"type": "number"
										},
										{
											"description": "The x coordinate of the second anchor.",
											"name": "a2x",
											"type": "number"
										},
										{
											"description": "The y coordinate of the second anchor.",
											"name": "a2y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the current length of the rope segment attached to the first body.",
							"name": "getLengthA",
							"variants": [
								{
									"returns": [
										{
											"description": "The length of the rope segment.",
											"name": "length",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the current length of the rope segment attached to the second body.",
							"name": "getLengthB",
							"variants": [
								{
									"returns": [
										{
											"description": "The length of the rope segment.",
											"name": "length",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the maximum lengths of the rope segments.",
							"name": "getMaxLengths",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum length of the first rope segment.",
											"name": "len1",
											"type": "number"
										},
										{
											"description": "The maximum length of the second rope segment.",
											"name": "len2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the pulley ratio.",
							"name": "getRatio",
							"variants": [
								{
									"returns": [
										{
											"description": "The pulley ratio of the joint.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the total length of the rope.\n\nSetting a new length for the rope updates the maximum length values of the joint.",
							"name": "setConstant",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new length of the rope in the joint.",
											"name": "length",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the maximum lengths of the rope segments.\n\nThe physics module also imposes maximum values for the rope segments. If the parameters exceed these values, the maximum values are set instead of the requested values.",
							"name": "setMaxLengths",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new maximum length of the first segment.",
											"name": "max1",
											"type": "number"
										},
										{
											"description": "The new maximum length of the second segment.",
											"name": "max2",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the pulley ratio.",
							"name": "setRatio",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new pulley ratio of the joint.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "PulleyJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newRevoluteJoint"
					],
					"description": "Allow two Bodies to revolve around a shared point.",
					"functions": [
						{
							"description": "Checks whether limits are enabled.",
							"name": "areLimitsEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false otherwise.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Get the current joint angle.",
							"name": "getJointAngle",
							"variants": [
								{
									"returns": [
										{
											"description": "The joint angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the current joint angle speed.",
							"name": "getJointSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "Joint angle speed in radians/second.",
											"name": "s",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the joint limits.",
							"name": "getLimits",
							"variants": [
								{
									"returns": [
										{
											"description": "The lower limit, in radians.",
											"name": "lower",
											"type": "number"
										},
										{
											"description": "The upper limit, in radians.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the lower limit.",
							"name": "getLowerLimit",
							"variants": [
								{
									"returns": [
										{
											"description": "The lower limit, in radians.",
											"name": "lower",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the maximum motor force.",
							"name": "getMaxMotorTorque",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum motor force, in Nm.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the motor speed.",
							"name": "getMotorSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "The motor speed, radians per second.",
											"name": "s",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Get the current motor force.",
							"name": "getMotorTorque",
							"variants": [
								{
									"returns": [
										{
											"description": "The current motor force, in Nm.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the reference angle.",
							"name": "getReferenceAngle",
							"variants": [
								{
									"returns": [
										{
											"description": "The reference angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the upper limit.",
							"name": "getUpperLimit",
							"variants": [
								{
									"returns": [
										{
											"description": "The upper limit, in radians.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether limits are enabled.",
							"name": "hasLimitsEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false otherwise.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Checks whether the motor is enabled.",
							"name": "isMotorEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "True if enabled, false if disabled.",
											"name": "enabled",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the limits.",
							"name": "setLimits",
							"variants": [
								{
									"arguments": [
										{
											"description": "The lower limit, in radians.",
											"name": "lower",
											"type": "number"
										},
										{
											"description": "The upper limit, in radians.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Enables/disables the joint limit.",
							"name": "setLimitsEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "True to enable, false to disable.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the lower limit.",
							"name": "setLowerLimit",
							"variants": [
								{
									"arguments": [
										{
											"description": "The lower limit, in radians.",
											"name": "lower",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Set the maximum motor force.",
							"name": "setMaxMotorTorque",
							"variants": [
								{
									"arguments": [
										{
											"description": "The maximum motor force, in Nm.",
											"name": "f",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Enables/disables the joint motor.",
							"name": "setMotorEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "True to enable, false to disable.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets the motor speed.",
							"name": "setMotorSpeed",
							"variants": [
								{
									"arguments": [
										{
											"description": "The motor speed, radians per second.",
											"name": "s",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the upper limit.",
							"name": "setUpperLimit",
							"variants": [
								{
									"arguments": [
										{
											"description": "The upper limit, in radians.",
											"name": "upper",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "RevoluteJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newRopeJoint"
					],
					"description": "The RopeJoint enforces a maximum distance between two points on two bodies. It has no other effect.",
					"functions": [
						{
							"description": "Gets the maximum length of a RopeJoint.",
							"name": "getMaxLength",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum length of the RopeJoint.",
											"name": "maxLength",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the maximum length of a RopeJoint.",
							"name": "setMaxLength",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new maximum length of the RopeJoint.",
											"name": "maxLength",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "RopeJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"description": "Shapes are solid 2d geometrical objects which handle the mass and collision of a Body in love.physics.\n\nShapes are attached to a Body via a Fixture. The Shape object is copied when this happens. \n\nThe Shape's position is relative to the position of the Body it has been attached to.",
					"functions": [
						{
							"description": "Returns the points of the bounding box for the transformed shape.",
							"name": "computeAABB",
							"variants": [
								{
									"arguments": [
										{
											"description": "The translation of the shape on the x-axis.",
											"name": "tx",
											"type": "number"
										},
										{
											"description": "The translation of the shape on the y-axis.",
											"name": "ty",
											"type": "number"
										},
										{
											"description": "The shape rotation.",
											"name": "tr",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The index of the child to compute the bounding box of.",
											"name": "childIndex",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x position of the top-left point.",
											"name": "topLeftX",
											"type": "number"
										},
										{
											"description": "The y position of the top-left point.",
											"name": "topLeftY",
											"type": "number"
										},
										{
											"description": "The x position of the bottom-right point.",
											"name": "bottomRightX",
											"type": "number"
										},
										{
											"description": "The y position of the bottom-right point.",
											"name": "bottomRightY",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Computes the mass properties for the shape with the specified density.",
							"name": "computeMass",
							"variants": [
								{
									"arguments": [
										{
											"description": "The shape density.",
											"name": "density",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x postition of the center of mass.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y postition of the center of mass.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "The mass of the shape.",
											"name": "mass",
											"type": "number"
										},
										{
											"description": "The rotational inertia.",
											"name": "inertia",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of children the shape has.",
							"name": "getChildCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of children.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the radius of the shape.",
							"name": "getRadius",
							"variants": [
								{
									"returns": [
										{
											"description": "The radius of the shape.",
											"name": "radius",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets a string representing the Shape.\n\nThis function can be useful for conditional debug drawing.",
							"name": "getType",
							"variants": [
								{
									"returns": [
										{
											"description": "The type of the Shape.",
											"name": "type",
											"type": "ShapeType"
										}
									]
								}
							]
						},
						{
							"description": "Casts a ray against the shape and returns the surface normal vector and the line position where the ray hit. If the ray missed the shape, nil will be returned. The Shape can be transformed to get it into the desired position.\n\nThe ray starts on the first point of the input line and goes towards the second point of the line. The fourth argument is the maximum distance the ray is going to travel as a scale factor of the input line length.\n\nThe childIndex parameter is used to specify which child of a parent shape, such as a ChainShape, will be ray casted. For ChainShapes, the index of 1 is the first edge on the chain. Ray casting a parent shape will only test the child specified so if you want to test every shape of the parent, you must loop through all of its children.\n\nThe world position of the impact can be calculated by multiplying the line vector with the third return value and adding it to the line starting point.\n\nhitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction",
							"name": "rayCast",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the input line starting point.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The y position of the input line starting point.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x position of the input line end point.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The y position of the input line end point.",
											"name": "y2",
											"type": "number"
										},
										{
											"description": "Ray length parameter.",
											"name": "maxFraction",
											"type": "number"
										},
										{
											"description": "The translation of the shape on the x-axis.",
											"name": "tx",
											"type": "number"
										},
										{
											"description": "The translation of the shape on the y-axis.",
											"name": "ty",
											"type": "number"
										},
										{
											"description": "The shape rotation.",
											"name": "tr",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The index of the child the ray gets cast against.",
											"name": "childIndex",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The x component of the normal vector of the edge where the ray hit the shape.",
											"name": "xn",
											"type": "number"
										},
										{
											"description": "The y component of the normal vector of the edge where the ray hit the shape.",
											"name": "yn",
											"type": "number"
										},
										{
											"description": "The position on the input line where the intersection happened as a factor of the line length.",
											"name": "fraction",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "This is particularly useful for mouse interaction with the shapes. By looping through all shapes and testing the mouse position with this function, we can find which shapes the mouse touches.",
							"name": "testPoint",
							"variants": [
								{
									"arguments": [
										{
											"description": "Translates the shape along the x-axis.",
											"name": "tx",
											"type": "number"
										},
										{
											"description": "Translates the shape along the y-axis.",
											"name": "ty",
											"type": "number"
										},
										{
											"description": "Rotates the shape.",
											"name": "tr",
											"type": "number"
										},
										{
											"description": "The x-component of the point.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-component of the point.",
											"name": "y",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "True if inside, false if outside",
											"name": "hit",
											"type": "boolean"
										}
									]
								}
							]
						}
					],
					"name": "Shape",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newWeldJoint"
					],
					"description": "A WeldJoint essentially glues two bodies together.",
					"functions": [
						{
							"description": "Returns the damping ratio of the joint.",
							"name": "getDampingRatio",
							"variants": [
								{
									"returns": [
										{
											"description": "The damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the frequency.",
							"name": "getFrequency",
							"variants": [
								{
									"returns": [
										{
											"description": "The frequency in hertz.",
											"name": "freq",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the reference angle.",
							"name": "getReferenceAngle",
							"variants": [
								{
									"returns": [
										{
											"description": "The reference angle in radians.",
											"name": "angle",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new damping ratio.",
							"name": "setDampingRatio",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new frequency.",
							"name": "setFrequency",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new frequency in hertz.",
											"name": "freq",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "WeldJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newWheelJoint"
					],
					"description": "Restricts a point on the second body to a line on the first body.",
					"functions": [
						{
							"description": "Gets the world-space axis vector of the Wheel Joint.",
							"name": "getAxis",
							"variants": [
								{
									"returns": [
										{
											"description": "The x-axis coordinate of the world-space axis vector.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-axis coordinate of the world-space axis vector.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the current joint translation speed.",
							"name": "getJointSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "The translation speed of the joint in meters per second.",
											"name": "speed",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the current joint translation.",
							"name": "getJointTranslation",
							"variants": [
								{
									"returns": [
										{
											"description": "The translation of the joint in meters.",
											"name": "position",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the maximum motor torque.",
							"name": "getMaxMotorTorque",
							"variants": [
								{
									"returns": [
										{
											"description": "The maximum torque of the joint motor in newton meters.",
											"name": "maxTorque",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the speed of the motor.",
							"name": "getMotorSpeed",
							"variants": [
								{
									"returns": [
										{
											"description": "The speed of the joint motor in radians per second.",
											"name": "speed",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the current torque on the motor.",
							"name": "getMotorTorque",
							"variants": [
								{
									"arguments": [
										{
											"description": "How long the force applies. Usually the inverse time step or 1/dt.",
											"name": "invdt",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The torque on the motor in newton meters.",
											"name": "torque",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the damping ratio.",
							"name": "getSpringDampingRatio",
							"variants": [
								{
									"returns": [
										{
											"description": "The damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the spring frequency.",
							"name": "getSpringFrequency",
							"variants": [
								{
									"returns": [
										{
											"description": "The frequency in hertz.",
											"name": "freq",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Checks if the joint motor is running.",
							"name": "isMotorEnabled",
							"variants": [
								{
									"returns": [
										{
											"description": "The status of the joint motor.",
											"name": "on",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new maximum motor torque.",
							"name": "setMaxMotorTorque",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new maximum torque for the joint motor in newton meters.",
											"name": "maxTorque",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Starts and stops the joint motor.",
							"name": "setMotorEnabled",
							"variants": [
								{
									"arguments": [
										{
											"description": "True turns the motor on and false turns it off.",
											"name": "enable",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new speed for the motor.",
							"name": "setMotorSpeed",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new speed for the joint motor in radians per second.",
											"name": "speed",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new damping ratio.",
							"name": "setSpringDampingRatio",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new damping ratio.",
											"name": "ratio",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets a new spring frequency.",
							"name": "setSpringFrequency",
							"variants": [
								{
									"arguments": [
										{
											"description": "The new frequency in hertz.",
											"name": "freq",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "WheelJoint",
					"supertypes": [
						"Joint",
						"Object"
					]
				},
				{
					"constructors": [
						"newWorld"
					],
					"description": "A world is an object that contains all bodies and joints.",
					"functions": [
						{
							"description": "Destroys the world, taking all bodies, joints, fixtures and their shapes with it. \n\nAn error will occur if you attempt to use any of the destroyed objects after calling this function.",
							"name": "destroy",
							"variants": [
								[]
							]
						},
						{
							"description": "Returns a table with all bodies.",
							"name": "getBodies",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Body",
											"description": "A sequence with all bodies.",
											"name": "bodies",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of bodies in the world.",
							"name": "getBodyCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of bodies in the world.",
											"name": "n",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns functions for the callbacks during the world update.",
							"name": "getCallbacks",
							"variants": [
								{
									"returns": [
										{
											"description": "Gets called when two fixtures begin to overlap.",
											"name": "beginContact",
											"type": "function"
										},
										{
											"description": "Gets called when two fixtures cease to overlap.",
											"name": "endContact",
											"type": "function"
										},
										{
											"description": "Gets called before a collision gets resolved.",
											"name": "preSolve",
											"type": "function"
										},
										{
											"description": "Gets called after the collision has been resolved.",
											"name": "postSolve",
											"type": "function"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of contacts in the world.",
							"name": "getContactCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of contacts in the world.",
											"name": "n",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the function for collision filtering.",
							"name": "getContactFilter",
							"variants": [
								{
									"returns": [
										{
											"description": "The function that handles the contact filtering.",
											"name": "contactFilter",
											"type": "function"
										}
									]
								}
							]
						},
						{
							"description": "Returns a table with all Contacts.",
							"name": "getContacts",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Contact",
											"description": "A sequence with all Contacts.",
											"name": "contacts",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Get the gravity of the world.",
							"name": "getGravity",
							"variants": [
								{
									"returns": [
										{
											"description": "The x component of gravity.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of gravity.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of joints in the world.",
							"name": "getJointCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of joints in the world.",
											"name": "n",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns a table with all joints.",
							"name": "getJoints",
							"variants": [
								{
									"returns": [
										{
											"arraytype": "Joint",
											"description": "A sequence with all joints.",
											"name": "joints",
											"type": "table"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the World is destroyed. Destroyed worlds cannot be used.",
							"name": "isDestroyed",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the World is destroyed.",
											"name": "destroyed",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Returns if the world is updating its state.\n\nThis will return true inside the callbacks from World:setCallbacks.",
							"name": "isLocked",
							"variants": [
								{
									"returns": [
										{
											"description": "Will be true if the world is in the process of updating its state.",
											"name": "locked",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Gets the sleep behaviour of the world.",
							"name": "isSleepingAllowed",
							"variants": [
								{
									"returns": [
										{
											"description": "True if bodies in the world are allowed to sleep, or false if not.",
											"name": "allow",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Calls a function for each fixture inside the specified area by searching for any overlapping bounding box (Fixture:getBoundingBox).",
							"name": "queryBoundingBox",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the top-left point.",
											"name": "topLeftX",
											"type": "number"
										},
										{
											"description": "The y position of the top-left point.",
											"name": "topLeftY",
											"type": "number"
										},
										{
											"description": "The x position of the bottom-right point.",
											"name": "bottomRightX",
											"type": "number"
										},
										{
											"description": "The y position of the bottom-right point.",
											"name": "bottomRightY",
											"type": "number"
										},
										{
											"description": "This function gets passed one argument, the fixture, and should return a boolean. The search will continue if it is true or stop if it is false.",
											"name": "callback",
											"type": "function"
										}
									]
								}
							]
						},
						{
							"description": "Casts a ray and calls a function for each fixtures it intersects. ",
							"name": "rayCast",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x position of the starting point of the ray.",
											"name": "x1",
											"type": "number"
										},
										{
											"description": "The x position of the starting point of the ray.",
											"name": "y1",
											"type": "number"
										},
										{
											"description": "The x position of the end point of the ray.",
											"name": "x2",
											"type": "number"
										},
										{
											"description": "The x value of the surface normal vector of the shape edge.",
											"name": "y2",
											"type": "number"
										},
										{
											"description": "A function called for each fixture intersected by the ray. The function gets six arguments and should return a number as a control value. The intersection points fed into the function will be in an arbitrary order. If you wish to find the closest point of intersection, you'll need to do that yourself within the function. The easiest way to do that is by using the fraction value.",
											"name": "callback",
											"type": "function"
										}
									],
									"description": "There is a bug in LÖVE 0.8.0 where the normal vector passed to the callback function gets scaled by love.physics.getMeter."
								}
							]
						},
						{
							"description": "Sets functions for the collision callbacks during the world update.\n\nFour Lua functions can be given as arguments. The value nil removes a function.\n\nWhen called, each function will be passed three arguments. The first two arguments are the colliding fixtures and the third argument is the Contact between them. The postSolve callback additionally gets the normal and tangent impulse for each contact point. See notes.\n\nIf you are interested to know when exactly each callback is called, consult a Box2d manual",
							"name": "setCallbacks",
							"variants": [
								{
									"arguments": [
										{
											"description": "Gets called when two fixtures begin to overlap.",
											"name": "beginContact",
											"type": "function"
										},
										{
											"description": "Gets called when two fixtures cease to overlap. This will also be called outside of a world update, when colliding objects are destroyed.",
											"name": "endContact",
											"type": "function"
										},
										{
											"default": "nil",
											"description": "Gets called before a collision gets resolved.",
											"name": "preSolve",
											"type": "function"
										},
										{
											"default": "nil",
											"description": "Gets called after the collision has been resolved.",
											"name": "postSolve",
											"type": "function"
										}
									]
								}
							]
						},
						{
							"description": "Sets a function for collision filtering.\n\nIf the group and category filtering doesn't generate a collision decision, this function gets called with the two fixtures as arguments. The function should return a boolean value where true means the fixtures will collide and false means they will pass through each other.",
							"name": "setContactFilter",
							"variants": [
								{
									"arguments": [
										{
											"description": "The function handling the contact filtering.",
											"name": "filter",
											"type": "function"
										}
									]
								}
							]
						},
						{
							"description": "Set the gravity of the world.",
							"name": "setGravity",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of gravity.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of gravity.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the sleep behaviour of the world.",
							"name": "setSleepingAllowed",
							"variants": [
								{
									"arguments": [
										{
											"description": "True if bodies in the world are allowed to sleep, or false if not.",
											"name": "allow",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Translates the World's origin. Useful in large worlds where floating point precision issues become noticeable at far distances from the origin.",
							"name": "translateOrigin",
							"variants": [
								{
									"arguments": [
										{
											"description": "The x component of the new origin with respect to the old origin.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y component of the new origin with respect to the old origin.",
											"name": "y",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Update the state of the world.",
							"name": "update",
							"variants": [
								{
									"arguments": [
										{
											"description": "The time (in seconds) to advance the physics simulation.",
											"name": "dt",
											"type": "number"
										},
										{
											"default": "8",
											"description": "The maximum number of steps used to determine the new velocities when resolving a collision.",
											"name": "velocityiterations",
											"type": "number"
										},
										{
											"default": "3",
											"description": "The maximum number of steps used to determine the new positions when resolving a collision.",
											"name": "positioniterations",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "World",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "This module is responsible for decoding sound files. It can't play the sounds, see love.audio for that.",
			"enums": [],
			"functions": [
				{
					"description": "Attempts to find a decoder for the encoded sound data in the specified file.",
					"name": "newDecoder",
					"variants": [
						{
							"arguments": [
								{
									"description": "The file with encoded sound data.",
									"name": "file",
									"type": "File"
								},
								{
									"default": "2048",
									"description": "The size of each decoded chunk, in bytes.",
									"name": "buffer",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new Decoder object.",
									"name": "decoder",
									"type": "Decoder"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The filename of the file with encoded sound data.",
									"name": "filename",
									"type": "string"
								},
								{
									"default": "2048",
									"description": "The size of each decoded chunk, in bytes.",
									"name": "buffer",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new Decoder object.",
									"name": "decoder",
									"type": "Decoder"
								}
							]
						}
					]
				},
				{
					"description": "Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.\n\nThe sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.",
					"name": "newSoundData",
					"variants": [
						{
							"arguments": [
								{
									"description": "The file name of the file to load.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A new SoundData object.",
									"name": "soundData",
									"type": "SoundData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A File pointing to an audio file.",
									"name": "file",
									"type": "File"
								}
							],
							"returns": [
								{
									"description": "A new SoundData object.",
									"name": "soundData",
									"type": "SoundData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Decode data from this Decoder until EOF.",
									"name": "decoder",
									"type": "Decoder"
								}
							],
							"returns": [
								{
									"description": "A new SoundData object.",
									"name": "soundData",
									"type": "SoundData"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Total number of samples.",
									"name": "samples",
									"type": "number"
								},
								{
									"default": "44100",
									"description": "Number of samples per second",
									"name": "rate",
									"type": "number"
								},
								{
									"default": "16",
									"description": "Bits per sample (8 or 16).",
									"name": "bits",
									"type": "number"
								},
								{
									"default": "2",
									"description": "Either 1 for mono or 2 for stereo.",
									"name": "channels",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A new SoundData object.",
									"name": "soundData",
									"type": "SoundData"
								}
							]
						}
					]
				}
			],
			"name": "sound",
			"types": [
				{
					"constructors": [
						"newDecoder"
					],
					"description": "An object which can gradually decode a sound file.",
					"functions": [
						{
							"description": "Creates a new copy of current decoder.\n\nThe new decoder will start decoding from the beginning of the audio stream.",
							"name": "clone",
							"variants": [
								{
									"returns": [
										{
											"description": "New copy of the decoder.",
											"name": "decoder",
											"type": "Decoder"
										}
									]
								}
							]
						},
						{
							"description": "Decodes the audio and returns a SoundData object containing the decoded audio data.",
							"name": "decode",
							"variants": [
								{
									"returns": [
										{
											"description": "Decoded audio data.",
											"name": "soundData",
											"type": "SoundData"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of bits per sample.",
							"name": "getBitDepth",
							"variants": [
								{
									"returns": [
										{
											"description": "Either 8, or 16.",
											"name": "bitDepth",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of channels in the stream.",
							"name": "getChannelCount",
							"variants": [
								{
									"returns": [
										{
											"description": "1 for mono, 2 for stereo.",
											"name": "channels",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the duration of the sound file. It may not always be sample-accurate, and it may return -1 if the duration cannot be determined at all.",
							"name": "getDuration",
							"variants": [
								{
									"returns": [
										{
											"description": "The duration of the sound file in seconds, or -1 if it cannot be determined.",
											"name": "duration",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the sample rate of the Decoder.",
							"name": "getSampleRate",
							"variants": [
								{
									"returns": [
										{
											"description": "Number of samples per second.",
											"name": "rate",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the currently playing position of the Decoder.",
							"name": "seek",
							"variants": [
								{
									"arguments": [
										{
											"description": "The position to seek to, in seconds.",
											"name": "offset",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "Decoder",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newSoundData"
					],
					"description": "Contains raw audio samples.\n\nYou can not play SoundData back directly. You must wrap a Source object around it.",
					"functions": [
						{
							"description": "Returns the number of bits per sample.",
							"name": "getBitDepth",
							"variants": [
								{
									"returns": [
										{
											"description": "Either 8, or 16.",
											"name": "bitdepth",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of channels in the SoundData.",
							"name": "getChannelCount",
							"variants": [
								{
									"returns": [
										{
											"description": "1 for mono, 2 for stereo.",
											"name": "channels",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the duration of the sound data.",
							"name": "getDuration",
							"variants": [
								{
									"returns": [
										{
											"description": "The duration of the sound data in seconds.",
											"name": "duration",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.",
							"name": "getSample",
							"variants": [
								{
									"arguments": [
										{
											"description": "An integer value specifying the position of the sample (starting at 0).",
											"name": "i",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The normalized samplepoint (range -1.0 to 1.0).",
											"name": "sample",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "An integer value specifying the position of the sample (starting at 0).",
											"name": "i",
											"type": "number"
										},
										{
											"description": "The index of the channel to get within the given sample.",
											"name": "channel",
											"type": "number"
										}
									],
									"description": "Gets the value of a sample using an explicit sample index instead of interleaving them in the sample position parameter.",
									"returns": [
										{
											"description": "The normalized samplepoint (range -1.0 to 1.0).",
											"name": "sample",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the number of samples per channel of the SoundData.",
							"name": "getSampleCount",
							"variants": [
								{
									"returns": [
										{
											"description": "Total number of samples.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Returns the sample rate of the SoundData.",
							"name": "getSampleRate",
							"variants": [
								{
									"returns": [
										{
											"description": "Number of samples per second.",
											"name": "rate",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Sets the value of the sample-point at the specified position. For stereo SoundData objects, the data from the left and right channels are interleaved in that order.",
							"name": "setSample",
							"variants": [
								{
									"arguments": [
										{
											"description": "An integer value specifying the position of the sample (starting at 0).",
											"name": "i",
											"type": "number"
										},
										{
											"description": "The normalized samplepoint (range -1.0 to 1.0).",
											"name": "sample",
											"type": "number"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "An integer value specifying the position of the sample (starting at 0).",
											"name": "i",
											"type": "number"
										},
										{
											"description": "The index of the channel to set within the given sample.",
											"name": "channel",
											"type": "number"
										},
										{
											"description": "The normalized samplepoint (range -1.0 to 1.0).",
											"name": "sample",
											"type": "number"
										}
									],
									"description": "Sets the value of a sample using an explicit sample index instead of interleaving them in the sample position parameter."
								}
							]
						}
					],
					"name": "SoundData",
					"supertypes": [
						"Data",
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides access to information about the user's system.",
			"enums": [
				{
					"constants": [
						{
							"description": "Cannot determine power status.",
							"name": "unknown"
						},
						{
							"description": "Not plugged in, running on a battery.",
							"name": "battery"
						},
						{
							"description": "Plugged in, no battery available.",
							"name": "nobattery"
						},
						{
							"description": "Plugged in, charging battery.",
							"name": "charging"
						},
						{
							"description": "Plugged in, battery is fully charged.",
							"name": "charged"
						}
					],
					"description": "The basic state of the system's power supply.",
					"name": "PowerState"
				}
			],
			"functions": [
				{
					"description": "Gets text from the clipboard.",
					"name": "getClipboardText",
					"variants": [
						{
							"returns": [
								{
									"description": "The text currently held in the system's clipboard.",
									"name": "text",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current operating system. In general, LÖVE abstracts away the need to know the current operating system, but there are a few cases where it can be useful (especially in combination with os.execute.)",
					"name": "getOS",
					"variants": [
						{
							"description": "In LÖVE version 0.8.0, the '''love._os''' string contains the current operating system.",
							"returns": [
								{
									"description": "The current operating system. 'OS X', 'Windows', 'Linux', 'Android' or 'iOS'.",
									"name": "osString",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets information about the system's power supply.",
					"name": "getPowerInfo",
					"variants": [
						{
							"returns": [
								{
									"description": "The basic state of the power supply.",
									"name": "state",
									"type": "PowerState"
								},
								{
									"description": "Percentage of battery life left, between 0 and 100. nil if the value can't be determined or there's no battery.",
									"name": "percent",
									"type": "number"
								},
								{
									"description": "Seconds of battery life left. nil if the value can't be determined or there's no battery.",
									"name": "seconds",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the amount of logical processor in the system.",
					"name": "getProcessorCount",
					"variants": [
						{
							"description": "The number includes the threads reported if technologies such as Intel's Hyper-threading are enabled. For example, on a 4-core CPU with Hyper-threading, this function will return 8.",
							"returns": [
								{
									"description": "Amount of logical processors.",
									"name": "processorCount",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether another application on the system is playing music in the background.\n\nCurrently this is implemented on iOS and Android, and will always return false on other operating systems. The t.audio.mixwithsystem flag in love.conf can be used to configure whether background audio / music from other apps should play while LÖVE is open.",
					"name": "hasBackgroundMusic",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the user is playing music in the background via another app, false otherwise.",
									"name": "backgroundmusic",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Opens a URL with the user's web or file browser.",
					"name": "openURL",
					"variants": [
						{
							"arguments": [
								{
									"description": "The URL to open. Must be formatted as a proper URL.",
									"name": "url",
									"type": "string"
								}
							],
							"description": "Passing file:// scheme in Android 7.0 (Nougat) and later always result in failure. Prior to 11.2, this will crash LÖVE instead of returning false.",
							"returns": [
								{
									"description": "Whether the URL was opened successfully.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Puts text in the clipboard.",
					"name": "setClipboardText",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new text to hold in the system's clipboard.",
									"name": "text",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Causes the device to vibrate, if possible. Currently this will only work on Android and iOS devices that have a built-in vibration motor.",
					"name": "vibrate",
					"variants": [
						{
							"arguments": [
								{
									"default": "0.5",
									"description": "The duration to vibrate for. If called on an iOS device, it will always vibrate for 0.5 seconds due to limitations in the iOS system APIs.",
									"name": "seconds",
									"type": "number"
								}
							]
						}
					]
				}
			],
			"name": "system",
			"types": []
		},
		{
			"description": "Allows you to work with threads.\n\nThreads are separate Lua environments, running in parallel to the main code. As their code runs separately, they can be used to compute complex operations without adversely affecting the frame rate of the main thread. However, as they are separate environments, they cannot access the variables and functions of the main thread, and communication between threads is limited.\n\nAll LOVE objects (userdata) are shared among threads so you'll only have to send their references across threads. You may run into concurrency issues if you manipulate an object on multiple threads at the same time.\n\nWhen a Thread is started, it only loads the love.thread module. Every other module has to be loaded with require.",
			"enums": [],
			"functions": [
				{
					"description": "Creates or retrieves a named thread channel.",
					"name": "getChannel",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the channel you want to create or retrieve.",
									"name": "name",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "The Channel object associated with the name.",
									"name": "channel",
									"type": "Channel"
								}
							]
						}
					]
				},
				{
					"description": "Create a new unnamed thread channel.\n\nOne use for them is to pass new unnamed channels to other threads via Channel:push on a named channel.",
					"name": "newChannel",
					"variants": [
						{
							"returns": [
								{
									"description": "The new Channel object.",
									"name": "channel",
									"type": "Channel"
								}
							]
						}
					]
				},
				{
					"description": "Creates a new Thread from a filename, string or FileData object containing Lua code.",
					"name": "newThread",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the Lua file to use as the source.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A new Thread that has yet to be started.",
									"name": "thread",
									"type": "Thread"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The FileData containing the Lua code to use as the source.",
									"name": "fileData",
									"type": "FileData"
								}
							],
							"returns": [
								{
									"description": "A new Thread that has yet to be started.",
									"name": "thread",
									"type": "Thread"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "A string containing the Lua code to use as the source. It needs to either be at least 1024 characters long, or contain at least one newline.",
									"name": "codestring",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A new Thread that has yet to be started.",
									"name": "thread",
									"type": "Thread"
								}
							]
						}
					]
				}
			],
			"name": "thread",
			"types": [
				{
					"constructors": [
						"newChannel",
						"getChannel"
					],
					"description": "An object which can be used to send and receive data between different threads.",
					"functions": [
						{
							"description": "Clears all the messages in the Channel queue.",
							"name": "clear",
							"variants": [
								[]
							]
						},
						{
							"description": "Retrieves the value of a Channel message and removes it from the message queue.\n\nIt waits until a message is in the queue then returns the message value.",
							"name": "demand",
							"variants": [
								{
									"returns": [
										{
											"description": "The contents of the message.",
											"name": "value",
											"type": "Variant"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The maximum amount of time to wait.",
											"name": "timeout",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "The contents of the message or nil if the timeout expired.",
											"name": "value",
											"type": "Variant"
										}
									]
								}
							]
						},
						{
							"description": "Retrieves the number of messages in the thread Channel queue.",
							"name": "getCount",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of messages in the queue.",
											"name": "count",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether a pushed value has been popped or otherwise removed from the Channel.",
							"name": "hasRead",
							"variants": [
								{
									"arguments": [
										{
											"description": "An id value previously returned by Channel:push.",
											"name": "id",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Whether the value represented by the id has been removed from the Channel via Channel:pop, Channel:demand, or Channel:clear.",
											"name": "hasread",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Retrieves the value of a Channel message, but leaves it in the queue.\n\nIt returns nil if there's no message in the queue.",
							"name": "peek",
							"variants": [
								{
									"returns": [
										{
											"description": "The contents of the message.",
											"name": "value",
											"type": "Variant"
										}
									]
								}
							]
						},
						{
							"description": "Executes the specified function atomically with respect to this Channel.\n\nCalling multiple methods in a row on the same Channel is often useful. However if multiple Threads are calling this Channel's methods at the same time, the different calls on each Thread might end up interleaved (e.g. one or more of the second thread's calls may happen in between the first thread's calls.)\n\nThis method avoids that issue by making sure the Thread calling the method has exclusive access to the Channel until the specified function has returned.",
							"name": "performAtomic",
							"variants": [
								{
									"arguments": [
										{
											"description": "The function to call, the form of function(channel, arg1, arg2, ...) end. The Channel is passed as the first argument to the function when it is called.",
											"name": "func",
											"signature": {
												"arguments": [
													{
														"description": "The channel.",
														"name": "channel",
														"type": "Channel"
													},
													{
														"description": "Additional arguments passed.",
														"name": "...",
														"type": "any"
													}
												],
												"returns": [
													{
														"description": "Return values to return after the call (if any).",
														"name": "...",
														"type": "any"
													}
												]
											},
											"type": "function"
										},
										{
											"description": "Additional arguments that the given function will receive when it is called.",
											"name": "...",
											"type": "any"
										}
									],
									"returns": [
										{
											"description": "The first return value of the given function (if any.)",
											"name": "ret1",
											"type": "any"
										},
										{
											"description": "Any other return values.",
											"name": "...",
											"type": "any"
										}
									]
								}
							]
						},
						{
							"description": "Retrieves the value of a Channel message and removes it from the message queue.\n\nIt returns nil if there are no messages in the queue.",
							"name": "pop",
							"variants": [
								{
									"returns": [
										{
											"description": "The contents of the message.",
											"name": "value",
											"type": "Variant"
										}
									]
								}
							]
						},
						{
							"description": "Send a message to the thread Channel.\n\nSee Variant for the list of supported types.",
							"name": "push",
							"variants": [
								{
									"arguments": [
										{
											"description": "The contents of the message.",
											"name": "value",
											"type": "Variant"
										}
									],
									"returns": [
										{
											"description": "Identifier which can be supplied to Channel:hasRead",
											"name": "id",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Send a message to the thread Channel and wait for a thread to accept it.\n\nSee Variant for the list of supported types.",
							"name": "supply",
							"variants": [
								{
									"arguments": [
										{
											"description": "The contents of the message.",
											"name": "value",
											"type": "Variant"
										}
									],
									"returns": [
										{
											"description": "Whether the message was successfully supplied (always true).",
											"name": "success",
											"type": "boolean"
										}
									]
								},
								{
									"arguments": [
										{
											"description": "The contents of the message.",
											"name": "value",
											"type": "Variant"
										},
										{
											"description": "The maximum amount of time to wait.",
											"name": "timeout",
											"type": "number"
										}
									],
									"returns": [
										{
											"description": "Whether the message was successfully supplied before the timeout expired.",
											"name": "success",
											"type": "boolean"
										}
									]
								}
							]
						}
					],
					"name": "Channel",
					"supertypes": [
						"Object"
					]
				},
				{
					"constructors": [
						"newThread"
					],
					"description": "A Thread is a chunk of code that can run in parallel with other threads. Data can be sent between different threads with Channel objects.",
					"functions": [
						{
							"description": "Retrieves the error string from the thread if it produced an error.",
							"name": "getError",
							"variants": [
								{
									"returns": [
										{
											"description": "The error message, or nil if the Thread has not caused an error.",
											"name": "err",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Returns whether the thread is currently running.\n\nThreads which are not running can be (re)started with Thread:start.",
							"name": "isRunning",
							"variants": [
								{
									"returns": [
										{
											"description": "True if the thread is running, false otherwise.",
											"name": "value",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Starts the thread.\n\nBeginning with version 0.9.0, threads can be restarted after they have completed their execution.",
							"name": "start",
							"variants": [
								[],
								{
									"arguments": [
										{
											"description": "A string, number, boolean, LÖVE object, or simple table.",
											"name": "...",
											"type": "Variant"
										}
									],
									"description": "Arguments passed to Thread:start are accessible in the thread's main file via '''...''' (the vararg expression.)"
								}
							]
						},
						{
							"description": "Wait for a thread to finish.\n\nThis call will block until the thread finishes.",
							"name": "wait",
							"variants": [
								[]
							]
						}
					],
					"name": "Thread",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides an interface to the user's clock.",
			"enums": [],
			"functions": [
				{
					"description": "Returns the average delta time (seconds per frame) over the last second.",
					"name": "getAverageDelta",
					"variants": [
						{
							"returns": [
								{
									"description": "The average delta time over the last second.",
									"name": "delta",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the time between the last two frames.",
					"name": "getDelta",
					"variants": [
						{
							"returns": [
								{
									"description": "The time passed (in seconds).",
									"name": "dt",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the current frames per second.",
					"name": "getFPS",
					"variants": [
						{
							"returns": [
								{
									"description": "The current FPS.",
									"name": "fps",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Returns the value of a timer with an unspecified starting time.\n\nThis function should only be used to calculate differences between points in time, as the starting time of the timer is unknown.",
					"name": "getTime",
					"variants": [
						{
							"returns": [
								{
									"description": "The time in seconds. Given as a decimal, accurate to the microsecond.",
									"name": "time",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Pauses the current thread for the specified amount of time.",
					"name": "sleep",
					"variants": [
						{
							"arguments": [
								{
									"description": "Seconds to sleep for.",
									"name": "s",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Measures the time between two frames.\n\nCalling this changes the return value of love.timer.getDelta.",
					"name": "step",
					"variants": [
						{
							"returns": [
								{
									"description": "The time passed (in seconds).",
									"name": "dt",
									"type": "number"
								}
							]
						}
					]
				}
			],
			"name": "timer",
			"types": []
		},
		{
			"description": "Provides an interface to touch-screen presses.",
			"enums": [],
			"functions": [
				{
					"description": "Gets the current position of the specified touch-press, in pixels.",
					"name": "getPosition",
					"variants": [
						{
							"arguments": [
								{
									"description": "The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values.",
									"name": "id",
									"type": "light userdata"
								}
							],
							"description": "The unofficial Android and iOS ports of LÖVE 0.9.2 reported touch-press positions as normalized values in the range of 1, whereas this API reports positions in pixels.",
							"returns": [
								{
									"description": "The position along the x-axis of the touch-press inside the window, in pixels.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The position along the y-axis of the touch-press inside the window, in pixels.",
									"name": "y",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the current pressure of the specified touch-press.",
					"name": "getPressure",
					"variants": [
						{
							"arguments": [
								{
									"description": "The identifier of the touch-press. Use love.touch.getTouches, love.touchpressed, or love.touchmoved to obtain touch id values.",
									"name": "id",
									"type": "light userdata"
								}
							],
							"returns": [
								{
									"description": "The pressure of the touch-press. Most touch screens aren't pressure sensitive, in which case the pressure will be 1.",
									"name": "pressure",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets a list of all active touch-presses.",
					"name": "getTouches",
					"variants": [
						{
							"description": "The id values are the same as those used as arguments to love.touchpressed, love.touchmoved, and love.touchreleased.\n\nThe id value of a specific touch-press is only guaranteed to be unique for the duration of that touch-press. As soon as love.touchreleased is called using that id, it may be reused for a new touch-press via love.touchpressed.",
							"returns": [
								{
									"arraytype": "light userdata",
									"description": "A list of active touch-press id values, which can be used with love.touch.getPosition.",
									"name": "touches",
									"type": "table"
								}
							]
						}
					]
				}
			],
			"name": "touch",
			"types": []
		},
		{
			"description": "This module is responsible for decoding, controlling, and streaming video files.\n\nIt can't draw the videos, see love.graphics.newVideo and Video objects for that.",
			"enums": [],
			"functions": [
				{
					"description": "Creates a new VideoStream. Currently only Ogg Theora video files are supported. VideoStreams can't draw videos, see love.graphics.newVideo for that.",
					"name": "newVideoStream",
					"variants": [
						{
							"arguments": [
								{
									"description": "The file path to the Ogg Theora video file.",
									"name": "filename",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "A new VideoStream.",
									"name": "videostream",
									"type": "VideoStream"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The File object containing the Ogg Theora video.",
									"name": "file",
									"type": "File"
								}
							],
							"returns": [
								{
									"description": "A new VideoStream.",
									"name": "videostream",
									"type": "VideoStream"
								}
							]
						}
					]
				}
			],
			"name": "video",
			"types": [
				{
					"constructors": [
						"newVideoStream"
					],
					"description": "An object which decodes, streams, and controls Videos.",
					"functions": [
						{
							"description": "Gets the filename of the VideoStream.",
							"name": "getFilename",
							"variants": [
								{
									"returns": [
										{
											"description": "The filename of the VideoStream",
											"name": "filename",
											"type": "string"
										}
									]
								}
							]
						},
						{
							"description": "Gets whether the VideoStream is playing.",
							"name": "isPlaying",
							"variants": [
								{
									"returns": [
										{
											"description": "Whether the VideoStream is playing.",
											"name": "playing",
											"type": "boolean"
										}
									]
								}
							]
						},
						{
							"description": "Pauses the VideoStream.",
							"name": "pause",
							"variants": [
								[]
							]
						},
						{
							"description": "Plays the VideoStream.",
							"name": "play",
							"variants": [
								[]
							]
						},
						{
							"description": "Rewinds the VideoStream. Synonym to VideoStream:seek(0).",
							"name": "rewind",
							"variants": [
								[]
							]
						},
						{
							"description": "Sets the current playback position of the VideoStream.",
							"name": "seek",
							"variants": [
								{
									"arguments": [
										{
											"description": "The time in seconds since the beginning of the VideoStream.",
											"name": "offset",
											"type": "number"
										}
									]
								}
							]
						},
						{
							"description": "Gets the current playback position of the VideoStream.",
							"name": "tell",
							"variants": [
								{
									"returns": [
										{
											"description": "The number of seconds sionce the beginning of the VideoStream.",
											"name": "seconds",
											"type": "number"
										}
									]
								}
							]
						}
					],
					"name": "VideoStream",
					"supertypes": [
						"Object"
					]
				}
			]
		},
		{
			"description": "Provides an interface for modifying and retrieving information about the program's window.",
			"enums": [
				{
					"constants": [
						{
							"description": "Orientation cannot be determined.",
							"name": "unknown"
						},
						{
							"description": "Landscape orientation.",
							"name": "landscape"
						},
						{
							"description": "Landscape orientation (flipped).",
							"name": "landscapeflipped"
						},
						{
							"description": "Portrait orientation.",
							"name": "portrait"
						},
						{
							"description": "Portrait orientation (flipped).",
							"name": "portraitflipped"
						}
					],
					"description": "Types of device display orientation.",
					"name": "DisplayOrientation"
				},
				{
					"constants": [
						{
							"description": "Sometimes known as borderless fullscreen windowed mode. A borderless screen-sized window is created which sits on top of all desktop UI elements. The window is automatically resized to match the dimensions of the desktop, and its size cannot be changed.",
							"name": "desktop"
						},
						{
							"description": "Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.",
							"name": "exclusive"
						},
						{
							"description": "Standard exclusive-fullscreen mode. Changes the display mode (actual resolution) of the monitor.",
							"name": "normal"
						}
					],
					"description": "Types of fullscreen modes.",
					"name": "FullscreenType"
				},
				{
					"constants": [
						{
							"description": "Informational dialog.",
							"name": "info"
						},
						{
							"description": "Warning dialog.",
							"name": "warning"
						},
						{
							"description": "Error dialog.",
							"name": "error"
						}
					],
					"description": "Types of message box dialogs. Different types may have slightly different looks.",
					"name": "MessageBoxType"
				}
			],
			"functions": [
				{
					"description": "Closes the window. It can be reopened with love.window.setMode.",
					"name": "close",
					"variants": [
						[]
					]
				},
				{
					"description": "Converts a number from pixels to density-independent units.\n\nThe pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.fromPixels(1600) would return 800 in that case.\n\nThis function converts coordinates from pixels to the size users are expecting them to display at onscreen. love.window.toPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.",
					"name": "fromPixels",
					"variants": [
						{
							"arguments": [
								{
									"description": "A number in pixels to convert to density-independent units.",
									"name": "pixelvalue",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The converted number, in density-independent units.",
									"name": "value",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The x-axis value of a coordinate in pixels.",
									"name": "px",
									"type": "number"
								},
								{
									"description": "The y-axis value of a coordinate in pixels.",
									"name": "py",
									"type": "number"
								}
							],
							"description": "The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in terms of pixels.",
							"returns": [
								{
									"description": "The converted x-axis value of the coordinate, in density-independent units.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The converted y-axis value of the coordinate, in density-independent units.",
									"name": "y",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the DPI scale factor associated with the window.\n\nThe pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.getDPIScale() would return 2.0 in that case.\n\nThe love.window.fromPixels and love.window.toPixels functions can also be used to convert between units.\n\nThe highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.",
					"name": "getDPIScale",
					"variants": [
						{
							"description": "The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in terms of pixels.",
							"returns": [
								{
									"description": "The pixel scale factor associated with the window.",
									"name": "scale",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the width and height of the desktop.",
					"name": "getDesktopDimensions",
					"variants": [
						{
							"arguments": [
								{
									"default": "1",
									"description": "The index of the display, if multiple monitors are available.",
									"name": "displayindex",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The width of the desktop.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "The height of the desktop.",
									"name": "height",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the number of connected monitors.",
					"name": "getDisplayCount",
					"variants": [
						{
							"returns": [
								{
									"description": "The number of currently connected displays.",
									"name": "count",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the name of a display.",
					"name": "getDisplayName",
					"variants": [
						{
							"arguments": [
								{
									"default": "1",
									"description": "The index of the display to get the name of.",
									"name": "displayindex",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The name of the specified display.",
									"name": "name",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets current device display orientation.",
					"name": "getDisplayOrientation",
					"variants": [
						{
							"arguments": [
								{
									"default": "nil",
									"description": "Display index to get its display orientation, or nil for default display index.",
									"name": "displayindex",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "Current device display orientation.",
									"name": "orientation",
									"type": "DisplayOrientation"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether the window is fullscreen.",
					"name": "getFullscreen",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window is fullscreen, false otherwise.",
									"name": "fullscreen",
									"type": "boolean"
								},
								{
									"description": "The type of fullscreen mode used.",
									"name": "fstype",
									"type": "FullscreenType"
								}
							]
						}
					]
				},
				{
					"description": "Gets a list of supported fullscreen modes.",
					"name": "getFullscreenModes",
					"variants": [
						{
							"arguments": [
								{
									"default": "1",
									"description": "The index of the display, if multiple monitors are available.",
									"name": "displayindex",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "A table of width/height pairs. (Note that this may not be in order.)",
									"name": "modes",
									"table": [
										{
											"description": "Window fullscreen width.",
											"name": "width",
											"type": "number"
										},
										{
											"description": "Window fullscreen height.",
											"name": "height",
											"type": "number"
										}
									],
									"tablearray": "",
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the window icon.",
					"name": "getIcon",
					"variants": [
						{
							"returns": [
								{
									"description": "The window icon imagedata, or nil if no icon has been set with love.window.setIcon.",
									"name": "imagedata",
									"type": "ImageData"
								}
							]
						}
					]
				},
				{
					"description": "Gets the display mode and properties of the window.",
					"name": "getMode",
					"variants": [
						{
							"returns": [
								{
									"description": "Window width.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "Window height.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "Table with the window properties:",
									"name": "flags",
									"table": [
										{
											"description": "Fullscreen (true), or windowed (false).",
											"name": "fullscreen",
											"type": "boolean"
										},
										{
											"description": "The type of fullscreen mode used.",
											"name": "fullscreentype",
											"type": "FullscreenType"
										},
										{
											"description": "True if the graphics framerate is synchronized with the monitor's refresh rate, false otherwise.",
											"name": "vsync",
											"type": "boolean"
										},
										{
											"description": "The number of antialiasing samples used (0 if MSAA is disabled).",
											"name": "msaa",
											"type": "number"
										},
										{
											"description": "True if the window is resizable in windowed mode, false otherwise.",
											"name": "resizable",
											"type": "boolean"
										},
										{
											"description": "True if the window is borderless in windowed mode, false otherwise.",
											"name": "borderless",
											"type": "boolean"
										},
										{
											"description": "True if the window is centered in windowed mode, false otherwise.",
											"name": "centered",
											"type": "boolean"
										},
										{
											"description": "The index of the display the window is currently in, if multiple monitors are available.",
											"name": "display",
											"type": "number"
										},
										{
											"description": "The minimum width of the window, if it's resizable.",
											"name": "minwidth",
											"type": "number"
										},
										{
											"description": "The minimum height of the window, if it's resizable.",
											"name": "minheight",
											"type": "number"
										},
										{
											"description": "True if high-dpi mode is allowed on Retina displays in OS X. Does nothing on non-Retina displays.",
											"name": "highdpi",
											"type": "boolean"
										},
										{
											"description": "The refresh rate of the screen's current display mode, in Hz. May be 0 if the value can't be determined.",
											"name": "refreshrate",
											"type": "number"
										},
										{
											"description": "The x-coordinate of the window's position in its current display.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-coordinate of the window's position in its current display.",
											"name": "y",
											"type": "number"
										},
										{
											"description": "Removed in 0.10.0 (use love.graphics.isGammaCorrect instead). True if sRGB gamma correction is applied when drawing to the screen.",
											"name": "srgb",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							]
						}
					]
				},
				{
					"description": "Gets the position of the window on the screen.\n\nThe window position is in the coordinate space of the display it is currently in.",
					"name": "getPosition",
					"variants": [
						{
							"returns": [
								{
									"description": "The x-coordinate of the window's position.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y-coordinate of the window's position.",
									"name": "y",
									"type": "number"
								},
								{
									"description": "The index of the display that the window is in.",
									"name": "displayindex",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets area inside the window which is known to be unobstructed by a system title bar, the iPhone X notch, etc. Useful for making sure UI elements can be seen by the user.",
					"name": "getSafeArea",
					"variants": [
						{
							"description": "Values returned are in DPI-scaled units (the same coordinate system as most other window-related APIs), not in pixels.",
							"returns": [
								{
									"description": "Starting position of safe area (x-axis).",
									"name": "x",
									"type": "number"
								},
								{
									"description": "Starting position of safe area (y-axis).",
									"name": "y",
									"type": "number"
								},
								{
									"description": "Width of safe area.",
									"name": "w",
									"type": "number"
								},
								{
									"description": "Height of safe area.",
									"name": "h",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the window title.",
					"name": "getTitle",
					"variants": [
						{
							"returns": [
								{
									"description": "The current window title.",
									"name": "title",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Gets current vertical synchronization (vsync).",
					"name": "getVSync",
					"variants": [
						{
							"description": "This can be less expensive alternative to love.window.getMode if you want to get current vsync status.",
							"returns": [
								{
									"description": "Current vsync status. 1 if enabled, 0 if disabled, and -1 for adaptive vsync.",
									"name": "vsync",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Checks if the game window has keyboard focus.",
					"name": "hasFocus",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window has the focus or false if not.",
									"name": "focus",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks if the game window has mouse focus.",
					"name": "hasMouseFocus",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window has mouse focus or false if not.",
									"name": "focus",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.",
					"name": "isDisplaySleepEnabled",
					"variants": [
						{
							"returns": [
								{
									"description": "True if system display sleep is enabled / allowed, false otherwise.",
									"name": "enabled",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether the Window is currently maximized.\n\nThe window can be maximized if it is not fullscreen and is resizable, and either the user has pressed the window's Maximize button or love.window.maximize has been called.",
					"name": "isMaximized",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window is currently maximized in windowed mode, false otherwise.",
									"name": "maximized",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets whether the Window is currently minimized.",
					"name": "isMinimized",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window is currently minimized, false otherwise.",
									"name": "minimized",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks if the window is open.",
					"name": "isOpen",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window is open, false otherwise.",
									"name": "open",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Checks if the game window is visible.\n\nThe window is considered visible if it's not minimized and the program isn't hidden.",
					"name": "isVisible",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the window is visible or false if not.",
									"name": "visible",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Makes the window as large as possible.\n\nThis function has no effect if the window isn't resizable, since it essentially programmatically presses the window's 'maximize' button.",
					"name": "maximize",
					"variants": [
						[]
					]
				},
				{
					"description": "Minimizes the window to the system's task bar / dock.",
					"name": "minimize",
					"variants": [
						[]
					]
				},
				{
					"description": "Causes the window to request the attention of the user if it is not in the foreground.\n\nIn Windows the taskbar icon will flash, and in OS X the dock icon will bounce.",
					"name": "requestAttention",
					"variants": [
						{
							"arguments": [
								{
									"default": "false",
									"description": "Whether to continuously request attention until the window becomes active, or to do it only once.",
									"name": "continuous",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Restores the size and position of the window if it was minimized or maximized.",
					"name": "restore",
					"variants": [
						[]
					]
				},
				{
					"description": "Sets whether the display is allowed to sleep while the program is running.\n\nDisplay sleep is disabled by default. Some types of input (e.g. joystick button presses) might not prevent the display from sleeping, if display sleep is allowed.",
					"name": "setDisplaySleepEnabled",
					"variants": [
						{
							"arguments": [
								{
									"description": "True to enable system display sleep, false to disable it.",
									"name": "enable",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Enters or exits fullscreen. The display to use when entering fullscreen is chosen based on which display the window is currently in, if multiple monitors are connected.",
					"name": "setFullscreen",
					"variants": [
						{
							"arguments": [
								{
									"description": "Whether to enter or exit fullscreen mode.",
									"name": "fullscreen",
									"type": "boolean"
								}
							],
							"returns": [
								{
									"description": "True if an attempt to enter fullscreen was successful, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "Whether to enter or exit fullscreen mode.",
									"name": "fullscreen",
									"type": "boolean"
								},
								{
									"description": "The type of fullscreen mode to use.",
									"name": "fstype",
									"type": "FullscreenType"
								}
							],
							"description": "If fullscreen mode is entered and the window size doesn't match one of the monitor's display modes (in normal fullscreen mode) or the window size doesn't match the desktop size (in 'desktop' fullscreen mode), the window will be resized appropriately. The window will revert back to its original size again when fullscreen mode is exited using this function.",
							"returns": [
								{
									"description": "True if an attempt to enter fullscreen was successful, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the window icon until the game is quit. Not all operating systems support very large icon images.",
					"name": "setIcon",
					"variants": [
						{
							"arguments": [
								{
									"description": "The window icon image.",
									"name": "imagedata",
									"type": "ImageData"
								}
							],
							"returns": [
								{
									"description": "Whether the icon has been set successfully.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the display mode and properties of the window.\n\nIf width or height is 0, setMode will use the width and height of the desktop. \n\nChanging the display mode may have side effects: for example, canvases will be cleared and values sent to shaders with canvases beforehand or re-draw to them afterward if you need to.",
					"name": "setMode",
					"variants": [
						{
							"arguments": [
								{
									"description": "Display width.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "Display height.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The flags table with the options:",
									"name": "flags",
									"table": [
										{
											"default": "false",
											"description": "Fullscreen (true), or windowed (false).",
											"name": "fullscreen",
											"type": "boolean"
										},
										{
											"default": "'desktop'",
											"description": "The type of fullscreen to use. This defaults to 'normal' in 0.9.0 through 0.9.2 and to 'desktop' in 0.10.0 and older.",
											"name": "fullscreentype",
											"type": "FullscreenType"
										},
										{
											"default": "true",
											"description": "True if LÖVE should wait for vsync, false otherwise.",
											"name": "vsync",
											"type": "boolean"
										},
										{
											"default": "0",
											"description": "The number of antialiasing samples.",
											"name": "msaa",
											"type": "number"
										},
										{
											"default": "true",
											"description": "Whether a stencil buffer should be allocated. If true, the stencil buffer will have 8 bits.",
											"name": "stencil",
											"type": "boolean"
										},
										{
											"default": "0",
											"description": "The number of bits in the depth buffer.",
											"name": "depth",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True if the window should be resizable in windowed mode, false otherwise.",
											"name": "resizable",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "True if the window should be borderless in windowed mode, false otherwise.",
											"name": "borderless",
											"type": "boolean"
										},
										{
											"default": "true",
											"description": "True if the window should be centered in windowed mode, false otherwise.",
											"name": "centered",
											"type": "boolean"
										},
										{
											"default": "1",
											"description": "The index of the display to show the window in, if multiple monitors are available.",
											"name": "display",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The minimum width of the window, if it's resizable. Cannot be less than 1.",
											"name": "minwidth",
											"type": "number"
										},
										{
											"default": "1",
											"description": "The minimum height of the window, if it's resizable. Cannot be less than 1.",
											"name": "minheight",
											"type": "number"
										},
										{
											"default": "false",
											"description": "True if high-dpi mode should be used on Retina displays in macOS and iOS. Does nothing on non-Retina displays.",
											"name": "highdpi",
											"type": "boolean"
										},
										{
											"default": "nil",
											"description": "The x-coordinate of the window's position in the specified display.",
											"name": "x",
											"type": "number"
										},
										{
											"default": "nil",
											"description": "The y-coordinate of the window's position in the specified display.",
											"name": "y",
											"type": "number"
										},
										{
											"default": "true",
											"description": "Disables automatic DPI scaling when false.",
											"name": "usedpiscale",
											"type": "boolean"
										},
										{
											"default": "false",
											"description": "Removed in 0.10.0 (set t.gammacorrect in conf.lua instead). True if sRGB gamma correction should be applied when drawing to the screen.",
											"name": "srgb",
											"type": "boolean"
										}
									],
									"type": "table"
								}
							],
							"description": "* If fullscreen is enabled and the width or height is not supported (see resize event will be triggered.\n\n* If the fullscreen type is 'desktop', then the window will be automatically resized to the desktop resolution.\n\n* If the width and height is bigger than or equal to the desktop dimensions (this includes setting both to 0) and fullscreen is set to false, it will appear 'visually' fullscreen, but it's not true fullscreen and conf.lua (i.e. t.window = false) and use this function to manually create the window, then you must not call any other love.graphics.* function before this one. Doing so will result in undefined behavior and/or crashes because OpenGL cannot function properly without a window.\n\n* Transparent backgrounds are currently not supported.",
							"returns": [
								{
									"description": "True if successful, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Sets the position of the window on the screen.\n\nThe window position is in the coordinate space of the specified display.",
					"name": "setPosition",
					"variants": [
						{
							"arguments": [
								{
									"description": "The x-coordinate of the window's position.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y-coordinate of the window's position.",
									"name": "y",
									"type": "number"
								},
								{
									"default": "1",
									"description": "The index of the display that the new window position is relative to.",
									"name": "displayindex",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the window title.",
					"name": "setTitle",
					"variants": [
						{
							"arguments": [
								{
									"description": "The new window title.",
									"name": "title",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Sets vertical synchronization mode.",
					"name": "setVSync",
					"variants": [
						{
							"arguments": [
								{
									"description": "VSync number: 1 to enable, 0 to disable, and -1 for adaptive vsync.",
									"name": "vsync",
									"type": "number"
								}
							],
							"description": "* Not all graphics drivers support adaptive vsync (-1 value). In that case, it will be automatically set to 1.\n\n* It is recommended to keep vsync activated if you don't know about the possible implications of turning it off.\n\n* This function doesn't recreate the window, unlike love.window.setMode and love.window.updateMode."
						}
					]
				},
				{
					"description": "Displays a message box dialog above the love window. The message box contains a title, optional text, and buttons.",
					"name": "showMessageBox",
					"variants": [
						{
							"arguments": [
								{
									"description": "The title of the message box.",
									"name": "title",
									"type": "string"
								},
								{
									"description": "The text inside the message box.",
									"name": "message",
									"type": "string"
								},
								{
									"default": "'info'",
									"description": "The type of the message box.",
									"name": "type",
									"type": "MessageBoxType"
								},
								{
									"default": "true",
									"description": "Whether the message box should be attached to the love window or free-floating.",
									"name": "attachtowindow",
									"type": "boolean"
								}
							],
							"description": "Displays a simple message box with a single 'OK' button.",
							"returns": [
								{
									"description": "Whether the message box was successfully displayed.",
									"name": "success",
									"type": "boolean"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The title of the message box.",
									"name": "title",
									"type": "string"
								},
								{
									"description": "The text inside the message box.",
									"name": "message",
									"type": "string"
								},
								{
									"description": "A table containing a list of button names to show. The table can also contain the fields enterbutton and escapebutton, which should be the index of the default button to use when the user presses 'enter' or 'escape', respectively.",
									"name": "buttonlist",
									"type": "table"
								},
								{
									"default": "'info'",
									"description": "The type of the message box.",
									"name": "type",
									"type": "MessageBoxType"
								},
								{
									"default": "true",
									"description": "Whether the message box should be attached to the love window or free-floating.",
									"name": "attachtowindow",
									"type": "boolean"
								}
							],
							"description": "Displays a message box with a customized list of buttons.",
							"returns": [
								{
									"description": "The index of the button pressed by the user. May be 0 if the message box dialog was closed without pressing a button.",
									"name": "pressedbutton",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Converts a number from density-independent units to pixels.\n\nThe pixel density inside the window might be greater (or smaller) than the 'size' of the window. For example on a retina screen in Mac OS X with the highdpi window flag enabled, the window may take up the same physical size as an 800x600 window, but the area inside the window uses 1600x1200 pixels. love.window.toPixels(800) would return 1600 in that case.\n\nThis is used to convert coordinates from the size users are expecting them to display at onscreen to pixels. love.window.fromPixels does the opposite. The highdpi window flag must be enabled to use the full pixel density of a Retina screen on Mac OS X and iOS. The flag currently does nothing on Windows and Linux, and on Android it is effectively always enabled.\n\nMost LÖVE functions return values and expect arguments in terms of pixels rather than density-independent units.",
					"name": "toPixels",
					"variants": [
						{
							"arguments": [
								{
									"description": "A number in density-independent units to convert to pixels.",
									"name": "value",
									"type": "number"
								}
							],
							"returns": [
								{
									"description": "The converted number, in pixels.",
									"name": "pixelvalue",
									"type": "number"
								}
							]
						},
						{
							"arguments": [
								{
									"description": "The x-axis value of a coordinate in density-independent units to convert to pixels.",
									"name": "x",
									"type": "number"
								},
								{
									"description": "The y-axis value of a coordinate in density-independent units to convert to pixels.",
									"name": "y",
									"type": "number"
								}
							],
							"description": "The units of love.graphics.getWidth, love.graphics.getHeight, love.mouse.getPosition, mouse events, love.touch.getPosition, and touch events are always in terms of pixels.",
							"returns": [
								{
									"description": "The converted x-axis value of the coordinate, in pixels.",
									"name": "px",
									"type": "number"
								},
								{
									"description": "The converted y-axis value of the coordinate, in pixels.",
									"name": "py",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Sets the display mode and properties of the window, without modifying unspecified properties.\n\nIf width or height is 0, updateMode will use the width and height of the desktop. \n\nChanging the display mode may have side effects: for example, canvases will be cleared. Make sure to save the contents of canvases beforehand or re-draw to them afterward if you need to.",
					"name": "updateMode",
					"variants": [
						{
							"arguments": [
								{
									"description": "Window width.",
									"name": "width",
									"type": "number"
								},
								{
									"description": "Window height.",
									"name": "height",
									"type": "number"
								},
								{
									"description": "The settings table with the following optional fields. Any field not filled in will use the current value that would be returned by love.window.getMode.",
									"name": "settings",
									"table": [
										{
											"description": "Fullscreen (true), or windowed (false).",
											"name": "fullscreen",
											"type": "boolean"
										},
										{
											"description": "The type of fullscreen to use.",
											"name": "fullscreentype",
											"type": "FullscreenType"
										},
										{
											"description": "True if LÖVE should wait for vsync, false otherwise.",
											"name": "vsync",
											"type": "boolean"
										},
										{
											"description": "The number of antialiasing samples.",
											"name": "msaa",
											"type": "number"
										},
										{
											"description": "True if the window should be resizable in windowed mode, false otherwise.",
											"name": "resizable",
											"type": "boolean"
										},
										{
											"description": "True if the window should be borderless in windowed mode, false otherwise.",
											"name": "borderless",
											"type": "boolean"
										},
										{
											"description": "True if the window should be centered in windowed mode, false otherwise.",
											"name": "centered",
											"type": "boolean"
										},
										{
											"description": "The index of the display to show the window in, if multiple monitors are available.",
											"name": "display",
											"type": "number"
										},
										{
											"description": "The minimum width of the window, if it's resizable. Cannot be less than 1.",
											"name": "minwidth",
											"type": "number"
										},
										{
											"description": "The minimum height of the window, if it's resizable. Cannot be less than 1.",
											"name": "minheight",
											"type": "number"
										},
										{
											"description": "True if high-dpi mode should be used on Retina displays in macOS and iOS. Does nothing on non-Retina displays.",
											"name": "highdpi",
											"type": "boolean"
										},
										{
											"description": "The x-coordinate of the window's position in the specified display.",
											"name": "x",
											"type": "number"
										},
										{
											"description": "The y-coordinate of the window's position in the specified display.",
											"name": "y",
											"type": "number"
										}
									],
									"type": "table"
								}
							],
							"description": "If fullscreen is enabled and the width or height is not supported (see resize event will be triggered.\n\nIf the fullscreen type is 'desktop', then the window will be automatically resized to the desktop resolution.\n\nTransparent backgrounds are currently not supported.",
							"returns": [
								{
									"description": "True if successful, false otherwise.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				}
			],
			"name": "window",
			"types": []
		}
	],
	"types": [
		{
			"description": "The superclass of all data.",
			"functions": [
				{
					"description": "Creates a new copy of the Data object.",
					"name": "clone",
					"variants": [
						{
							"returns": [
								{
									"description": "The new copy.",
									"name": "clone",
									"type": "Data"
								}
							]
						}
					]
				},
				{
					"description": "Gets an FFI pointer to the Data.\n\nThis function should be preferred instead of Data:getPointer because the latter uses light userdata which can't store more all possible memory addresses on some new ARM64 architectures, when LuaJIT is used.",
					"name": "getFFIPointer",
					"variants": [
						{
							"returns": [
								{
									"description": "A raw void* pointer to the Data, or nil if FFI is unavailable.",
									"name": "pointer",
									"type": "cdata"
								}
							]
						}
					]
				},
				{
					"description": "Gets a pointer to the Data. Can be used with libraries such as LuaJIT's FFI.",
					"name": "getPointer",
					"variants": [
						{
							"returns": [
								{
									"description": "A raw pointer to the Data.",
									"name": "pointer",
									"type": "light userdata"
								}
							]
						}
					]
				},
				{
					"description": "Gets the Data's size in bytes.",
					"name": "getSize",
					"variants": [
						{
							"returns": [
								{
									"description": "The size of the Data in bytes.",
									"name": "size",
									"type": "number"
								}
							]
						}
					]
				},
				{
					"description": "Gets the full Data as a string.",
					"name": "getString",
					"variants": [
						{
							"returns": [
								{
									"description": "The raw data.",
									"name": "data",
									"type": "string"
								}
							]
						}
					]
				}
			],
			"name": "Data",
			"supertypes": [
				"Object"
			]
		},
		{
			"description": "The superclass of all LÖVE types.",
			"functions": [
				{
					"description": "Destroys the object's Lua reference. The object will be completely deleted if it's not referenced by any other LÖVE object or thread.\n\nThis method can be used to immediately clean up resources without waiting for Lua's garbage collector.",
					"name": "release",
					"variants": [
						{
							"returns": [
								{
									"description": "True if the object was released by this call, false if it had been previously released.",
									"name": "success",
									"type": "boolean"
								}
							]
						}
					]
				},
				{
					"description": "Gets the type of the object as a string.",
					"name": "type",
					"variants": [
						{
							"returns": [
								{
									"description": "The type as a string.",
									"name": "type",
									"type": "string"
								}
							]
						}
					]
				},
				{
					"description": "Checks whether an object is of a certain type. If the object has the type with the specified name in its hierarchy, this function will return true.",
					"name": "typeOf",
					"variants": [
						{
							"arguments": [
								{
									"description": "The name of the type to check for.",
									"name": "name",
									"type": "string"
								}
							],
							"returns": [
								{
									"description": "True if the object is of the specified type, false otherwise.",
									"name": "b",
									"type": "boolean"
								}
							]
						}
					]
				}
			],
			"name": "Object"
		}
	],
	"version": "11.5"
}